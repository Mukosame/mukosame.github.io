{"remainingRequest":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js??ref--3-1!/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/vue/dist/vue.runtime.esm.js","dependencies":[{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/vue/dist/vue.runtime.esm.js","mtime":1603041441452},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/cache-loader/dist/cjs.js","mtime":1603041438982},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js","mtime":1603041438713}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXN0cmluZy10YWciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5ldmVyeSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pcy1hcnJheSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4iOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS5ub3ciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLWV4dGVuc2libGUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtZnJvemVuIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtZmxvYXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1pbnQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0Lm93bi1rZXlzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc2V0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMiOwppbXBvcnQgX3R5cGVvZiBmcm9tICIvb3B0L215YmxvZy92dWVwcmVzcy10aGVtZS1yZWNvLW1hc3Rlci96ZGJsb2cvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZiI7CgovKiEKICogVnVlLmpzIHYyLjYuMTIKICogKGMpIDIwMTQtMjAyMCBFdmFuIFlvdQogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuCiAqLwoKLyogICovCnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pOyAvLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXIKLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy4KCmZ1bmN0aW9uIGlzVW5kZWYodikgewogIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbDsKfQoKZnVuY3Rpb24gaXNEZWYodikgewogIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbDsKfQoKZnVuY3Rpb24gaXNUcnVlKHYpIHsKICByZXR1cm4gdiA9PT0gdHJ1ZTsKfQoKZnVuY3Rpb24gaXNGYWxzZSh2KSB7CiAgcmV0dXJuIHYgPT09IGZhbHNlOwp9Ci8qKgogKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuCiAqLwoKCmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7CiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKICBfdHlwZW9mKHZhbHVlKSA9PT0gJ3N5bWJvbCcgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7Cn0KLyoqCiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbAogKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlCiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS4KICovCgoKZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7CiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiBfdHlwZW9mKG9iaikgPT09ICdvYmplY3QnOwp9Ci8qKgogKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uCiAqLwoKCnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nOwoKZnVuY3Rpb24gdG9SYXdUeXBlKHZhbHVlKSB7CiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSk7Cn0KLyoqCiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWUKICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy4KICovCgoKZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHsKICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7Cn0KCmZ1bmN0aW9uIGlzUmVnRXhwKHYpIHsKICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nOwp9Ci8qKgogKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC4KICovCgoKZnVuY3Rpb24gaXNWYWxpZEFycmF5SW5kZXgodmFsKSB7CiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTsKICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKTsKfQoKZnVuY3Rpb24gaXNQcm9taXNlKHZhbCkgewogIHJldHVybiBpc0RlZih2YWwpICYmIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsWyJjYXRjaCJdID09PSAnZnVuY3Rpb24nOwp9Ci8qKgogKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC4KICovCgoKZnVuY3Rpb24gdG9TdHJpbmcodmFsKSB7CiAgcmV0dXJuIHZhbCA9PSBudWxsID8gJycgOiBBcnJheS5pc0FycmF5KHZhbCkgfHwgaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKSA6IFN0cmluZyh2YWwpOwp9Ci8qKgogKiBDb252ZXJ0IGFuIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS4KICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuCiAqLwoKCmZ1bmN0aW9uIHRvTnVtYmVyKHZhbCkgewogIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpOwogIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG47Cn0KLyoqCiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleQogKiBpcyBpbiB0aGF0IG1hcC4KICovCgoKZnVuY3Rpb24gbWFrZU1hcChzdHIsIGV4cGVjdHNMb3dlckNhc2UpIHsKICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHsKICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7CiAgfQoKICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZSA/IGZ1bmN0aW9uICh2YWwpIHsKICAgIHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOwogIH0gOiBmdW5jdGlvbiAodmFsKSB7CiAgICByZXR1cm4gbWFwW3ZhbF07CiAgfTsKfQovKioKICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuCiAqLwoKCnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpOwovKioKICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLgogKi8KCnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTsKLyoqCiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXkuCiAqLwoKZnVuY3Rpb24gcmVtb3ZlKGFyciwgaXRlbSkgewogIGlmIChhcnIubGVuZ3RoKSB7CiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTsKCiAgICBpZiAoaW5kZXggPiAtMSkgewogICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSk7CiAgICB9CiAgfQp9Ci8qKgogKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LgogKi8KCgp2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5OwoKZnVuY3Rpb24gaGFzT3duKG9iaiwga2V5KSB7CiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpOwp9Ci8qKgogKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uCiAqLwoKCmZ1bmN0aW9uIGNhY2hlZChmbikgewogIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgcmV0dXJuIGZ1bmN0aW9uIGNhY2hlZEZuKHN0cikgewogICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07CiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSk7CiAgfTsKfQovKioKICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy4KICovCgoKdmFyIGNhbWVsaXplUkUgPSAvLShcdykvZzsKdmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHsKICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsKICAgIHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7CiAgfSk7Cn0pOwovKioKICogQ2FwaXRhbGl6ZSBhIHN0cmluZy4KICovCgp2YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7CiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTsKfSk7Ci8qKgogKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLgogKi8KCnZhciBoeXBoZW5hdGVSRSA9IC9cQihbQS1aXSkvZzsKdmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7CiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKTsKfSk7Ci8qKgogKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQsCiAqIGUuZy4sIFBoYW50b21KUyAxLnguIFRlY2huaWNhbGx5LCB3ZSBkb24ndCBuZWVkIHRoaXMgYW55bW9yZQogKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy4KICogQnV0IHJlbW92aW5nIGl0IHdvdWxkIG1lYW4gYnJlYWtpbmcgY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpbgogKiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4KICovCgovKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKZnVuY3Rpb24gcG9seWZpbGxCaW5kKGZuLCBjdHgpIHsKICBmdW5jdGlvbiBib3VuZEZuKGEpIHsKICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDsKICAgIHJldHVybiBsID8gbCA+IDEgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cykgOiBmbi5jYWxsKGN0eCwgYSkgOiBmbi5jYWxsKGN0eCk7CiAgfQoKICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7CiAgcmV0dXJuIGJvdW5kRm47Cn0KCmZ1bmN0aW9uIG5hdGl2ZUJpbmQoZm4sIGN0eCkgewogIHJldHVybiBmbi5iaW5kKGN0eCk7Cn0KCnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPyBuYXRpdmVCaW5kIDogcG9seWZpbGxCaW5kOwovKioKICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuCiAqLwoKZnVuY3Rpb24gdG9BcnJheShsaXN0LCBzdGFydCkgewogIHN0YXJ0ID0gc3RhcnQgfHwgMDsKICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7CiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTsKCiAgd2hpbGUgKGktLSkgewogICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdOwogIH0KCiAgcmV0dXJuIHJldDsKfQovKioKICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LgogKi8KCgpmdW5jdGlvbiBleHRlbmQodG8sIF9mcm9tKSB7CiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7CiAgICB0b1trZXldID0gX2Zyb21ba2V5XTsKICB9CgogIHJldHVybiB0bzsKfQovKioKICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC4KICovCgoKZnVuY3Rpb24gdG9PYmplY3QoYXJyKSB7CiAgdmFyIHJlcyA9IHt9OwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykgewogICAgaWYgKGFycltpXSkgewogICAgICBleHRlbmQocmVzLCBhcnJbaV0pOwogICAgfQogIH0KCiAgcmV0dXJuIHJlczsKfQovKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqLwoKLyoqCiAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLgogKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGUKICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLgogKi8KCgpmdW5jdGlvbiBub29wKGEsIGIsIGMpIHt9Ci8qKgogKiBBbHdheXMgcmV0dXJuIGZhbHNlLgogKi8KCgp2YXIgbm8gPSBmdW5jdGlvbiBubyhhLCBiLCBjKSB7CiAgcmV0dXJuIGZhbHNlOwp9OwovKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovCgovKioKICogUmV0dXJuIHRoZSBzYW1lIHZhbHVlLgogKi8KCgp2YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiBpZGVudGl0eShfKSB7CiAgcmV0dXJuIF87Cn07Ci8qKgogKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcywKICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlPwogKi8KCgpmdW5jdGlvbiBsb29zZUVxdWFsKGEsIGIpIHsKICBpZiAoYSA9PT0gYikgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7CiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpOwoKICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0QikgewogICAgdHJ5IHsKICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTsKICAgICAgdmFyIGlzQXJyYXlCID0gQXJyYXkuaXNBcnJheShiKTsKCiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5QikgewogICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkgewogICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpIHsKICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpOwogICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHsKICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTsKICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTsKICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0QikgewogICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQp9Ci8qKgogKiBSZXR1cm4gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgbG9vc2VseSBlcXVhbCB2YWx1ZSBjYW4gYmUKICogZm91bmQgaW4gdGhlIGFycmF5IChpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgdGhlIGFycmF5IG11c3QKICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC4KICovCgoKZnVuY3Rpb24gbG9vc2VJbmRleE9mKGFyciwgdmFsKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgewogICAgICByZXR1cm4gaTsKICAgIH0KICB9CgogIHJldHVybiAtMTsKfQovKioKICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS4KICovCgoKZnVuY3Rpb24gb25jZShmbikgewogIHZhciBjYWxsZWQgPSBmYWxzZTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgaWYgKCFjYWxsZWQpIHsKICAgICAgY2FsbGVkID0gdHJ1ZTsKICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KICB9Owp9Cgp2YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnOwp2YXIgQVNTRVRfVFlQRVMgPSBbJ2NvbXBvbmVudCcsICdkaXJlY3RpdmUnLCAnZmlsdGVyJ107CnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbJ2JlZm9yZUNyZWF0ZScsICdjcmVhdGVkJywgJ2JlZm9yZU1vdW50JywgJ21vdW50ZWQnLCAnYmVmb3JlVXBkYXRlJywgJ3VwZGF0ZWQnLCAnYmVmb3JlRGVzdHJveScsICdkZXN0cm95ZWQnLCAnYWN0aXZhdGVkJywgJ2RlYWN0aXZhdGVkJywgJ2Vycm9yQ2FwdHVyZWQnLCAnc2VydmVyUHJlZmV0Y2gnXTsKLyogICovCgp2YXIgY29uZmlnID0gewogIC8qKgogICAqIE9wdGlvbiBtZXJnZSBzdHJhdGVnaWVzICh1c2VkIGluIGNvcmUvdXRpbC9vcHRpb25zKQogICAqLwogIC8vICRmbG93LWRpc2FibGUtbGluZQogIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSwKCiAgLyoqCiAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy4KICAgKi8KICBzaWxlbnQ6IGZhbHNlLAoKICAvKioKICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290PwogICAqLwogIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsCgogIC8qKgogICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzCiAgICovCiAgZGV2dG9vbHM6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsCgogIC8qKgogICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmYKICAgKi8KICBwZXJmb3JtYW5jZTogZmFsc2UsCgogIC8qKgogICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzCiAgICovCiAgZXJyb3JIYW5kbGVyOiBudWxsLAoKICAvKioKICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnMKICAgKi8KICB3YXJuSGFuZGxlcjogbnVsbCwKCiAgLyoqCiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzCiAgICovCiAgaWdub3JlZEVsZW1lbnRzOiBbXSwKCiAgLyoqCiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb24KICAgKi8KICAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSwKCiAgLyoqCiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhCiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLgogICAqLwogIGlzUmVzZXJ2ZWRUYWc6IG5vLAoKICAvKioKICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudAogICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uCiAgICovCiAgaXNSZXNlcnZlZEF0dHI6IG5vLAoKICAvKioKICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuCiAgICogUGxhdGZvcm0tZGVwZW5kZW50LgogICAqLwogIGlzVW5rbm93bkVsZW1lbnQ6IG5vLAoKICAvKioKICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50CiAgICovCiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLAoKICAvKioKICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLgogICAqLwogIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSwKCiAgLyoqCiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWUKICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuCiAgICovCiAgbXVzdFVzZVByb3A6IG5vLAoKICAvKioKICAgKiBQZXJmb3JtIHVwZGF0ZXMgYXN5bmNocm9ub3VzbHkuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgVnVlIFRlc3QgVXRpbHMKICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLgogICAqLwogIGFzeW5jOiB0cnVlLAoKICAvKioKICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29ucwogICAqLwogIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTCn07Ci8qICAqLwoKLyoqCiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy4KICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWUKICogc2tpcHBpbmcgXHUxMDAwMC1cdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlMKICovCgp2YXIgdW5pY29kZVJlZ0V4cCA9IC9hLXpBLVpcdTAwQjdcdTAwQzAtXHUwMEQ2XHUwMEQ4LVx1MDBGNlx1MDBGOC1cdTAzN0RcdTAzN0YtXHUxRkZGXHUyMDBDLVx1MjAwRFx1MjAzRi1cdTIwNDBcdTIwNzAtXHUyMThGXHUyQzAwLVx1MkZFRlx1MzAwMS1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZGRC87Ci8qKgogKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF8KICovCgpmdW5jdGlvbiBpc1Jlc2VydmVkKHN0cikgewogIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApOwogIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUY7Cn0KLyoqCiAqIERlZmluZSBhIHByb3BlcnR5LgogKi8KCgpmdW5jdGlvbiBkZWYob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgdmFsdWU6IHZhbCwKICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSwKICAgIHdyaXRhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSk7Cn0KLyoqCiAqIFBhcnNlIHNpbXBsZSBwYXRoLgogKi8KCgp2YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgiW14iICsgdW5pY29kZVJlZ0V4cC5zb3VyY2UgKyAiLiRfXFxkXSIpOwoKZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHsKICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHsKICAgIHJldHVybjsKICB9CgogIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTsKICByZXR1cm4gZnVuY3Rpb24gKG9iaikgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykgewogICAgICBpZiAoIW9iaikgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTsKICAgIH0KCiAgICByZXR1cm4gb2JqOwogIH07Cn0KLyogICovCi8vIGNhbiB3ZSB1c2UgX19wcm90b19fPwoKCnZhciBoYXNQcm90byA9ICgnX19wcm90b19fJyBpbiB7fSk7IC8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmcKCnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJzsKdmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07CnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpOwp2YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTsKdmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTsKdmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7CnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDsKdmFyIGlzQW5kcm9pZCA9IFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDAgfHwgd2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCc7CnZhciBpc0lPUyA9IFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkgfHwgd2VleFBsYXRmb3JtID09PSAnaW9zJzsKdmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVwvXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlOwp2YXIgaXNQaGFudG9tSlMgPSBVQSAmJiAvcGhhbnRvbWpzLy50ZXN0KFVBKTsKdmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFwvKFxkKykvKTsgLy8gRmlyZWZveCBoYXMgYSAid2F0Y2giIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi4KCnZhciBuYXRpdmVXYXRjaCA9IHt9LndhdGNoOwp2YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7CgppZiAoaW5Ccm93c2VyKSB7CiAgdHJ5IHsKICAgIHZhciBvcHRzID0ge307CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCB7CiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTsKICAgICAgfQogICAgfSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODUKCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7CiAgfSBjYXRjaCAoZSkge30KfSAvLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmUKLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlYKCgp2YXIgX2lzU2VydmVyOwoKdmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gaXNTZXJ2ZXJSZW5kZXJpbmcoKSB7CiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkCiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3MKICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInOwogICAgfSBlbHNlIHsKICAgICAgX2lzU2VydmVyID0gZmFsc2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2lzU2VydmVyOwp9OyAvLyBkZXRlY3QgZGV2dG9vbHMKCgp2YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187Ci8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgpmdW5jdGlvbiBpc05hdGl2ZShDdG9yKSB7CiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpOwp9Cgp2YXIgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJiB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTsKCnZhciBfU2V0OwovKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KLy8gJGZsb3ctZGlzYWJsZS1saW5lCgoKaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHsKICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS4KICBfU2V0ID0gU2V0Owp9IGVsc2UgewogIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy4KICBfU2V0ID0gLypAX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIFNldCgpIHsKICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgfQoKICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzKGtleSkgewogICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZTsKICAgIH07CgogICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5KSB7CiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlOwogICAgfTsKCiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7CiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIH07CgogICAgcmV0dXJuIFNldDsKICB9KCk7Cn0KLyogICovCgoKdmFyIHdhcm4gPSBub29wOwp2YXIgdGlwID0gbm9vcDsKdmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBub29wOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrCgp2YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IG5vb3A7CgppZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnOwogIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXHcpL2c7CgogIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIGNsYXNzaWZ5KHN0cikgewogICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7CiAgICAgIHJldHVybiBjLnRvVXBwZXJDYXNlKCk7CiAgICB9KS5yZXBsYWNlKC9bLV9dL2csICcnKTsKICB9OwoKICB3YXJuID0gZnVuY3Rpb24gd2Fybihtc2csIHZtKSB7CiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7CgogICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikgewogICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7CiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgIWNvbmZpZy5zaWxlbnQpIHsKICAgICAgY29uc29sZS5lcnJvcigiW1Z1ZSB3YXJuXTogIiArIG1zZyArIHRyYWNlKTsKICAgIH0KICB9OwoKICB0aXAgPSBmdW5jdGlvbiB0aXAobXNnLCB2bSkgewogICAgaWYgKGhhc0NvbnNvbGUgJiYgIWNvbmZpZy5zaWxlbnQpIHsKICAgICAgY29uc29sZS53YXJuKCJbVnVlIHRpcF06ICIgKyBtc2cgKyAodm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnKSk7CiAgICB9CiAgfTsKCiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uIGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGluY2x1ZGVGaWxlKSB7CiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7CiAgICAgIHJldHVybiAnPFJvb3Q+JzsKICAgIH0KCiAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiB2bSA9PT0gJ2Z1bmN0aW9uJyAmJiB2bS5jaWQgIT0gbnVsbCA/IHZtLm9wdGlvbnMgOiB2bS5faXNWdWUgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zIDogdm07CiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSB8fCBvcHRpb25zLl9jb21wb25lbnRUYWc7CiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlOwoKICAgIGlmICghbmFtZSAmJiBmaWxlKSB7CiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXF0rKVwudnVlJC8pOwogICAgICBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07CiAgICB9CgogICAgcmV0dXJuIChuYW1lID8gIjwiICsgY2xhc3NpZnkobmFtZSkgKyAiPiIgOiAiPEFub255bW91cz4iKSArIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/ICIgYXQgIiArIGZpbGUgOiAnJyk7CiAgfTsKCiAgdmFyIHJlcGVhdCA9IGZ1bmN0aW9uIHJlcGVhdChzdHIsIG4pIHsKICAgIHZhciByZXMgPSAnJzsKCiAgICB3aGlsZSAobikgewogICAgICBpZiAobiAlIDIgPT09IDEpIHsKICAgICAgICByZXMgKz0gc3RyOwogICAgICB9CgogICAgICBpZiAobiA+IDEpIHsKICAgICAgICBzdHIgKz0gc3RyOwogICAgICB9CgogICAgICBuID4+PSAxOwogICAgfQoKICAgIHJldHVybiByZXM7CiAgfTsKCiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uIGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIHsKICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkgewogICAgICB2YXIgdHJlZSA9IFtdOwogICAgICB2YXIgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDsKCiAgICAgIHdoaWxlICh2bSkgewogICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHsKICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdOwoKICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3RvcikgewogICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKzsKICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50OwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkgewogICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTsKICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRyZWUucHVzaCh2bSk7CiAgICAgICAgdm0gPSB2bS4kcGFyZW50OwogICAgICB9CgogICAgICByZXR1cm4gJ1xuXG5mb3VuZCBpblxuXG4nICsgdHJlZS5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7CiAgICAgICAgcmV0dXJuICIiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSkgPyBmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSArICIuLi4gKCIgKyB2bVsxXSArICIgcmVjdXJzaXZlIGNhbGxzKSIgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSk7CiAgICAgIH0pLmpvaW4oJ1xuJyk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gIlxuXG4oZm91bmQgaW4gIiArIGZvcm1hdENvbXBvbmVudE5hbWUodm0pICsgIikiOwogICAgfQogIH07Cn0KLyogICovCgoKdmFyIHVpZCA9IDA7Ci8qKgogKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGUKICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC4KICovCgp2YXIgRGVwID0gZnVuY3Rpb24gRGVwKCkgewogIHRoaXMuaWQgPSB1aWQrKzsKICB0aGlzLnN1YnMgPSBbXTsKfTsKCkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViKHN1YikgewogIHRoaXMuc3Vicy5wdXNoKHN1Yik7Cn07CgpEZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YihzdWIpIHsKICByZW1vdmUodGhpcy5zdWJzLCBzdWIpOwp9OwoKRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQoKSB7CiAgaWYgKERlcC50YXJnZXQpIHsKICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpOwogIH0KfTsKCkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KCkgewogIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0CiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTsKCiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykgewogICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luYwogICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdAogICAgLy8gb3JkZXIKICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICByZXR1cm4gYS5pZCAtIGIuaWQ7CiAgICB9KTsKICB9CgogIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgIHN1YnNbaV0udXBkYXRlKCk7CiAgfQp9OyAvLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuCi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlcgovLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS4KCgpEZXAudGFyZ2V0ID0gbnVsbDsKdmFyIHRhcmdldFN0YWNrID0gW107CgpmdW5jdGlvbiBwdXNoVGFyZ2V0KHRhcmdldCkgewogIHRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTsKICBEZXAudGFyZ2V0ID0gdGFyZ2V0Owp9CgpmdW5jdGlvbiBwb3BUYXJnZXQoKSB7CiAgdGFyZ2V0U3RhY2sucG9wKCk7CiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdOwp9Ci8qICAqLwoKCnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlKHRhZywgZGF0YSwgY2hpbGRyZW4sIHRleHQsIGVsbSwgY29udGV4dCwgY29tcG9uZW50T3B0aW9ucywgYXN5bmNGYWN0b3J5KSB7CiAgdGhpcy50YWcgPSB0YWc7CiAgdGhpcy5kYXRhID0gZGF0YTsKICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47CiAgdGhpcy50ZXh0ID0gdGV4dDsKICB0aGlzLmVsbSA9IGVsbTsKICB0aGlzLm5zID0gdW5kZWZpbmVkOwogIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7CiAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7CiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7CiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7CiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5OwogIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7CiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDsKICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDsKICB0aGlzLnJhdyA9IGZhbHNlOwogIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTsKICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7CiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTsKICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7CiAgdGhpcy5pc09uY2UgPSBmYWxzZTsKICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTsKICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDsKICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlOwp9OwoKdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsKICBjaGlsZDogewogICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfQp9OyAvLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuCgovKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKcHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZTsKfTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzKTsKCnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gY3JlYXRlRW1wdHlWTm9kZSh0ZXh0KSB7CiAgaWYgKHRleHQgPT09IHZvaWQgMCkgdGV4dCA9ICcnOwogIHZhciBub2RlID0gbmV3IFZOb2RlKCk7CiAgbm9kZS50ZXh0ID0gdGV4dDsKICBub2RlLmlzQ29tbWVudCA9IHRydWU7CiAgcmV0dXJuIG5vZGU7Cn07CgpmdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUodmFsKSB7CiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSk7Cn0gLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmUKLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zcwovLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHkKLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS4KCgpmdW5jdGlvbiBjbG9uZVZOb2RlKHZub2RlKSB7CiAgdmFyIGNsb25lZCA9IG5ldyBWTm9kZSh2bm9kZS50YWcsIHZub2RlLmRhdGEsIC8vICM3OTc1CiAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nCiAgLy8gYSBjaGlsZC4KICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLCB2bm9kZS50ZXh0LCB2bm9kZS5lbG0sIHZub2RlLmNvbnRleHQsIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsIHZub2RlLmFzeW5jRmFjdG9yeSk7CiAgY2xvbmVkLm5zID0gdm5vZGUubnM7CiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7CiAgY2xvbmVkLmtleSA9IHZub2RlLmtleTsKICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50OwogIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7CiAgY2xvbmVkLmZuT3B0aW9ucyA9IHZub2RlLmZuT3B0aW9uczsKICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkOwogIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7CiAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTsKICByZXR1cm4gY2xvbmVkOwp9Ci8qCiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aAogKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGUKICovCgoKdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7CnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pOwp2YXIgbWV0aG9kc1RvUGF0Y2ggPSBbJ3B1c2gnLCAncG9wJywgJ3NoaWZ0JywgJ3Vuc2hpZnQnLCAnc3BsaWNlJywgJ3NvcnQnLCAncmV2ZXJzZSddOwovKioKICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzCiAqLwoKbWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7CiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kCiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdOwogIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvcigpIHsKICAgIHZhciBhcmdzID0gW10sCiAgICAgICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKCiAgICB3aGlsZSAobGVuLS0pIHsKICAgICAgYXJnc1tsZW5dID0gYXJndW1lbnRzW2xlbl07CiAgICB9CgogICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpOwogICAgdmFyIG9iID0gdGhpcy5fX29iX187CiAgICB2YXIgaW5zZXJ0ZWQ7CgogICAgc3dpdGNoIChtZXRob2QpIHsKICAgICAgY2FzZSAncHVzaCc6CiAgICAgIGNhc2UgJ3Vuc2hpZnQnOgogICAgICAgIGluc2VydGVkID0gYXJnczsKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgJ3NwbGljZSc6CiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpOwogICAgICAgIGJyZWFrOwogICAgfQoKICAgIGlmIChpbnNlcnRlZCkgewogICAgICBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOwogICAgfSAvLyBub3RpZnkgY2hhbmdlCgoKICAgIG9iLmRlcC5ub3RpZnkoKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfSk7Cn0pOwovKiAgKi8KCnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpOwovKioKICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzCiAqIHVwZGF0ZSBjb21wdXRhdGlvbi4KICovCgp2YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7CgpmdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcodmFsdWUpIHsKICBzaG91bGRPYnNlcnZlID0gdmFsdWU7Cn0KLyoqCiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZAogKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0CiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0CiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLgogKi8KCgp2YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlcih2YWx1ZSkgewogIHRoaXMudmFsdWUgPSB2YWx1ZTsKICB0aGlzLmRlcCA9IG5ldyBEZXAoKTsKICB0aGlzLnZtQ291bnQgPSAwOwogIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpOwoKICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgIGlmIChoYXNQcm90bykgewogICAgICBwcm90b0F1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcyk7CiAgICB9IGVsc2UgewogICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpOwogICAgfQoKICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTsKICB9IGVsc2UgewogICAgdGhpcy53YWxrKHZhbHVlKTsKICB9Cn07Ci8qKgogKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvCiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlbgogKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC4KICovCgoKT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrKG9iaikgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7CiAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pOwogIH0KfTsKLyoqCiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLgogKi8KCgpPYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5KGl0ZW1zKSB7CiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgIG9ic2VydmUoaXRlbXNbaV0pOwogIH0KfTsgLy8gaGVscGVycwoKLyoqCiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZwogKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fXwogKi8KCgpmdW5jdGlvbiBwcm90b0F1Z21lbnQodGFyZ2V0LCBzcmMpIHsKICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqLwogIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7CiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqLwp9Ci8qKgogKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZwogKiBoaWRkZW4gcHJvcGVydGllcy4KICovCgovKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKCmZ1bmN0aW9uIGNvcHlBdWdtZW50KHRhcmdldCwgc3JjLCBrZXlzKSB7CiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgdmFyIGtleSA9IGtleXNbaV07CiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTsKICB9Cn0KLyoqCiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLAogKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLAogKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS4KICovCgoKZnVuY3Rpb24gb2JzZXJ2ZSh2YWx1ZSwgYXNSb290RGF0YSkgewogIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHsKICAgIHJldHVybjsKICB9CgogIHZhciBvYjsKCiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7CiAgICBvYiA9IHZhbHVlLl9fb2JfXzsKICB9IGVsc2UgaWYgKHNob3VsZE9ic2VydmUgJiYgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiYgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJiAhdmFsdWUuX2lzVnVlKSB7CiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7CiAgfQoKICBpZiAoYXNSb290RGF0YSAmJiBvYikgewogICAgb2Iudm1Db3VudCsrOwogIH0KCiAgcmV0dXJuIG9iOwp9Ci8qKgogKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuCiAqLwoKCmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5LCB2YWwsIGN1c3RvbVNldHRlciwgc2hhbGxvdykgewogIHZhciBkZXAgPSBuZXcgRGVwKCk7CiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7CgogIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7CiAgICByZXR1cm47CiAgfSAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnMKCgogIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7CiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDsKCiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgewogICAgdmFsID0gb2JqW2tleV07CiAgfQoKICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyKCkgewogICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsOwoKICAgICAgaWYgKERlcC50YXJnZXQpIHsKICAgICAgICBkZXAuZGVwZW5kKCk7CgogICAgICAgIGlmIChjaGlsZE9iKSB7CiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTsKCiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIobmV3VmFsKSB7CiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7CiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqLwoKICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgbmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovCgoKICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7CiAgICAgICAgY3VzdG9tU2V0dGVyKCk7CiAgICAgIH0gLy8gIzc5ODE6IGZvciBhY2Nlc3NvciBwcm9wZXJ0aWVzIHdpdGhvdXQgc2V0dGVyCgoKICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoc2V0dGVyKSB7CiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhbCA9IG5ld1ZhbDsKICAgICAgfQoKICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTsKICAgICAgZGVwLm5vdGlmeSgpOwogICAgfQogIH0pOwp9Ci8qKgogKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmQKICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndAogKiBhbHJlYWR5IGV4aXN0LgogKi8KCgpmdW5jdGlvbiBzZXQodGFyZ2V0LCBrZXksIHZhbCkgewogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSkpIHsKICAgIHdhcm4oIkNhbm5vdCBzZXQgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6ICIgKyB0YXJnZXQpOwogIH0KCiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7CiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTsKICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpOwogICAgcmV0dXJuIHZhbDsKICB9CgogIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7CiAgICB0YXJnZXRba2V5XSA9IHZhbDsKICAgIHJldHVybiB2YWw7CiAgfQoKICB2YXIgb2IgPSB0YXJnZXQuX19vYl9fOwoKICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCBvYiAmJiBvYi52bUNvdW50KSB7CiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgKyAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJyk7CiAgICByZXR1cm4gdmFsOwogIH0KCiAgaWYgKCFvYikgewogICAgdGFyZ2V0W2tleV0gPSB2YWw7CiAgICByZXR1cm4gdmFsOwogIH0KCiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTsKICBvYi5kZXAubm90aWZ5KCk7CiAgcmV0dXJuIHZhbDsKfQovKioKICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS4KICovCgoKZnVuY3Rpb24gZGVsKHRhcmdldCwga2V5KSB7CiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKSkgewogICAgd2FybigiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogIiArIHRhcmdldCk7CiAgfQoKICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHsKICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTsKICAgIHJldHVybjsKICB9CgogIHZhciBvYiA9IHRhcmdldC5fX29iX187CgogIGlmICh0YXJnZXQuX2lzVnVlIHx8IG9iICYmIG9iLnZtQ291bnQpIHsKICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybignQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICsgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nKTsKICAgIHJldHVybjsKICB9CgogIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkgewogICAgcmV0dXJuOwogIH0KCiAgZGVsZXRlIHRhcmdldFtrZXldOwoKICBpZiAoIW9iKSB7CiAgICByZXR1cm47CiAgfQoKICBvYi5kZXAubm90aWZ5KCk7Cn0KLyoqCiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlCiAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLgogKi8KCgpmdW5jdGlvbiBkZXBlbmRBcnJheSh2YWx1ZSkgewogIGZvciAodmFyIGUgPSB2b2lkIDAsIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICBlID0gdmFsdWVbaV07CiAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTsKCiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkgewogICAgICBkZXBlbmRBcnJheShlKTsKICAgIH0KICB9Cn0KLyogICovCgovKioKICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZQogKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvbgogKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS4KICovCgoKdmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7Ci8qKgogKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zCiAqLwoKaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHsKICAgIGlmICghdm0pIHsKICAgICAgd2Fybigib3B0aW9uIFwiIiArIGtleSArICJcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSAiICsgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJyk7CiAgICB9CgogICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKTsKICB9Owp9Ci8qKgogKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci4KICovCgoKZnVuY3Rpb24gbWVyZ2VEYXRhKHRvLCBmcm9tKSB7CiAgaWYgKCFmcm9tKSB7CiAgICByZXR1cm4gdG87CiAgfQoKICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDsKICB2YXIga2V5cyA9IGhhc1N5bWJvbCA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKSA6IE9iamVjdC5rZXlzKGZyb20pOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsKICAgIGtleSA9IGtleXNbaV07IC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uCgogICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgdG9WYWwgPSB0b1trZXldOwogICAgZnJvbVZhbCA9IGZyb21ba2V5XTsKCiAgICBpZiAoIWhhc093bih0bywga2V5KSkgewogICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7CiAgICB9IGVsc2UgaWYgKHRvVmFsICE9PSBmcm9tVmFsICYmIGlzUGxhaW5PYmplY3QodG9WYWwpICYmIGlzUGxhaW5PYmplY3QoZnJvbVZhbCkpIHsKICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTsKICAgIH0KICB9CgogIHJldHVybiB0bzsKfQovKioKICogRGF0YQogKi8KCgpmdW5jdGlvbiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKSB7CiAgaWYgKCF2bSkgewogICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnMKICAgIGlmICghY2hpbGRWYWwpIHsKICAgICAgcmV0dXJuIHBhcmVudFZhbDsKICAgIH0KCiAgICBpZiAoIXBhcmVudFZhbCkgewogICAgICByZXR1cm4gY2hpbGRWYWw7CiAgICB9IC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCwKICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZQogICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvCiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2UKICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLgoKCiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuKCkgewogICAgICByZXR1cm4gbWVyZ2VEYXRhKHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCwgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbigpIHsKICAgICAgLy8gaW5zdGFuY2UgbWVyZ2UKICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKSA6IGNoaWxkVmFsOwogICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKSA6IHBhcmVudFZhbDsKCiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHsKICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBkZWZhdWx0RGF0YTsKICAgICAgfQogICAgfTsKICB9Cn0KCnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKSB7CiAgaWYgKCF2bSkgewogICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykgewogICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ1RoZSAiZGF0YSIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgKyAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICsgJ2RlZmluaXRpb25zLicsIHZtKTsKICAgICAgcmV0dXJuIHBhcmVudFZhbDsKICAgIH0KCiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKTsKICB9CgogIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKTsKfTsKLyoqCiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy4KICovCgoKZnVuY3Rpb24gbWVyZ2VIb29rKHBhcmVudFZhbCwgY2hpbGRWYWwpIHsKICB2YXIgcmVzID0gY2hpbGRWYWwgPyBwYXJlbnRWYWwgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKSA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpID8gY2hpbGRWYWwgOiBbY2hpbGRWYWxdIDogcGFyZW50VmFsOwogIHJldHVybiByZXMgPyBkZWR1cGVIb29rcyhyZXMpIDogcmVzOwp9CgpmdW5jdGlvbiBkZWR1cGVIb29rcyhob29rcykgewogIHZhciByZXMgPSBbXTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykgewogICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHsKICAgICAgcmVzLnB1c2goaG9va3NbaV0pOwogICAgfQogIH0KCiAgcmV0dXJuIHJlczsKfQoKTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHsKICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7Cn0pOwovKioKICogQXNzZXRzCiAqCiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG8KICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZQogKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy4KICovCgpmdW5jdGlvbiBtZXJnZUFzc2V0cyhwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSwga2V5KSB7CiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpOwoKICBpZiAoY2hpbGRWYWwpIHsKICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7CiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gcmVzOwogIH0KfQoKQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkgewogIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzOwp9KTsKLyoqCiAqIFdhdGNoZXJzLgogKgogKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lCiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLgogKi8KCnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSwga2V5KSB7CiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi4KICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgewogICAgcGFyZW50VmFsID0gdW5kZWZpbmVkOwogIH0KCiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgewogICAgY2hpbGRWYWwgPSB1bmRlZmluZWQ7CiAgfQogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKCiAgaWYgKCFjaGlsZFZhbCkgewogICAgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpOwogIH0KCiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pOwogIH0KCiAgaWYgKCFwYXJlbnRWYWwpIHsKICAgIHJldHVybiBjaGlsZFZhbDsKICB9CgogIHZhciByZXQgPSB7fTsKICBleHRlbmQocmV0LCBwYXJlbnRWYWwpOwoKICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkgewogICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07CiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07CgogICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7CiAgICAgIHBhcmVudCA9IFtwYXJlbnRdOwogICAgfQoKICAgIHJldFtrZXkkMV0gPSBwYXJlbnQgPyBwYXJlbnQuY29uY2F0KGNoaWxkKSA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdOwogIH0KCiAgcmV0dXJuIHJldDsKfTsKLyoqCiAqIE90aGVyIG9iamVjdCBoYXNoZXMuCiAqLwoKCnN0cmF0cy5wcm9wcyA9IHN0cmF0cy5tZXRob2RzID0gc3RyYXRzLmluamVjdCA9IHN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSwga2V5KSB7CiAgaWYgKGNoaWxkVmFsICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pOwogIH0KCiAgaWYgKCFwYXJlbnRWYWwpIHsKICAgIHJldHVybiBjaGlsZFZhbDsKICB9CgogIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7CgogIGlmIChjaGlsZFZhbCkgewogICAgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOwogIH0KCiAgcmV0dXJuIHJldDsKfTsKCnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjsKLyoqCiAqIERlZmF1bHQgc3RyYXRlZ3kuCiAqLwoKdmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIGRlZmF1bHRTdHJhdChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7CiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWQgPyBwYXJlbnRWYWwgOiBjaGlsZFZhbDsKfTsKLyoqCiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lcwogKi8KCgpmdW5jdGlvbiBjaGVja0NvbXBvbmVudHMob3B0aW9ucykgewogIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHsKICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpOwogIH0KfQoKZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpIHsKICBpZiAoIW5ldyBSZWdFeHAoIl5bYS16QS1aXVtcXC1cXC4wLTlfIiArIHVuaWNvZGVSZWdFeHAuc291cmNlICsgIl0qJCIpLnRlc3QobmFtZSkpIHsKICAgIHdhcm4oJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6ICInICsgbmFtZSArICciLiBDb21wb25lbnQgbmFtZXMgJyArICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJyk7CiAgfQoKICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7CiAgICB3YXJuKCdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgKyAnaWQ6ICcgKyBuYW1lKTsKICB9Cn0KLyoqCiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZQogKiBPYmplY3QtYmFzZWQgZm9ybWF0LgogKi8KCgpmdW5jdGlvbiBub3JtYWxpemVQcm9wcyhvcHRpb25zLCB2bSkgewogIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7CgogIGlmICghcHJvcHMpIHsKICAgIHJldHVybjsKICB9CgogIHZhciByZXMgPSB7fTsKICB2YXIgaSwgdmFsLCBuYW1lOwoKICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHsKICAgIGkgPSBwcm9wcy5sZW5ndGg7CgogICAgd2hpbGUgKGktLSkgewogICAgICB2YWwgPSBwcm9wc1tpXTsKCiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykgewogICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpOwogICAgICAgIHJlc1tuYW1lXSA9IHsKICAgICAgICAgIHR5cGU6IG51bGwKICAgICAgICB9OwogICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7CiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHsKICAgICAgdmFsID0gcHJvcHNba2V5XTsKICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7CiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKSA/IHZhbCA6IHsKICAgICAgICB0eXBlOiB2YWwKICAgICAgfTsKICAgIH0KICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgIHdhcm4oIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcInByb3BzXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgIiArICJidXQgZ290ICIgKyB0b1Jhd1R5cGUocHJvcHMpICsgIi4iLCB2bSk7CiAgfQoKICBvcHRpb25zLnByb3BzID0gcmVzOwp9Ci8qKgogKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0CiAqLwoKCmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdChvcHRpb25zLCB2bSkgewogIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDsKCiAgaWYgKCFpbmplY3QpIHsKICAgIHJldHVybjsKICB9CgogIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTsKCiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHsKICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0gewogICAgICAgIGZyb206IGluamVjdFtpXQogICAgICB9OwogICAgfQogIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7CiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7CiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTsKICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpID8gZXh0ZW5kKHsKICAgICAgICBmcm9tOiBrZXkKICAgICAgfSwgdmFsKSA6IHsKICAgICAgICBmcm9tOiB2YWwKICAgICAgfTsKICAgIH0KICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgIHdhcm4oIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcImluamVjdFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsICIgKyAiYnV0IGdvdCAiICsgdG9SYXdUeXBlKGluamVjdCkgKyAiLiIsIHZtKTsKICB9Cn0KLyoqCiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuCiAqLwoKCmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMob3B0aW9ucykgewogIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzOwoKICBpZiAoZGlycykgewogICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHsKICAgICAgdmFyIGRlZiQkMSA9IGRpcnNba2V5XTsKCiAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgZGlyc1trZXldID0gewogICAgICAgICAgYmluZDogZGVmJCQxLAogICAgICAgICAgdXBkYXRlOiBkZWYkJDEKICAgICAgICB9OwogICAgICB9CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlKG5hbWUsIHZhbHVlLCB2bSkgewogIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHsKICAgIHdhcm4oIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcIiIgKyBuYW1lICsgIlwiOiBleHBlY3RlZCBhbiBPYmplY3QsICIgKyAiYnV0IGdvdCAiICsgdG9SYXdUeXBlKHZhbHVlKSArICIuIiwgdm0pOwogIH0KfQovKioKICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLgogKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLgogKi8KCgpmdW5jdGlvbiBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZCwgdm0pIHsKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTsKICB9CgogIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHsKICAgIGNoaWxkID0gY2hpbGQub3B0aW9uczsKICB9CgogIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7CiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7CiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7IC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucywKICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0CiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLgogIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS4KCiAgaWYgKCFjaGlsZC5fYmFzZSkgewogICAgaWYgKGNoaWxkWyJleHRlbmRzIl0pIHsKICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGRbImV4dGVuZHMiXSwgdm0pOwogICAgfQoKICAgIGlmIChjaGlsZC5taXhpbnMpIHsKICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7CiAgICAgIH0KICAgIH0KICB9CgogIHZhciBvcHRpb25zID0ge307CiAgdmFyIGtleTsKCiAgZm9yIChrZXkgaW4gcGFyZW50KSB7CiAgICBtZXJnZUZpZWxkKGtleSk7CiAgfQoKICBmb3IgKGtleSBpbiBjaGlsZCkgewogICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7CiAgICAgIG1lcmdlRmllbGQoa2V5KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIG1lcmdlRmllbGQoa2V5KSB7CiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7CiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7CiAgfQoKICByZXR1cm4gb3B0aW9uczsKfQovKioKICogUmVzb2x2ZSBhbiBhc3NldC4KICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzCiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi4KICovCgoKZnVuY3Rpb24gcmVzb2x2ZUFzc2V0KG9wdGlvbnMsIHR5cGUsIGlkLCB3YXJuTWlzc2luZykgewogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7CiAgICByZXR1cm47CiAgfQoKICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTsgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3QKCiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgewogICAgcmV0dXJuIGFzc2V0c1tpZF07CiAgfQoKICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7CgogIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsKICAgIHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdOwogIH0KCiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpOwoKICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgewogICAgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdOwogIH0gLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluCgoKICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdOwoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7CiAgICB3YXJuKCdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsIG9wdGlvbnMpOwogIH0KCiAgcmV0dXJuIHJlczsKfQovKiAgKi8KCgpmdW5jdGlvbiB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSkgewogIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTsKICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7CiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07IC8vIGJvb2xlYW4gY2FzdGluZwoKICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7CgogIGlmIChib29sZWFuSW5kZXggPiAtMSkgewogICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHsKICAgICAgdmFsdWUgPSBmYWxzZTsKICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkgewogICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWYKICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5CiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7CgogICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7CiAgICAgICAgdmFsdWUgPSB0cnVlOwogICAgICB9CiAgICB9CiAgfSAvLyBjaGVjayBkZWZhdWx0IHZhbHVlCgoKICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpOyAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksCiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC4KCiAgICB2YXIgcHJldlNob3VsZE9ic2VydmUgPSBzaG91bGRPYnNlcnZlOwogICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpOwogICAgb2JzZXJ2ZSh2YWx1ZSk7CiAgICB0b2dnbGVPYnNlcnZpbmcocHJldlNob3VsZE9ic2VydmUpOwogIH0KCiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgLy8gc2tpcCB2YWxpZGF0aW9uIGZvciB3ZWV4IHJlY3ljbGUtbGlzdCBjaGlsZCBjb21wb25lbnQgcHJvcHMKICAhZmFsc2UpIHsKICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7CiAgfQoKICByZXR1cm4gdmFsdWU7Cn0KLyoqCiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuCiAqLwoKCmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSkgewogIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWQKICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7CiAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KCiAgdmFyIGRlZiA9IHByb3BbImRlZmF1bHQiXTsgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheQoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7CiAgICB3YXJuKCdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgIicgKyBrZXkgKyAnIjogJyArICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICsgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLCB2bSk7CiAgfSAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLAogIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlcgoKCiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWQpIHsKICAgIHJldHVybiB2bS5fcHJvcHNba2V5XTsKICB9IC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzCiAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dAoKCiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nID8gZGVmLmNhbGwodm0pIDogZGVmOwp9Ci8qKgogKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuCiAqLwoKCmZ1bmN0aW9uIGFzc2VydFByb3AocHJvcCwgbmFtZSwgdmFsdWUsIHZtLCBhYnNlbnQpIHsKICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHsKICAgIHdhcm4oJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogIicgKyBuYW1lICsgJyInLCB2bSk7CiAgICByZXR1cm47CiAgfQoKICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7CiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTsKICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdOwoKICBpZiAodHlwZSkgewogICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7CiAgICAgIHR5cGUgPSBbdHlwZV07CiAgICB9CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykgewogICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7CiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTsKICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7CiAgICB9CiAgfQoKICBpZiAoIXZhbGlkKSB7CiAgICB3YXJuKGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksIHZtKTsKICAgIHJldHVybjsKICB9CgogIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjsKCiAgaWYgKHZhbGlkYXRvcikgewogICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7CiAgICAgIHdhcm4oJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgIicgKyBuYW1lICsgJyIuJywgdm0pOwogICAgfQogIH0KfQoKdmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvOwoKZnVuY3Rpb24gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZSkgewogIHZhciB2YWxpZDsKICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTsKCiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7CiAgICB2YXIgdCA9IF90eXBlb2YodmFsdWUpOwoKICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7IC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzCgogICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0JykgewogICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTsKICAgIH0KICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHsKICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7CiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHsKICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlOwogIH0KCiAgcmV0dXJuIHsKICAgIHZhbGlkOiB2YWxpZCwKICAgIGV4cGVjdGVkVHlwZTogZXhwZWN0ZWRUeXBlCiAgfTsKfQovKioKICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLAogKiBiZWNhdXNlIGEgc2ltcGxlIGVxdWFsaXR5IGNoZWNrIHdpbGwgZmFpbCB3aGVuIHJ1bm5pbmcKICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLgogKi8KCgpmdW5jdGlvbiBnZXRUeXBlKGZuKSB7CiAgdmFyIG1hdGNoID0gZm4gJiYgZm4udG9TdHJpbmcoKS5tYXRjaCgvXlxzKmZ1bmN0aW9uIChcdyspLyk7CiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJzsKfQoKZnVuY3Rpb24gaXNTYW1lVHlwZShhLCBiKSB7CiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYik7Cn0KCmZ1bmN0aW9uIGdldFR5cGVJbmRleCh0eXBlLCBleHBlY3RlZFR5cGVzKSB7CiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7CiAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMTsKICB9CgogIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkgewogICAgICByZXR1cm4gaTsKICAgIH0KICB9CgogIHJldHVybiAtMTsKfQoKZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSB7CiAgdmFyIG1lc3NhZ2UgPSAiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIiIgKyBuYW1lICsgIlwiLiIgKyAiIEV4cGVjdGVkICIgKyBleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpOwogIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdOwogIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpOwogIHZhciBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTsKICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7IC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZQoKICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiYgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiYgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHsKICAgIG1lc3NhZ2UgKz0gIiB3aXRoIHZhbHVlICIgKyBleHBlY3RlZFZhbHVlOwogIH0KCiAgbWVzc2FnZSArPSAiLCBnb3QgIiArIHJlY2VpdmVkVHlwZSArICIgIjsgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlCgogIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkgewogICAgbWVzc2FnZSArPSAid2l0aCB2YWx1ZSAiICsgcmVjZWl2ZWRWYWx1ZSArICIuIjsKICB9CgogIHJldHVybiBtZXNzYWdlOwp9CgpmdW5jdGlvbiBzdHlsZVZhbHVlKHZhbHVlLCB0eXBlKSB7CiAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7CiAgICByZXR1cm4gIlwiIiArIHZhbHVlICsgIlwiIjsKICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7CiAgICByZXR1cm4gIiIgKyBOdW1iZXIodmFsdWUpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gIiIgKyB2YWx1ZTsKICB9Cn0KCmZ1bmN0aW9uIGlzRXhwbGljYWJsZSh2YWx1ZSkgewogIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTsKICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7CiAgICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsKICB9KTsKfQoKZnVuY3Rpb24gaXNCb29sZWFuKCkgewogIHZhciBhcmdzID0gW10sCiAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7CgogIHdoaWxlIChsZW4tLSkgewogICAgYXJnc1tsZW5dID0gYXJndW1lbnRzW2xlbl07CiAgfQoKICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7CiAgICByZXR1cm4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSAnYm9vbGVhbic7CiAgfSk7Cn0KLyogICovCgoKZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbykgewogIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLgogIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDUKICBwdXNoVGFyZ2V0KCk7CgogIHRyeSB7CiAgICBpZiAodm0pIHsKICAgICAgdmFyIGN1ciA9IHZtOwoKICAgICAgd2hpbGUgKGN1ciA9IGN1ci4kcGFyZW50KSB7CiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7CgogICAgICAgIGlmIChob29rcykgewogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTsKCiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pOwogIH0gZmluYWxseSB7CiAgICBwb3BUYXJnZXQoKTsKICB9Cn0KCmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXIsIGNvbnRleHQsIGFyZ3MsIHZtLCBpbmZvKSB7CiAgdmFyIHJlczsKCiAgdHJ5IHsKICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpOwoKICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkgewogICAgICByZXNbImNhdGNoIl0oZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyAiIChQcm9taXNlL2FzeW5jKSIpOwogICAgICB9KTsgLy8gaXNzdWUgIzk1MTEKICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxscwoKICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTsKICAgIH0KICB9IGNhdGNoIChlKSB7CiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7CiAgfQoKICByZXR1cm4gcmVzOwp9CgpmdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKSB7CiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbyk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlciwKICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZQogICAgICBpZiAoZSAhPT0gZXJyKSB7CiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTsKICAgICAgfQogICAgfQogIH0KCiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7Cn0KCmZ1bmN0aW9uIGxvZ0Vycm9yKGVyciwgdm0sIGluZm8pIHsKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgd2FybigiRXJyb3IgaW4gIiArIGluZm8gKyAiOiBcIiIgKyBlcnIudG9TdHJpbmcoKSArICJcIiIsIHZtKTsKICB9CiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KCgogIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7CiAgICBjb25zb2xlLmVycm9yKGVycik7CiAgfSBlbHNlIHsKICAgIHRocm93IGVycjsKICB9Cn0KLyogICovCgoKdmFyIGlzVXNpbmdNaWNyb1Rhc2sgPSBmYWxzZTsKdmFyIGNhbGxiYWNrcyA9IFtdOwp2YXIgcGVuZGluZyA9IGZhbHNlOwoKZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MoKSB7CiAgcGVuZGluZyA9IGZhbHNlOwogIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7CiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7CiAgICBjb3BpZXNbaV0oKTsKICB9Cn0gLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLgovLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLgovLyBIb3dldmVyLCBpdCBoYXMgc3VidGxlIHByb2JsZW1zIHdoZW4gc3RhdGUgaXMgY2hhbmdlZCByaWdodCBiZWZvcmUgcmVwYWludAovLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS4KLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzCi8vIHRoYXQgY2Fubm90IGJlIGNpcmN1bXZlbnRlZCAoZS5nLiAjNzEwOSwgIzcxNTMsICM3NTQ2LCAjNzgzNCwgIzgxMDkpLgovLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uCi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvcwovLyB3aGVyZSBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHkKLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKQovLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS4KCgp2YXIgdGltZXJGdW5jOyAvLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZAovLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci4KLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluCi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0Ci8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmUKLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OgoKLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqLwoKaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkgewogIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7CgogIHRpbWVyRnVuYyA9IGZ1bmN0aW9uIHRpbWVyRnVuYygpIHsKICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7IC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dAogICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlCiAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlcgogICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuCiAgICAvLyAiZm9yY2UiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuCgogICAgaWYgKGlzSU9TKSB7CiAgICAgIHNldFRpbWVvdXQobm9vcCk7CiAgICB9CiAgfTsKCiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7Cn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChpc05hdGl2ZShNdXRhdGlvbk9ic2VydmVyKSB8fCAvLyBQaGFudG9tSlMgYW5kIGlPUyA3LngKTXV0YXRpb25PYnNlcnZlci50b1N0cmluZygpID09PSAnW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdJykpIHsKICAvLyBVc2UgTXV0YXRpb25PYnNlcnZlciB3aGVyZSBuYXRpdmUgUHJvbWlzZSBpcyBub3QgYXZhaWxhYmxlLAogIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNAogIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSkKICB2YXIgY291bnRlciA9IDE7CiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpOwogIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7CiAgb2JzZXJ2ZXIub2JzZXJ2ZSh0ZXh0Tm9kZSwgewogICAgY2hhcmFjdGVyRGF0YTogdHJ1ZQogIH0pOwoKICB0aW1lckZ1bmMgPSBmdW5jdGlvbiB0aW1lckZ1bmMoKSB7CiAgICBjb3VudGVyID0gKGNvdW50ZXIgKyAxKSAlIDI7CiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpOwogIH07CgogIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlOwp9IGVsc2UgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKHNldEltbWVkaWF0ZSkpIHsKICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuCiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsCiAgLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuCiAgdGltZXJGdW5jID0gZnVuY3Rpb24gdGltZXJGdW5jKCkgewogICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTsKICB9Owp9IGVsc2UgewogIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuCiAgdGltZXJGdW5jID0gZnVuY3Rpb24gdGltZXJGdW5jKCkgewogICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7CiAgfTsKfQoKZnVuY3Rpb24gbmV4dFRpY2soY2IsIGN0eCkgewogIHZhciBfcmVzb2x2ZTsKCiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkgewogICAgaWYgKGNiKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY2IuY2FsbChjdHgpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTsKICAgICAgfQogICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkgewogICAgICBfcmVzb2x2ZShjdHgpOwogICAgfQogIH0pOwoKICBpZiAoIXBlbmRpbmcpIHsKICAgIHBlbmRpbmcgPSB0cnVlOwogICAgdGltZXJGdW5jKCk7CiAgfSAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKCgogIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgX3Jlc29sdmUgPSByZXNvbHZlOwogICAgfSk7CiAgfQp9Ci8qICAqLwoKLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovCgoKdmFyIGluaXRQcm94eTsKCmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcCgnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICsgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgKyAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgKyAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeQogICk7CgogIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KSB7CiAgICB3YXJuKCJQcm9wZXJ0eSBvciBtZXRob2QgXCIiICsga2V5ICsgIlwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgIiArICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgKyAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgKyAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLCB0YXJnZXQpOwogIH07CgogIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpIHsKICAgIHdhcm4oIlByb3BlcnR5IFwiIiArIGtleSArICJcIiBtdXN0IGJlIGFjY2Vzc2VkIHdpdGggXCIkZGF0YS4iICsga2V5ICsgIlwiIGJlY2F1c2UgIiArICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggIiQiIG9yICJfIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICsgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscy4gJyArICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2FwaS8jZGF0YScsIHRhcmdldCk7CiAgfTsKCiAgdmFyIGhhc1Byb3h5ID0gdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7CgogIGlmIChoYXNQcm94eSkgewogICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpOwogICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2RlcywgewogICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0YXJnZXQsIGtleSwgdmFsdWUpIHsKICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkgewogICAgICAgICAgd2FybigiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuIiArIGtleSk7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0KCiAgdmFyIGhhc0hhbmRsZXIgPSB7CiAgICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIGtleSkgewogICAgICB2YXIgaGFzID0gKGtleSBpbiB0YXJnZXQpOwogICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fCB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKTsKCiAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHsKICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgewogICAgICAgICAgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkOwogICAgfQogIH07CiAgdmFyIGdldEhhbmRsZXIgPSB7CiAgICBnZXQ6IGZ1bmN0aW9uIGdldCh0YXJnZXQsIGtleSkgewogICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkgewogICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7CiAgICAgICAgICB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gdGFyZ2V0W2tleV07CiAgICB9CiAgfTsKCiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5KHZtKSB7CiAgICBpZiAoaGFzUHJveHkpIHsKICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlCiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7CiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWQgPyBnZXRIYW5kbGVyIDogaGFzSGFuZGxlcjsKICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7CiAgICB9IGVsc2UgewogICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTsKICAgIH0KICB9Owp9Ci8qICAqLwoKCnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7Ci8qKgogKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZAogKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdAogKiBpcyBjb2xsZWN0ZWQgYXMgYSAiZGVlcCIgZGVwZW5kZW5jeS4KICovCgpmdW5jdGlvbiB0cmF2ZXJzZSh2YWwpIHsKICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7CgogIHNlZW5PYmplY3RzLmNsZWFyKCk7Cn0KCmZ1bmN0aW9uIF90cmF2ZXJzZSh2YWwsIHNlZW4pIHsKICB2YXIgaSwga2V5czsKICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpOwoKICBpZiAoIWlzQSAmJiAhaXNPYmplY3QodmFsKSB8fCBPYmplY3QuaXNGcm96ZW4odmFsKSB8fCB2YWwgaW5zdGFuY2VvZiBWTm9kZSkgewogICAgcmV0dXJuOwogIH0KCiAgaWYgKHZhbC5fX29iX18pIHsKICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkOwoKICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHNlZW4uYWRkKGRlcElkKTsKICB9CgogIGlmIChpc0EpIHsKICAgIGkgPSB2YWwubGVuZ3RoOwoKICAgIHdoaWxlIChpLS0pIHsKICAgICAgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7CiAgICB9CiAgfSBlbHNlIHsKICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpOwogICAgaSA9IGtleXMubGVuZ3RoOwoKICAgIHdoaWxlIChpLS0pIHsKICAgICAgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7CiAgICB9CiAgfQp9Cgp2YXIgbWFyazsKdmFyIG1lYXN1cmU7CgppZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTsKICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KCiAgaWYgKHBlcmYgJiYgcGVyZi5tYXJrICYmIHBlcmYubWVhc3VyZSAmJiBwZXJmLmNsZWFyTWFya3MgJiYgcGVyZi5jbGVhck1lYXN1cmVzKSB7CiAgICBtYXJrID0gZnVuY3Rpb24gbWFyayh0YWcpIHsKICAgICAgcmV0dXJuIHBlcmYubWFyayh0YWcpOwogICAgfTsKCiAgICBtZWFzdXJlID0gZnVuY3Rpb24gbWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7CiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTsKICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTsKICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7IC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKQogICAgfTsKICB9Cn0KLyogICovCgoKdmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7CiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnOwogIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7CiAgdmFyIG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0CgogIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7CiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnOwogIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7CiAgcmV0dXJuIHsKICAgIG5hbWU6IG5hbWUsCiAgICBvbmNlOiBvbmNlJCQxLAogICAgY2FwdHVyZTogY2FwdHVyZSwKICAgIHBhc3NpdmU6IHBhc3NpdmUKICB9Owp9KTsKCmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlcihmbnMsIHZtKSB7CiAgZnVuY3Rpb24gaW52b2tlcigpIHsKICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50czsKICAgIHZhciBmbnMgPSBpbnZva2VyLmZuczsKCiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7CiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sICJ2LW9uIGhhbmRsZXIiKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnMKICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgInYtb24gaGFuZGxlciIpOwogICAgfQogIH0KCiAgaW52b2tlci5mbnMgPSBmbnM7CiAgcmV0dXJuIGludm9rZXI7Cn0KCmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCwgcmVtb3ZlJCQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pIHsKICB2YXIgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7CgogIGZvciAobmFtZSBpbiBvbikgewogICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07CiAgICBvbGQgPSBvbGRPbltuYW1lXTsKICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7CgogICAgaWYgKGlzVW5kZWYoY3VyKSkgewogICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXCIiICsgZXZlbnQubmFtZSArICJcIjogZ290ICIgKyBTdHJpbmcoY3VyKSwgdm0pOwogICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHsKICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHsKICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTsKICAgICAgfQoKICAgICAgaWYgKGlzVHJ1ZShldmVudC5vbmNlKSkgewogICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTsKICAgICAgfQoKICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTsKICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHsKICAgICAgb2xkLmZucyA9IGN1cjsKICAgICAgb25bbmFtZV0gPSBvbGQ7CiAgICB9CiAgfQoKICBmb3IgKG5hbWUgaW4gb2xkT24pIHsKICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkgewogICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpOwogICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpOwogICAgfQogIH0KfQovKiAgKi8KCgpmdW5jdGlvbiBtZXJnZVZOb2RlSG9vayhkZWYsIGhvb2tLZXksIGhvb2spIHsKICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHsKICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7CiAgfQoKICB2YXIgaW52b2tlcjsKICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTsKCiAgZnVuY3Rpb24gd3JhcHBlZEhvb2soKSB7CiAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2UKICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrCgogICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7CiAgfQoKICBpZiAoaXNVbmRlZihvbGRIb29rKSkgewogICAgLy8gbm8gZXhpc3RpbmcgaG9vawogICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTsKICB9IGVsc2UgewogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHsKICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyCiAgICAgIGludm9rZXIgPSBvbGRIb29rOwogICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2sKICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTsKICAgIH0KICB9CgogIGludm9rZXIubWVyZ2VkID0gdHJ1ZTsKICBkZWZbaG9va0tleV0gPSBpbnZva2VyOwp9Ci8qICAqLwoKCmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKSB7CiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuCiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkCiAgLy8gY29tcG9uZW50IGl0c2VsZi4KICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7CgogIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIHJlcyA9IHt9OwogIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7CiAgdmFyIHByb3BzID0gZGF0YS5wcm9wczsKCiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHsKICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykgewogICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7CgogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpOwoKICAgICAgICBpZiAoa2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJiBhdHRycyAmJiBoYXNPd24oYXR0cnMsIGtleUluTG93ZXJDYXNlKSkgewogICAgICAgICAgdGlwKCJQcm9wIFwiIiArIGtleUluTG93ZXJDYXNlICsgIlwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgIiArIGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpICsgIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXMiICsgIiBcIiIgKyBrZXkgKyAiXCIuICIgKyAiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCAiICsgInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gIiArICJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFwiIiArIGFsdEtleSArICJcIiBpbnN0ZWFkIG9mIFwiIiArIGtleSArICJcIi4iKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHwgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7CiAgICB9CiAgfQoKICByZXR1cm4gcmVzOwp9CgpmdW5jdGlvbiBjaGVja1Byb3AocmVzLCBoYXNoLCBrZXksIGFsdEtleSwgcHJlc2VydmUpIHsKICBpZiAoaXNEZWYoaGFzaCkpIHsKICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkgewogICAgICByZXNba2V5XSA9IGhhc2hba2V5XTsKCiAgICAgIGlmICghcHJlc2VydmUpIHsKICAgICAgICBkZWxldGUgaGFzaFtrZXldOwogICAgICB9CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHsKICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07CgogICAgICBpZiAoIXByZXNlcnZlKSB7CiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfQoKICByZXR1cm4gZmFsc2U7Cn0KLyogICovCi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieQovLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLgovLwovLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZQovLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlCi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDoKLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudAovLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlCi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZQovLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXAKLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLgoKCmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7CiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbik7CiAgICB9CiAgfQoKICByZXR1cm4gY2hpbGRyZW47Cn0gLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cywKLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyCi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb24KLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuCgoKZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pIHsKICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKSA6IHVuZGVmaW5lZDsKfQoKZnVuY3Rpb24gaXNUZXh0Tm9kZShub2RlKSB7CiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudCk7Cn0KCmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7CiAgdmFyIHJlcyA9IFtdOwogIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7CgogIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgYyA9IGNoaWxkcmVuW2ldOwoKICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7CiAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07IC8vICBuZXN0ZWQKCiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkgewogICAgICBpZiAoYy5sZW5ndGggPiAwKSB7CiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKG5lc3RlZEluZGV4IHx8ICcnKSArICJfIiArIGkpOyAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzCgogICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHsKICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGNbMF0udGV4dCk7CiAgICAgICAgICBjLnNoaWZ0KCk7CiAgICAgICAgfQoKICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7CiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7CiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2RlcwogICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmUKICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3MKICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTsKICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykgewogICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlCiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkgewogICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXMKICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpCiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiYgaXNEZWYoYy50YWcpICYmIGlzVW5kZWYoYy5rZXkpICYmIGlzRGVmKG5lc3RlZEluZGV4KSkgewogICAgICAgICAgYy5rZXkgPSAiX192bGlzdCIgKyBuZXN0ZWRJbmRleCArICJfIiArIGkgKyAiX18iOwogICAgICAgIH0KCiAgICAgICAgcmVzLnB1c2goYyk7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiByZXM7Cn0KLyogICovCgoKZnVuY3Rpb24gaW5pdFByb3ZpZGUodm0pIHsKICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7CgogIGlmIChwcm92aWRlKSB7CiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJyA/IHByb3ZpZGUuY2FsbCh2bSkgOiBwcm92aWRlOwogIH0KfQoKZnVuY3Rpb24gaW5pdEluamVjdGlvbnModm0pIHsKICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTsKCiAgaWYgKHJlc3VsdCkgewogICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTsKICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovCiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHdhcm4oIkF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgIiArICJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcHJvdmlkZWQgY29tcG9uZW50IHJlLXJlbmRlcnMuICIgKyAiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFwiIiArIGtleSArICJcIiIsIHZtKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSk7CiAgICAgIH0KICAgIH0pOwogICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpOwogIH0KfQoKZnVuY3Rpb24gcmVzb2x2ZUluamVjdChpbmplY3QsIHZtKSB7CiAgaWYgKGluamVjdCkgewogICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWQKICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgdmFyIGtleXMgPSBoYXNTeW1ib2wgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KSA6IE9iamVjdC5rZXlzKGluamVjdCk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBrZXkgPSBrZXlzW2ldOyAvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uCgogICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207CiAgICAgIHZhciBzb3VyY2UgPSB2bTsKCiAgICAgIHdoaWxlIChzb3VyY2UpIHsKICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHsKICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7CiAgICAgIH0KCiAgICAgIGlmICghc291cmNlKSB7CiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkgewogICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV1bImRlZmF1bHQiXTsKICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSkgOiBwcm92aWRlRGVmYXVsdDsKICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICAgIHdhcm4oIkluamVjdGlvbiBcIiIgKyBrZXkgKyAiXCIgbm90IGZvdW5kIiwgdm0pOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHJldHVybiByZXN1bHQ7CiAgfQp9Ci8qICAqLwoKLyoqCiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuCiAqLwoKCmZ1bmN0aW9uIHJlc29sdmVTbG90cyhjaGlsZHJlbiwgY29udGV4dCkgewogIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkgewogICAgcmV0dXJuIHt9OwogIH0KCiAgdmFyIHNsb3RzID0ge307CgogIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTsKICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTsgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZQoKICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7CiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7CiAgICB9IC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZQogICAgLy8gc2FtZSBjb250ZXh0LgoKCiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJiBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsKSB7CiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90OwogICAgICB2YXIgc2xvdCA9IHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKTsKCiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHsKICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pOwogICAgICB9IGVsc2UgewogICAgICAgIHNsb3QucHVzaChjaGlsZCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIChzbG90c1siZGVmYXVsdCJdIHx8IChzbG90c1siZGVmYXVsdCJdID0gW10pKS5wdXNoKGNoaWxkKTsKICAgIH0KICB9IC8vIGlnbm9yZSBzbG90cyB0aGF0IGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZQoKCiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7CiAgICBpZiAoc2xvdHNbbmFtZSQxXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7CiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdOwogICAgfQogIH0KCiAgcmV0dXJuIHNsb3RzOwp9CgpmdW5jdGlvbiBpc1doaXRlc3BhY2Uobm9kZSkgewogIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkgfHwgbm9kZS50ZXh0ID09PSAnICc7Cn0KLyogICovCgoKZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMoc2xvdHMsIG5vcm1hbFNsb3RzLCBwcmV2U2xvdHMpIHsKICB2YXIgcmVzOwogIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwOwogIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzOwogIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5OwoKICBpZiAoIXNsb3RzKSB7CiAgICByZXMgPSB7fTsKICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7CiAgICAvLyBmYXN0IHBhdGggMTogY2hpbGQgY29tcG9uZW50IHJlLXJlbmRlciBvbmx5LCBwYXJlbnQgZGlkIG5vdCBjaGFuZ2UKICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZDsKICB9IGVsc2UgaWYgKGlzU3RhYmxlICYmIHByZXZTbG90cyAmJiBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiYgIWhhc05vcm1hbFNsb3RzICYmICFwcmV2U2xvdHMuJGhhc05vcm1hbCkgewogICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LAogICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlCiAgICByZXR1cm4gcHJldlNsb3RzOwogIH0gZWxzZSB7CiAgICByZXMgPSB7fTsKCiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykgewogICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHsKICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7CiAgICAgIH0KICAgIH0KICB9IC8vIGV4cG9zZSBub3JtYWwgc2xvdHMgb24gc2NvcGVkU2xvdHMKCgogIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7CiAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7CiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTsKICAgIH0KICB9IC8vIGF2b3JpYXogc2VlbXMgdG8gbW9jayBhIG5vbi1leHRlbnNpYmxlICRzY29wZWRTbG90cyBvYmplY3QKICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3IKCgogIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkgewogICAgc2xvdHMuX25vcm1hbGl6ZWQgPSByZXM7CiAgfQoKICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTsKICBkZWYocmVzLCAnJGtleScsIGtleSk7CiAgZGVmKHJlcywgJyRoYXNOb3JtYWwnLCBoYXNOb3JtYWxTbG90cyk7CiAgcmV0dXJuIHJlczsKfQoKZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5LCBmbikgewogIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gbm9ybWFsaXplZCgpIHsKICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTsKICAgIHJlcyA9IHJlcyAmJiBfdHlwZW9mKHJlcykgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcykgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGUKICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTsKICAgIHJldHVybiByZXMgJiYgKHJlcy5sZW5ndGggPT09IDAgfHwgcmVzLmxlbmd0aCA9PT0gMSAmJiByZXNbMF0uaXNDb21tZW50IC8vICM5NjU4CiAgICApID8gdW5kZWZpbmVkIDogcmVzOwogIH07IC8vIHRoaXMgaXMgYSBzbG90IHVzaW5nIHRoZSBuZXcgdi1zbG90IHN5bnRheCB3aXRob3V0IHNjb3BlLiBhbHRob3VnaCBpdCBpcwogIC8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudAogIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LgoKCiAgaWYgKGZuLnByb3h5KSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwgewogICAgICBnZXQ6IG5vcm1hbGl6ZWQsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfSk7CiAgfQoKICByZXR1cm4gbm9ybWFsaXplZDsKfQoKZnVuY3Rpb24gcHJveHlOb3JtYWxTbG90KHNsb3RzLCBrZXkpIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHNsb3RzW2tleV07CiAgfTsKfQovKiAgKi8KCi8qKgogKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLgogKi8KCgpmdW5jdGlvbiByZW5kZXJMaXN0KHZhbCwgcmVuZGVyKSB7CiAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5OwoKICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7CiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7CgogICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7CiAgICB9CiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykgewogICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7CgogICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7CiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7CiAgICB9CiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7CiAgICBpZiAoaGFzU3ltYm9sICYmIHZhbFtTeW1ib2wuaXRlcmF0b3JdKSB7CiAgICAgIHJldCA9IFtdOwogICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpOwogICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpOwoKICAgICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkgewogICAgICAgIHJldC5wdXNoKHJlbmRlcihyZXN1bHQudmFsdWUsIHJldC5sZW5ndGgpKTsKICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpOwogICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpOwoKICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAga2V5ID0ga2V5c1tpXTsKICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7CiAgICAgIH0KICAgIH0KICB9CgogIGlmICghaXNEZWYocmV0KSkgewogICAgcmV0ID0gW107CiAgfQoKICByZXQuX2lzVkxpc3QgPSB0cnVlOwogIHJldHVybiByZXQ7Cn0KLyogICovCgovKioKICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD4KICovCgoKZnVuY3Rpb24gcmVuZGVyU2xvdChuYW1lLCBmYWxsYmFjaywgcHJvcHMsIGJpbmRPYmplY3QpIHsKICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07CiAgdmFyIG5vZGVzOwoKICBpZiAoc2NvcGVkU2xvdEZuKSB7CiAgICAvLyBzY29wZWQgc2xvdAogICAgcHJvcHMgPSBwcm9wcyB8fCB7fTsKCiAgICBpZiAoYmluZE9iamVjdCkgewogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHsKICAgICAgICB3YXJuKCdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JywgdGhpcyk7CiAgICAgIH0KCiAgICAgIHByb3BzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmluZE9iamVjdCksIHByb3BzKTsKICAgIH0KCiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7CiAgfSBlbHNlIHsKICAgIG5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV0gfHwgZmFsbGJhY2s7CiAgfQoKICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDsKCiAgaWYgKHRhcmdldCkgewogICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgewogICAgICBzbG90OiB0YXJnZXQKICAgIH0sIG5vZGVzKTsKICB9IGVsc2UgewogICAgcmV0dXJuIG5vZGVzOwogIH0KfQovKiAgKi8KCi8qKgogKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnMKICovCgoKZnVuY3Rpb24gcmVzb2x2ZUZpbHRlcihpZCkgewogIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHk7Cn0KLyogICovCgoKZnVuY3Rpb24gaXNLZXlOb3RNYXRjaChleHBlY3QsIGFjdHVhbCkgewogIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHsKICAgIHJldHVybiBleHBlY3QuaW5kZXhPZihhY3R1YWwpID09PSAtMTsKICB9IGVsc2UgewogICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsOwogIH0KfQovKioKICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLgogKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2sKICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0CiAqLwoKCmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMoZXZlbnRLZXlDb2RlLCBrZXksIGJ1aWx0SW5LZXlDb2RlLCBldmVudEtleU5hbWUsIGJ1aWx0SW5LZXlOYW1lKSB7CiAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTsKCiAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHsKICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpOwogIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkgewogICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKTsKICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkgewogICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXk7CiAgfQp9Ci8qICAqLwoKLyoqCiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD0ib2JqZWN0IiBpbnRvIGEgVk5vZGUncyBkYXRhLgogKi8KCgpmdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMoZGF0YSwgdGFnLCB2YWx1ZSwgYXNQcm9wLCBpc1N5bmMpIHsKICBpZiAodmFsdWUpIHsKICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7CiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybigndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLCB0aGlzKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgewogICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpOwogICAgICB9CgogICAgICB2YXIgaGFzaDsKCiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gbG9vcChrZXkpIHsKICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnIHx8IGtleSA9PT0gJ3N0eWxlJyB8fCBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSkpIHsKICAgICAgICAgIGhhc2ggPSBkYXRhOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlOwogICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KSA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTsKICAgICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpOwoKICAgICAgICBpZiAoIShjYW1lbGl6ZWRLZXkgaW4gaGFzaCkgJiYgIShoeXBoZW5hdGVkS2V5IGluIGhhc2gpKSB7CiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldOwoKICAgICAgICAgIGlmIChpc1N5bmMpIHsKICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTsKCiAgICAgICAgICAgIG9uWyJ1cGRhdGU6IiArIGtleV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH07CgogICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHsKICAgICAgICBsb29wKGtleSk7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBkYXRhOwp9Ci8qICAqLwoKLyoqCiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLgogKi8KCgpmdW5jdGlvbiByZW5kZXJTdGF0aWMoaW5kZXgsIGlzSW5Gb3IpIHsKICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pOwogIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTsgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsCiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuCgogIGlmICh0cmVlICYmICFpc0luRm9yKSB7CiAgICByZXR1cm4gdHJlZTsKICB9IC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS4KCgogIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwodGhpcy5fcmVuZGVyUHJveHksIG51bGwsIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXMKICApOwogIG1hcmtTdGF0aWModHJlZSwgIl9fc3RhdGljX18iICsgaW5kZXgsIGZhbHNlKTsKICByZXR1cm4gdHJlZTsKfQovKioKICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS4KICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuCiAqLwoKCmZ1bmN0aW9uIG1hcmtPbmNlKHRyZWUsIGluZGV4LCBrZXkpIHsKICBtYXJrU3RhdGljKHRyZWUsICJfX29uY2VfXyIgKyBpbmRleCArIChrZXkgPyAiXyIgKyBrZXkgOiAiIiksIHRydWUpOwogIHJldHVybiB0cmVlOwp9CgpmdW5jdGlvbiBtYXJrU3RhdGljKHRyZWUsIGtleSwgaXNPbmNlKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykgewogICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHsKICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCBrZXkgKyAiXyIgKyBpLCBpc09uY2UpOwogICAgICB9CiAgICB9CiAgfSBlbHNlIHsKICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTsKICB9Cn0KCmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlKG5vZGUsIGtleSwgaXNPbmNlKSB7CiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7CiAgbm9kZS5rZXkgPSBrZXk7CiAgbm9kZS5pc09uY2UgPSBpc09uY2U7Cn0KLyogICovCgoKZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyhkYXRhLCB2YWx1ZSkgewogIGlmICh2YWx1ZSkgewogICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkgewogICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsIHRoaXMpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307CgogICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHsKICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldOwogICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTsKICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VyczsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIGRhdGE7Cn0KLyogICovCgoKZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzKGZucywgLy8gc2VlIGZsb3cvdm5vZGUKcmVzLCAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjYKaGFzRHluYW1pY0tleXMsIGNvbnRlbnRIYXNoS2V5KSB7CiAgcmVzID0gcmVzIHx8IHsKICAgICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cwogIH07CgogIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc2xvdCA9IGZuc1tpXTsKCiAgICBpZiAoQXJyYXkuaXNBcnJheShzbG90KSkgewogICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7CiAgICB9IGVsc2UgaWYgKHNsb3QpIHsKICAgICAgLy8gbWFya2VyIGZvciByZXZlcnNlIHByb3h5aW5nIHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzCiAgICAgIGlmIChzbG90LnByb3h5KSB7CiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7CiAgICAgIH0KCiAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuOwogICAgfQogIH0KCiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7CiAgICByZXMuJGtleSA9IGNvbnRlbnRIYXNoS2V5OwogIH0KCiAgcmV0dXJuIHJlczsKfQovKiAgKi8KCgpmdW5jdGlvbiBiaW5kRHluYW1pY0tleXMoYmFzZU9iaiwgdmFsdWVzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHsKICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07CgogICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkgewogICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdOwogICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7CiAgICAgIC8vIG51bGwgaXMgYSBzcGVjaWFsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZwogICAgICB3YXJuKCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiAiICsga2V5LCB0aGlzKTsKICAgIH0KICB9CgogIHJldHVybiBiYXNlT2JqOwp9IC8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLgovLyBlbnN1cmUgb25seSBhcHBlbmQgd2hlbiB2YWx1ZSBpcyBhbHJlYWR5IHN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgY2FzdAovLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuCgoKZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyKHZhbHVlLCBzeW1ib2wpIHsKICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWU7Cn0KLyogICovCgoKZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnModGFyZ2V0KSB7CiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7CiAgdGFyZ2V0Ll9uID0gdG9OdW1iZXI7CiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7CiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDsKICB0YXJnZXQuX3QgPSByZW5kZXJTbG90OwogIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7CiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mOwogIHRhcmdldC5fbSA9IHJlbmRlclN0YXRpYzsKICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyOwogIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7CiAgdGFyZ2V0Ll9iID0gYmluZE9iamVjdFByb3BzOwogIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTsKICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlOwogIHRhcmdldC5fdSA9IHJlc29sdmVTY29wZWRTbG90czsKICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzOwogIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5czsKICB0YXJnZXQuX3AgPSBwcmVwZW5kTW9kaWZpZXI7Cn0KLyogICovCgoKZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoZGF0YSwgcHJvcHMsIGNoaWxkcmVuLCBwYXJlbnQsIEN0b3IpIHsKICB2YXIgdGhpcyQxID0gdGhpczsKICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9uczsgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50cwogIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2sKCiAgdmFyIGNvbnRleHRWbTsKCiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHsKICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTsgLy8gJGZsb3ctZGlzYWJsZS1saW5lCgogICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDsKICB9IGVsc2UgewogICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuCiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGUKICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS4KICAgIGNvbnRleHRWbSA9IHBhcmVudDsgLy8gJGZsb3ctZGlzYWJsZS1saW5lCgogICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDsKICB9CgogIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTsKICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDsKICB0aGlzLmRhdGEgPSBkYXRhOwogIHRoaXMucHJvcHMgPSBwcm9wczsKICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47CiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7CiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0OwogIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7CgogIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHsKICAgICAgbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KSk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMkMS4kc2xvdHM7CiAgfTsKCiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzY29wZWRTbG90cycsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSk7CiAgICB9CiAgfSk7IC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGUKCiAgaWYgKGlzQ29tcGlsZWQpIHsKICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKQogICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7IC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KCkKCiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTsKICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpOwogIH0KCiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHsKICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgewogICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOwoKICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkgewogICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7CiAgICAgICAgdm5vZGUuZm5Db250ZXh0ID0gcGFyZW50OwogICAgICB9CgogICAgICByZXR1cm4gdm5vZGU7CiAgICB9OwogIH0gZWxzZSB7CiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsKICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7CiAgICB9OwogIH0KfQoKaW5zdGFsbFJlbmRlckhlbHBlcnMoRnVuY3Rpb25hbFJlbmRlckNvbnRleHQucHJvdG90eXBlKTsKCmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0Vm0sIGNoaWxkcmVuKSB7CiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7CiAgdmFyIHByb3BzID0ge307CiAgdmFyIHByb3BPcHRpb25zID0gb3B0aW9ucy5wcm9wczsKCiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkgewogICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7CiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTsKICAgIH0KICB9IGVsc2UgewogICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7CiAgICAgIG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOwogICAgfQoKICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgewogICAgICBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsKICAgIH0KICB9CgogIHZhciByZW5kZXJDb250ZXh0ID0gbmV3IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KGRhdGEsIHByb3BzLCBjaGlsZHJlbiwgY29udGV4dFZtLCBDdG9yKTsKICB2YXIgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpOwoKICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkgewogICAgcmV0dXJuIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTsKICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7CiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdOwogICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykgewogICAgICByZXNbaV0gPSBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2Rlc1tpXSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpOwogICAgfQoKICAgIHJldHVybiByZXM7CiAgfQp9CgpmdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHsKICAvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZAogIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90cwogIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLgogIHZhciBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpOwogIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTsKICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zOwoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7CiAgfQoKICBpZiAoZGF0YS5zbG90KSB7CiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDsKICB9CgogIHJldHVybiBjbG9uZTsKfQoKZnVuY3Rpb24gbWVyZ2VQcm9wcyh0bywgZnJvbSkgewogIGZvciAodmFyIGtleSBpbiBmcm9tKSB7CiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTsKICB9Cn0KLyogICovCgovKiAgKi8KCi8qICAqLwoKLyogICovCi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoCgoKdmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7CiAgaW5pdDogZnVuY3Rpb24gaW5pdCh2bm9kZSwgaHlkcmF0aW5nKSB7CiAgICBpZiAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJiB2bm9kZS5kYXRhLmtlZXBBbGl2ZSkgewogICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2gKICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3cKCiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSh2bm9kZSwgYWN0aXZlSW5zdGFuY2UpOwogICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpOwogICAgfQogIH0sCiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoKG9sZFZub2RlLCB2bm9kZSkgewogICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zOwogICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTsKICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KGNoaWxkLCBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wcwogICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzCiAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZQogICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW4KICAgICk7CiAgfSwKICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCh2bm9kZSkgewogICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0OwogICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7CgogICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7CiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlOwogICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ21vdW50ZWQnKTsKICAgIH0KCiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHsKICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkgewogICAgICAgIC8vIHZ1ZS1yb3V0ZXIjMTIxMgogICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXkKICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3MKICAgICAgICAvLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsCiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLgogICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlCiAgICAgICAgLyogZGlyZWN0ICovCiAgICAgICAgKTsKICAgICAgfQogICAgfQogIH0sCiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSh2bm9kZSkgewogICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7CgogICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHsKICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkgewogICAgICAgIGNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlCiAgICAgICAgLyogZGlyZWN0ICovCiAgICAgICAgKTsKICAgICAgfQogICAgfQogIH0KfTsKdmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpOwoKZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpIHsKICBpZiAoaXNVbmRlZihDdG9yKSkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTsgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yCgogIGlmIChpc09iamVjdChDdG9yKSkgewogICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTsKICB9IC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSwKICAvLyByZWplY3QuCgoKICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHsKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgIHdhcm4oIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246ICIgKyBTdHJpbmcoQ3RvciksIGNvbnRleHQpOwogICAgfQoKICAgIHJldHVybjsKICB9IC8vIGFzeW5jIGNvbXBvbmVudAoKCiAgdmFyIGFzeW5jRmFjdG9yeTsKCiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7CiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yOwogICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yKTsKCiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWQKICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuCiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi4KICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoYXN5bmNGYWN0b3J5LCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTsKICAgIH0KICB9CgogIGRhdGEgPSBkYXRhIHx8IHt9OyAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyCiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uCgogIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7IC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHMKCiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7CiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpOwogIH0gLy8gZXh0cmFjdCBwcm9wcwoKCiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTsgLy8gZnVuY3Rpb25hbCBjb21wb25lbnQKCiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHsKICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pOwogIH0gLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXMKICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVycwoKCiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247IC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyCiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guCgogIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uOwoKICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9uc1siYWJzdHJhY3QiXSkpIHsKICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmcKICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90CiAgICAvLyB3b3JrIGFyb3VuZCBmbG93CiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDsKICAgIGRhdGEgPSB7fTsKCiAgICBpZiAoc2xvdCkgewogICAgICBkYXRhLnNsb3QgPSBzbG90OwogICAgfQogIH0gLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlCgoKICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7IC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlCgogIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnOwogIHZhciB2bm9kZSA9IG5ldyBWTm9kZSgidnVlLWNvbXBvbmVudC0iICsgQ3Rvci5jaWQgKyAobmFtZSA/ICItIiArIG5hbWUgOiAnJyksIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsIHsKICAgIEN0b3I6IEN0b3IsCiAgICBwcm9wc0RhdGE6IHByb3BzRGF0YSwKICAgIGxpc3RlbmVyczogbGlzdGVuZXJzLAogICAgdGFnOiB0YWcsCiAgICBjaGlsZHJlbjogY2hpbGRyZW4KICB9LCBhc3luY0ZhY3RvcnkpOwogIHJldHVybiB2bm9kZTsKfQoKZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSh2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0CnBhcmVudCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGUKKSB7CiAgdmFyIG9wdGlvbnMgPSB7CiAgICBfaXNDb21wb25lbnQ6IHRydWUsCiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLAogICAgcGFyZW50OiBwYXJlbnQKICB9OyAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9ucwoKICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlOwoKICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7CiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjsKICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zOwogIH0KCiAgcmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucyk7Cn0KCmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKSB7CiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldOwogICAgdmFyIGV4aXN0aW5nID0gaG9va3Nba2V5XTsKICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldOwoKICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7CiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBtZXJnZUhvb2skMShmMSwgZjIpIHsKICB2YXIgbWVyZ2VkID0gZnVuY3Rpb24gbWVyZ2VkKGEsIGIpIHsKICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnkKICAgIGYxKGEsIGIpOwogICAgZjIoYSwgYik7CiAgfTsKCiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlOwogIHJldHVybiBtZXJnZWQ7Cn0gLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50bwovLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS4KCgpmdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbChvcHRpb25zLCBkYXRhKSB7CiAgdmFyIHByb3AgPSBvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCB8fCAndmFsdWUnOwogIHZhciBldmVudCA9IG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCB8fCAnaW5wdXQnOwogIChkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7CiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTsKICB2YXIgZXhpc3RpbmcgPSBvbltldmVudF07CiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjazsKCiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkgewogICAgaWYgKEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrKSB7CiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTsKICAgIH0KICB9IGVsc2UgewogICAgb25bZXZlbnRdID0gY2FsbGJhY2s7CiAgfQp9Ci8qICAqLwoKCnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTsKdmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyOyAvLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZQovLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3cKCmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZSkgewogIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7CiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuOwogICAgY2hpbGRyZW4gPSBkYXRhOwogICAgZGF0YSA9IHVuZGVmaW5lZDsKICB9CgogIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkgewogICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFOwogIH0KCiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKTsKfQoKZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpIHsKICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5fX29iX18pKSB7CiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6ICIgKyBKU09OLnN0cmluZ2lmeShkYXRhKSArICJcbiIgKyAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJywgY29udGV4dCk7CiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpOwogIH0gLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmQKCgogIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkgewogICAgdGFnID0gZGF0YS5pczsKICB9CgogIGlmICghdGFnKSB7CiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlCiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpOwogIH0gLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5CgoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KSkgewogICAgewogICAgICB3YXJuKCdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsIGNvbnRleHQpOwogICAgfQogIH0gLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdAoKCiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJykgewogICAgZGF0YSA9IGRhdGEgfHwge307CiAgICBkYXRhLnNjb3BlZFNsb3RzID0gewogICAgICAiZGVmYXVsdCI6IGNoaWxkcmVuWzBdCiAgICB9OwogICAgY2hpbGRyZW4ubGVuZ3RoID0gMDsKICB9CgogIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkgewogICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7CiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkgewogICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7CiAgfQoKICB2YXIgdm5vZGUsIG5zOwoKICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHsKICAgIHZhciBDdG9yOwogICAgbnMgPSBjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucyB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7CgogICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHsKICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHMKICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5uYXRpdmVPbikpIHsKICAgICAgICB3YXJuKCJUaGUgLm5hdGl2ZSBtb2RpZmllciBmb3Igdi1vbiBpcyBvbmx5IHZhbGlkIG9uIGNvbXBvbmVudHMgYnV0IGl0IHdhcyB1c2VkIG9uIDwiICsgdGFnICsgIj4uIiwgY29udGV4dCk7CiAgICAgIH0KCiAgICAgIHZub2RlID0gbmV3IFZOb2RlKGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQpOwogICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHsKICAgICAgLy8gY29tcG9uZW50CiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpOwogICAgfSBlbHNlIHsKICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzCiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzCiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuCiAgICAgIHZub2RlID0gbmV3IFZOb2RlKHRhZywgZGF0YSwgY2hpbGRyZW4sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0KTsKICAgIH0KICB9IGVsc2UgewogICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3IKICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pOwogIH0KCiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7CiAgICByZXR1cm4gdm5vZGU7CiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHsKICAgIGlmIChpc0RlZihucykpIHsKICAgICAgYXBwbHlOUyh2bm9kZSwgbnMpOwogICAgfQoKICAgIGlmIChpc0RlZihkYXRhKSkgewogICAgICByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsKICAgIH0KCiAgICByZXR1cm4gdm5vZGU7CiAgfSBlbHNlIHsKICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKCk7CiAgfQp9CgpmdW5jdGlvbiBhcHBseU5TKHZub2RlLCBucywgZm9yY2UpIHsKICB2bm9kZS5ucyA9IG5zOwoKICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHsKICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdAogICAgbnMgPSB1bmRlZmluZWQ7CiAgICBmb3JjZSA9IHRydWU7CiAgfQoKICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7CiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTsKCiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChpc1VuZGVmKGNoaWxkLm5zKSB8fCBpc1RydWUoZm9yY2UpICYmIGNoaWxkLnRhZyAhPT0gJ3N2ZycpKSB7CiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTsKICAgICAgfQogICAgfQogIH0KfSAvLyByZWYgIzUzMTgKLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmQKLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXMKCgpmdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKSB7CiAgaWYgKGlzT2JqZWN0KGRhdGEuc3R5bGUpKSB7CiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTsKICB9CgogIGlmIChpc09iamVjdChkYXRhWyJjbGFzcyJdKSkgewogICAgdHJhdmVyc2UoZGF0YVsiY2xhc3MiXSk7CiAgfQp9Ci8qICAqLwoKCmZ1bmN0aW9uIGluaXRSZW5kZXIodm0pIHsKICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZQoKICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzCgogIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7CiAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlCgogIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDsKICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpOwogIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0OyAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2UKICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LgogIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemUKICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlcwoKICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7CiAgICByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOwogIH07IC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpbgogIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLgoKCiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgewogICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOwogIH07IC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uCiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZAoKCiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhOwogIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovCgogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkgewogICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oIiRhdHRycyBpcyByZWFkb25seS4iLCB2bSk7CiAgICB9LCB0cnVlKTsKICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkgewogICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuIiwgdm0pOwogICAgfSwgdHJ1ZSk7CiAgfSBlbHNlIHsKICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTsKICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7CiAgfQp9Cgp2YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDsKCmZ1bmN0aW9uIHJlbmRlck1peGluKFZ1ZSkgewogIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzCiAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7CgogIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7CiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpOwogIH07CgogIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciB2bSA9IHRoaXM7CiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7CiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjsKICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlOwoKICAgIGlmIChfcGFyZW50Vm5vZGUpIHsKICAgICAgdm0uJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsIHZtLiRzbG90cywgdm0uJHNjb3BlZFNsb3RzKTsKICAgIH0gLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2VzcwogICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuCgoKICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTsgLy8gcmVuZGVyIHNlbGYKCiAgICB2YXIgdm5vZGU7CgogICAgdHJ5IHsKICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVzZSBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkCiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZAogICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC4KICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07CiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAicmVuZGVyIik7IC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LAogICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudAoKICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KCiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgInJlbmRlckVycm9yIik7CiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7CiAgICAgIH0KICAgIH0gZmluYWxseSB7CiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7CiAgICB9IC8vIGlmIHRoZSByZXR1cm5lZCBhcnJheSBjb250YWlucyBvbmx5IGEgc2luZ2xlIG5vZGUsIGFsbG93IGl0CgoKICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHsKICAgICAgdm5vZGUgPSB2bm9kZVswXTsKICAgIH0gLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dAoKCiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkgewogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkgewogICAgICAgIHdhcm4oJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICsgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsIHZtKTsKICAgICAgfQoKICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7CiAgICB9IC8vIHNldCBwYXJlbnQKCgogICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlOwogICAgcmV0dXJuIHZub2RlOwogIH07Cn0KLyogICovCgoKZnVuY3Rpb24gZW5zdXJlQ3Rvcihjb21wLCBiYXNlKSB7CiAgaWYgKGNvbXAuX19lc01vZHVsZSB8fCBoYXNTeW1ib2wgJiYgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJykgewogICAgY29tcCA9IGNvbXBbImRlZmF1bHQiXTsKICB9CgogIHJldHVybiBpc09iamVjdChjb21wKSA/IGJhc2UuZXh0ZW5kKGNvbXApIDogY29tcDsKfQoKZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihmYWN0b3J5LCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKSB7CiAgdmFyIG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7CiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5OwogIG5vZGUuYXN5bmNNZXRhID0gewogICAgZGF0YTogZGF0YSwKICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICBjaGlsZHJlbjogY2hpbGRyZW4sCiAgICB0YWc6IHRhZwogIH07CiAgcmV0dXJuIG5vZGU7Cn0KCmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudChmYWN0b3J5LCBiYXNlQ3RvcikgewogIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7CiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXA7CiAgfQoKICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHsKICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkOwogIH0KCiAgdmFyIG93bmVyID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlOwoKICBpZiAob3duZXIgJiYgaXNEZWYoZmFjdG9yeS5vd25lcnMpICYmIGZhY3Rvcnkub3duZXJzLmluZGV4T2Yob3duZXIpID09PSAtMSkgewogICAgLy8gYWxyZWFkeSBwZW5kaW5nCiAgICBmYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTsKICB9CgogIGlmIChpc1RydWUoZmFjdG9yeS5sb2FkaW5nKSAmJiBpc0RlZihmYWN0b3J5LmxvYWRpbmdDb21wKSkgewogICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXA7CiAgfQoKICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkgewogICAgdmFyIG93bmVycyA9IGZhY3Rvcnkub3duZXJzID0gW293bmVyXTsKICAgIHZhciBzeW5jID0gdHJ1ZTsKICAgIHZhciB0aW1lckxvYWRpbmcgPSBudWxsOwogICAgdmFyIHRpbWVyVGltZW91dCA9IG51bGw7CiAgICBvd25lci4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gcmVtb3ZlKG93bmVycywgb3duZXIpOwogICAgfSk7CgogICAgdmFyIGZvcmNlUmVuZGVyID0gZnVuY3Rpb24gZm9yY2VSZW5kZXIocmVuZGVyQ29tcGxldGVkKSB7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIG93bmVyc1tpXS4kZm9yY2VVcGRhdGUoKTsKICAgICAgfQoKICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkgewogICAgICAgIG93bmVycy5sZW5ndGggPSAwOwoKICAgICAgICBpZiAodGltZXJMb2FkaW5nICE9PSBudWxsKSB7CiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTsKICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICBpZiAodGltZXJUaW1lb3V0ICE9PSBudWxsKSB7CiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTsKICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7CiAgICAgIC8vIGNhY2hlIHJlc29sdmVkCiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpOyAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlCiAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKQoKICAgICAgaWYgKCFzeW5jKSB7CiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7CiAgICAgIH0KICAgIH0pOwogICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikgewogICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogIiArIFN0cmluZyhmYWN0b3J5KSArIChyZWFzb24gPyAiXG5SZWFzb246ICIgKyByZWFzb24gOiAnJykpOwoKICAgICAgaWYgKGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkgewogICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlOwogICAgICAgIGZvcmNlUmVuZGVyKHRydWUpOwogICAgICB9CiAgICB9KTsKICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7CgogICAgaWYgKGlzT2JqZWN0KHJlcykpIHsKICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7CiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZQogICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7CiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHsKICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTsKCiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHsKICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTsKICAgICAgICB9CgogICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHsKICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7CgogICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkgewogICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDsKCiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkgewogICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkgewogICAgICAgICAgdGltZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7CgogICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkgewogICAgICAgICAgICAgIHJlamVjdChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gInRpbWVvdXQgKCIgKyByZXMudGltZW91dCArICJtcykiIDogbnVsbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBzeW5jID0gZmFsc2U7IC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHkKCiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nID8gZmFjdG9yeS5sb2FkaW5nQ29tcCA6IGZhY3RvcnkucmVzb2x2ZWQ7CiAgfQp9Ci8qICAqLwoKCmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlcihub2RlKSB7CiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5Owp9Ci8qICAqLwoKCmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY2hpbGRyZW4pIHsKICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTsKCiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7CiAgICAgICAgcmV0dXJuIGM7CiAgICAgIH0KICAgIH0KICB9Cn0KLyogICovCgovKiAgKi8KCgpmdW5jdGlvbiBpbml0RXZlbnRzKHZtKSB7CiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlOyAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHMKCiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7CgogIGlmIChsaXN0ZW5lcnMpIHsKICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTsKICB9Cn0KCnZhciB0YXJnZXQ7CgpmdW5jdGlvbiBhZGQoZXZlbnQsIGZuKSB7CiAgdGFyZ2V0LiRvbihldmVudCwgZm4pOwp9CgpmdW5jdGlvbiByZW1vdmUkMShldmVudCwgZm4pIHsKICB0YXJnZXQuJG9mZihldmVudCwgZm4pOwp9CgpmdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlcihldmVudCwgZm4pIHsKICB2YXIgX3RhcmdldCA9IHRhcmdldDsKICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7CiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKCiAgICBpZiAocmVzICE9PSBudWxsKSB7CiAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpOwogICAgfQogIH07Cn0KCmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpIHsKICB0YXJnZXQgPSB2bTsKICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7CiAgdGFyZ2V0ID0gdW5kZWZpbmVkOwp9CgpmdW5jdGlvbiBldmVudHNNaXhpbihWdWUpIHsKICB2YXIgaG9va1JFID0gL15ob29rOi87CgogIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikgewogICAgdmFyIHZtID0gdGhpczsKCiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHsKICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7IC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uCiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cAoKICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkgewogICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHZtOwogIH07CgogIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7CiAgICB2YXIgdm0gPSB0aGlzOwoKICAgIGZ1bmN0aW9uIG9uKCkgewogICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7CiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpOwogICAgfQoKICAgIG9uLmZuID0gZm47CiAgICB2bS4kb24oZXZlbnQsIG9uKTsKICAgIHJldHVybiB2bTsKICB9OwoKICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7CiAgICB2YXIgdm0gPSB0aGlzOyAvLyBhbGwKCiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHsKICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgIHJldHVybiB2bTsKICAgIH0gLy8gYXJyYXkgb2YgZXZlbnRzCgoKICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkgewogICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykgewogICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pOwogICAgICB9CgogICAgICByZXR1cm4gdm07CiAgICB9IC8vIHNwZWNpZmljIGV2ZW50CgoKICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTsKCiAgICBpZiAoIWNicykgewogICAgICByZXR1cm4gdm07CiAgICB9CgogICAgaWYgKCFmbikgewogICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7CiAgICAgIHJldHVybiB2bTsKICAgIH0gLy8gc3BlY2lmaWMgaGFuZGxlcgoKCiAgICB2YXIgY2I7CiAgICB2YXIgaSA9IGNicy5sZW5ndGg7CgogICAgd2hpbGUgKGktLSkgewogICAgICBjYiA9IGNic1tpXTsKCiAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7CiAgICAgICAgY2JzLnNwbGljZShpLCAxKTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQoKICAgIHJldHVybiB2bTsKICB9OwoKICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICB2YXIgdm0gPSB0aGlzOwoKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgIHZhciBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7CgogICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7CiAgICAgICAgdGlwKCJFdmVudCBcIiIgKyBsb3dlckNhc2VFdmVudCArICJcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCAiICsgZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkgKyAiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcIiIgKyBldmVudCArICJcIi4gIiArICJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSAiICsgInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiAiICsgIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFwiIiArIGh5cGhlbmF0ZShldmVudCkgKyAiXCIgaW5zdGVhZCBvZiBcIiIgKyBldmVudCArICJcIi4iKTsKICAgICAgfQogICAgfQoKICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTsKCiAgICBpZiAoY2JzKSB7CiAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzOwogICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTsKICAgICAgdmFyIGluZm8gPSAiZXZlbnQgaGFuZGxlciBmb3IgXCIiICsgZXZlbnQgKyAiXCIiOwoKICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHZtOwogIH07Cn0KLyogICovCgoKdmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDsKdmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlOwoKZnVuY3Rpb24gc2V0QWN0aXZlSW5zdGFuY2Uodm0pIHsKICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7CiAgYWN0aXZlSW5zdGFuY2UgPSB2bTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7CiAgfTsKfQoKZnVuY3Rpb24gaW5pdExpZmVjeWNsZSh2bSkgewogIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7IC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50CgogIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDsKCiAgaWYgKHBhcmVudCAmJiAhb3B0aW9uc1siYWJzdHJhY3QiXSkgewogICAgd2hpbGUgKHBhcmVudC4kb3B0aW9uc1siYWJzdHJhY3QiXSAmJiBwYXJlbnQuJHBhcmVudCkgewogICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDsKICAgIH0KCiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pOwogIH0KCiAgdm0uJHBhcmVudCA9IHBhcmVudDsKICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtOwogIHZtLiRjaGlsZHJlbiA9IFtdOwogIHZtLiRyZWZzID0ge307CiAgdm0uX3dhdGNoZXIgPSBudWxsOwogIHZtLl9pbmFjdGl2ZSA9IG51bGw7CiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7CiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlOwogIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlOwogIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7Cn0KCmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluKFZ1ZSkgewogIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7CiAgICB2YXIgdm0gPSB0aGlzOwogICAgdmFyIHByZXZFbCA9IHZtLiRlbDsKICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7CiAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2Uodm0pOwogICAgdm0uX3Zub2RlID0gdm5vZGU7IC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50cwogICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuCgogICAgaWYgKCFwcmV2Vm5vZGUpIHsKICAgICAgLy8gaW5pdGlhbCByZW5kZXIKICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UKICAgICAgLyogcmVtb3ZlT25seSAqLwogICAgICApOwogICAgfSBlbHNlIHsKICAgICAgLy8gdXBkYXRlcwogICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7CiAgICB9CgogICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7IC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZQoKICAgIGlmIChwcmV2RWwpIHsKICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsOwogICAgfQoKICAgIGlmICh2bS4kZWwpIHsKICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTsKICAgIH0gLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbAoKCiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkgewogICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDsKICAgIH0gLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZQogICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay4KCiAgfTsKCiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgdm0gPSB0aGlzOwoKICAgIGlmICh2bS5fd2F0Y2hlcikgewogICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTsKICAgIH0KICB9OwoKICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkgewogICAgdmFyIHZtID0gdGhpczsKCiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpOwogICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlOyAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudAoKICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50OwoKICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnNbImFic3RyYWN0Il0pIHsKICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTsKICAgIH0gLy8gdGVhcmRvd24gd2F0Y2hlcnMKCgogICAgaWYgKHZtLl93YXRjaGVyKSB7CiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7CiAgICB9CgogICAgdmFyIGkgPSB2bS5fd2F0Y2hlcnMubGVuZ3RoOwoKICAgIHdoaWxlIChpLS0pIHsKICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7CiAgICB9IC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iCiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci4KCgogICAgaWYgKHZtLl9kYXRhLl9fb2JfXykgewogICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tOwogICAgfSAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi4KCgogICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTsgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlCgogICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7IC8vIGZpcmUgZGVzdHJveWVkIGhvb2sKCgogICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTsgLy8gdHVybiBvZmYgYWxsIGluc3RhbmNlIGxpc3RlbmVycy4KCiAgICB2bS4kb2ZmKCk7IC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZQoKICAgIGlmICh2bS4kZWwpIHsKICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsOwogICAgfSAvLyByZWxlYXNlIGNpcmN1bGFyIHJlZmVyZW5jZSAoIzY3NTkpCgoKICAgIGlmICh2bS4kdm5vZGUpIHsKICAgICAgdm0uJHZub2RlLnBhcmVudCA9IG51bGw7CiAgICB9CiAgfTsKfQoKZnVuY3Rpb24gbW91bnRDb21wb25lbnQodm0sIGVsLCBoeWRyYXRpbmcpIHsKICB2bS4kZWwgPSBlbDsKCiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHsKICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7CgogICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICAgIGlmICh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJyB8fCB2bS4kb3B0aW9ucy5lbCB8fCBlbCkgewogICAgICAgIHdhcm4oJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgKyAnY29tcGlsZXIgaXMgbm90IGF2YWlsYWJsZS4gRWl0aGVyIHByZS1jb21waWxlIHRoZSB0ZW1wbGF0ZXMgaW50byAnICsgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJywgdm0pOwogICAgICB9IGVsc2UgewogICAgICAgIHdhcm4oJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLCB2bSk7CiAgICAgIH0KICAgIH0KICB9CgogIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTsKICB2YXIgdXBkYXRlQ29tcG9uZW50OwogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykgewogICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50KCkgewogICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lOwogICAgICB2YXIgaWQgPSB2bS5fdWlkOwogICAgICB2YXIgc3RhcnRUYWcgPSAidnVlLXBlcmYtc3RhcnQ6IiArIGlkOwogICAgICB2YXIgZW5kVGFnID0gInZ1ZS1wZXJmLWVuZDoiICsgaWQ7CiAgICAgIG1hcmsoc3RhcnRUYWcpOwoKICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpOwoKICAgICAgbWFyayhlbmRUYWcpOwogICAgICBtZWFzdXJlKCJ2dWUgIiArIG5hbWUgKyAiIHJlbmRlciIsIHN0YXJ0VGFnLCBlbmRUYWcpOwogICAgICBtYXJrKHN0YXJ0VGFnKTsKCiAgICAgIHZtLl91cGRhdGUodm5vZGUsIGh5ZHJhdGluZyk7CgogICAgICBtYXJrKGVuZFRhZyk7CiAgICAgIG1lYXN1cmUoInZ1ZSAiICsgbmFtZSArICIgcGF0Y2giLCBzdGFydFRhZywgZW5kVGFnKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudCgpIHsKICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7CiAgICB9OwogIH0gLy8gd2Ugc2V0IHRoaXMgdG8gdm0uX3dhdGNoZXIgaW5zaWRlIHRoZSB3YXRjaGVyJ3MgY29uc3RydWN0b3IKICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZAogIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWQKCgogIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHsKICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlKCkgewogICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7CiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTsKICAgICAgfQogICAgfQogIH0sIHRydWUKICAvKiBpc1JlbmRlcldhdGNoZXIgKi8KICApOwogIGh5ZHJhdGluZyA9IGZhbHNlOyAvLyBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlLCBjYWxsIG1vdW50ZWQgb24gc2VsZgogIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rCgogIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkgewogICAgdm0uX2lzTW91bnRlZCA9IHRydWU7CiAgICBjYWxsSG9vayh2bSwgJ21vdW50ZWQnKTsKICB9CgogIHJldHVybiB2bTsKfQoKZnVuY3Rpb24gdXBkYXRlQ2hpbGRDb21wb25lbnQodm0sIHByb3BzRGF0YSwgbGlzdGVuZXJzLCBwYXJlbnRWbm9kZSwgcmVuZGVyQ2hpbGRyZW4pIHsKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gdHJ1ZTsKICB9IC8vIGRldGVybWluZSB3aGV0aGVyIGNvbXBvbmVudCBoYXMgc2xvdCBjaGlsZHJlbgogIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLgogIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGgKICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZQogIC8vICIkc3RhYmxlIiBtYXJrZXIuCgoKICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzOwogIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90czsKICB2YXIgaGFzRHluYW1pY1Njb3BlZFNsb3QgPSAhIShuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSB8fCBvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUgfHwgbmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkgIT09IG5ld1Njb3BlZFNsb3RzLiRrZXkpOyAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzCiAgLy8gdXBkYXRlLiBEeW5hbWljIHNjb3BlZCBzbG90cyBtYXkgYWxzbyBoYXZlIGNoYW5nZWQuIEluIHN1Y2ggY2FzZXMsIGEgZm9yY2VkCiAgLy8gdXBkYXRlIGlzIG5lY2Vzc2FyeSB0byBlbnN1cmUgY29ycmVjdG5lc3MuCgogIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gISEocmVuZGVyQ2hpbGRyZW4gfHwgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHMKICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHMKICBoYXNEeW5hbWljU2NvcGVkU2xvdCk7CiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7CiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXIKCiAgaWYgKHZtLl92bm9kZSkgewogICAgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnQKICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTsKICB9CgogIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuOyAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2gKICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGQKICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlcgoKICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0OwogIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7IC8vIHVwZGF0ZSBwcm9wcwoKICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7CiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpOwogICAgdmFyIHByb3BzID0gdm0uX3Byb3BzOwogICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldOwogICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/CgogICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pOwogICAgfQoKICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTsgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YQoKICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTsKICB9IC8vIHVwZGF0ZSBsaXN0ZW5lcnMKCgogIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDsKICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVyczsKICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzOwogIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpOyAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlbgoKICBpZiAobmVlZHNGb3JjZVVwZGF0ZSkgewogICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTsKICAgIHZtLiRmb3JjZVVwZGF0ZSgpOwogIH0KCiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlOwogIH0KfQoKZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSh2bSkgewogIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkgewogICAgaWYgKHZtLl9pbmFjdGl2ZSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CgogIHJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bSwgZGlyZWN0KSB7CiAgaWYgKGRpcmVjdCkgewogICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7CgogICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7CiAgICAgIHJldHVybjsKICAgIH0KICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkgewogICAgcmV0dXJuOwogIH0KCiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHsKICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTsKICAgIH0KCiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpOwogIH0KfQoKZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLCBkaXJlY3QpIHsKICBpZiAoZGlyZWN0KSB7CiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlOwoKICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkgewogICAgICByZXR1cm47CiAgICB9CiAgfQoKICBpZiAoIXZtLl9pbmFjdGl2ZSkgewogICAgdm0uX2luYWN0aXZlID0gdHJ1ZTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTsKICAgIH0KCiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7CiAgfQp9CgpmdW5jdGlvbiBjYWxsSG9vayh2bSwgaG9vaykgewogIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3MKICBwdXNoVGFyZ2V0KCk7CiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107CiAgdmFyIGluZm8gPSBob29rICsgIiBob29rIjsKCiAgaWYgKGhhbmRsZXJzKSB7CiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykgewogICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTsKICAgIH0KICB9CgogIGlmICh2bS5faGFzSG9va0V2ZW50KSB7CiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7CiAgfQoKICBwb3BUYXJnZXQoKTsKfQovKiAgKi8KCgp2YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDsKdmFyIHF1ZXVlID0gW107CnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdOwp2YXIgaGFzID0ge307CnZhciBjaXJjdWxhciA9IHt9Owp2YXIgd2FpdGluZyA9IGZhbHNlOwp2YXIgZmx1c2hpbmcgPSBmYWxzZTsKdmFyIGluZGV4ID0gMDsKLyoqCiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS4KICovCgpmdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlKCkgewogIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDsKICBoYXMgPSB7fTsKCiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgIGNpcmN1bGFyID0ge307CiAgfQoKICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTsKfSAvLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlCi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseQovLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcAovLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnMKLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guCgoKdmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7IC8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuCgp2YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7IC8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlCi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzCi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZQovLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuCi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9jawovLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKQoKaWYgKGluQnJvd3NlciAmJiAhaXNJRSkgewogIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZTsKCiAgaWYgKHBlcmZvcm1hbmNlICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiYgZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXApIHsKICAgIC8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXMKICAgIC8vIHNtYWxsZXIgdGhhbiBpdCwgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCwKICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXMKICAgIC8vIHdlbGwuCiAgICBnZXROb3cgPSBmdW5jdGlvbiBnZXROb3coKSB7CiAgICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsKICAgIH07CiAgfQp9Ci8qKgogKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy4KICovCgoKZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSgpIHsKICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTsKICBmbHVzaGluZyA9IHRydWU7CiAgdmFyIHdhdGNoZXIsIGlkOyAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC4KICAvLyBUaGlzIGVuc3VyZXMgdGhhdDoKICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzCiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKQogIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2UKICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpCiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1biwKICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuCgogIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgIHJldHVybiBhLmlkIC0gYi5pZDsKICB9KTsgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkCiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzCgogIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykgewogICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTsKCiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHsKICAgICAgd2F0Y2hlci5iZWZvcmUoKTsKICAgIH0KCiAgICBpZCA9IHdhdGNoZXIuaWQ7CiAgICBoYXNbaWRdID0gbnVsbDsKICAgIHdhdGNoZXIucnVuKCk7IC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy4KCiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHsKICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7CgogICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkgewogICAgICAgIHdhcm4oJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKHdhdGNoZXIudXNlciA/ICJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcIiIgKyB3YXRjaGVyLmV4cHJlc3Npb24gKyAiXCIiIDogImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi4iKSwgd2F0Y2hlci52bSk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9IC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGUKCgogIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7CiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7CiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpOyAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3MKCiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTsKICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7IC8vIGRldnRvb2wgaG9vawoKICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KCiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykgewogICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTsKICB9Cn0KCmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MocXVldWUpIHsKICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDsKCiAgd2hpbGUgKGktLSkgewogICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTsKICAgIHZhciB2bSA9IHdhdGNoZXIudm07CgogICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkgewogICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTsKICAgIH0KICB9Cn0KLyoqCiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC4KICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLgogKi8KCgpmdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCh2bSkgewogIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW4KICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KQogIHZtLl9pbmFjdGl2ZSA9IGZhbHNlOwogIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pOwp9CgpmdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MocXVldWUpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7CiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlOwogICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZQogICAgLyogdHJ1ZSAqLwogICAgKTsKICB9Cn0KLyoqCiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuCiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQncwogKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC4KICovCgoKZnVuY3Rpb24gcXVldWVXYXRjaGVyKHdhdGNoZXIpIHsKICB2YXIgaWQgPSB3YXRjaGVyLmlkOwoKICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7CiAgICBoYXNbaWRdID0gdHJ1ZTsKCiAgICBpZiAoIWZsdXNoaW5nKSB7CiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7CiAgICB9IGVsc2UgewogICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkCiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuCiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTsKCiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7CiAgICAgICAgaS0tOwogICAgICB9CgogICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpOwogICAgfSAvLyBxdWV1ZSB0aGUgZmx1c2gKCgogICAgaWYgKCF3YWl0aW5nKSB7CiAgICAgIHdhaXRpbmcgPSB0cnVlOwoKICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykgewogICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpOwogICAgfQogIH0KfQovKiAgKi8KCgp2YXIgdWlkJDIgPSAwOwovKioKICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsCiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuCiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLgogKi8KCnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMsIGlzUmVuZGVyV2F0Y2hlcikgewogIHRoaXMudm0gPSB2bTsKCiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikgewogICAgdm0uX3dhdGNoZXIgPSB0aGlzOwogIH0KCiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7IC8vIG9wdGlvbnMKCgogIGlmIChvcHRpb25zKSB7CiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDsKICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyOwogICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7CiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYzsKICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7CiAgfSBlbHNlIHsKICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlOwogIH0KCiAgdGhpcy5jYiA9IGNiOwogIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nCgogIHRoaXMuYWN0aXZlID0gdHJ1ZTsKICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVycwoKICB0aGlzLmRlcHMgPSBbXTsKICB0aGlzLm5ld0RlcHMgPSBbXTsKICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7CiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpOwogIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBleHBPckZuLnRvU3RyaW5nKCkgOiAnJzsgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyCgogIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykgewogICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuOwogIH0gZWxzZSB7CiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTsKCiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7CiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDsKICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXCIiICsgZXhwT3JGbiArICJcIiAiICsgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICsgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJywgdm0pOwogICAgfQogIH0KCiAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eSA/IHVuZGVmaW5lZCA6IHRoaXMuZ2V0KCk7Cn07Ci8qKgogKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuCiAqLwoKCldhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCgpIHsKICBwdXNoVGFyZ2V0KHRoaXMpOwogIHZhciB2YWx1ZTsKICB2YXIgdm0gPSB0aGlzLnZtOwoKICB0cnkgewogICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7CiAgfSBjYXRjaCAoZSkgewogICAgaWYgKHRoaXMudXNlcikgewogICAgICBoYW5kbGVFcnJvcihlLCB2bSwgImdldHRlciBmb3Igd2F0Y2hlciBcIiIgKyB0aGlzLmV4cHJlc3Npb24gKyAiXCIiKTsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSBmaW5hbGx5IHsKICAgIC8vICJ0b3VjaCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXMKICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZwogICAgaWYgKHRoaXMuZGVlcCkgewogICAgICB0cmF2ZXJzZSh2YWx1ZSk7CiAgICB9CgogICAgcG9wVGFyZ2V0KCk7CiAgICB0aGlzLmNsZWFudXBEZXBzKCk7CiAgfQoKICByZXR1cm4gdmFsdWU7Cn07Ci8qKgogKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLgogKi8KCgpXYXRjaGVyLnByb3RvdHlwZS5hZGREZXAgPSBmdW5jdGlvbiBhZGREZXAoZGVwKSB7CiAgdmFyIGlkID0gZGVwLmlkOwoKICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHsKICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7CiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApOwoKICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkgewogICAgICBkZXAuYWRkU3ViKHRoaXMpOwogICAgfQogIH0KfTsKLyoqCiAqIENsZWFuIHVwIGZvciBkZXBlbmRlbmN5IGNvbGxlY3Rpb24uCiAqLwoKCldhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMoKSB7CiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoOwoKICB3aGlsZSAoaS0tKSB7CiAgICB2YXIgZGVwID0gdGhpcy5kZXBzW2ldOwoKICAgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpIHsKICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTsKICAgIH0KICB9CgogIHZhciB0bXAgPSB0aGlzLmRlcElkczsKICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzOwogIHRoaXMubmV3RGVwSWRzID0gdG1wOwogIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7CiAgdG1wID0gdGhpcy5kZXBzOwogIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwczsKICB0aGlzLm5ld0RlcHMgPSB0bXA7CiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7Cn07Ci8qKgogKiBTdWJzY3JpYmVyIGludGVyZmFjZS4KICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy4KICovCgoKV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkgewogIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovCiAgaWYgKHRoaXMubGF6eSkgewogICAgdGhpcy5kaXJ0eSA9IHRydWU7CiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHsKICAgIHRoaXMucnVuKCk7CiAgfSBlbHNlIHsKICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTsKICB9Cn07Ci8qKgogKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS4KICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci4KICovCgoKV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuKCkgewogIGlmICh0aGlzLmFjdGl2ZSkgewogICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTsKCiAgICBpZiAodmFsdWUgIT09IHRoaXMudmFsdWUgfHwgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuCiAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5CiAgICAvLyBoYXZlIG11dGF0ZWQuCiAgICBpc09iamVjdCh2YWx1ZSkgfHwgdGhpcy5kZWVwKSB7CiAgICAgIC8vIHNldCBuZXcgdmFsdWUKICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTsKICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlOwoKICAgICAgaWYgKHRoaXMudXNlcikgewogICAgICAgIHRyeSB7CiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXCIiICsgdGhpcy5leHByZXNzaW9uICsgIlwiIik7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpOwogICAgICB9CiAgICB9CiAgfQp9OwovKioKICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLgogKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuCiAqLwoKCldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUoKSB7CiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7CiAgdGhpcy5kaXJ0eSA9IGZhbHNlOwp9OwovKioKICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuCiAqLwoKCldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCgpIHsKICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7CgogIHdoaWxlIChpLS0pIHsKICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTsKICB9Cn07Ci8qKgogKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC4KICovCgoKV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93bigpIHsKICBpZiAodGhpcy5hY3RpdmUpIHsKICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3QKICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXQKICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuCiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHsKICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTsKICAgIH0KCiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7CgogICAgd2hpbGUgKGktLSkgewogICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpOwogICAgfQoKICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7CiAgfQp9OwovKiAgKi8KCgp2YXIgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uID0gewogIGVudW1lcmFibGU6IHRydWUsCiAgY29uZmlndXJhYmxlOiB0cnVlLAogIGdldDogbm9vcCwKICBzZXQ6IG5vb3AKfTsKCmZ1bmN0aW9uIHByb3h5KHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHsKICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gZnVuY3Rpb24gcHJveHlHZXR0ZXIoKSB7CiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV07CiAgfTsKCiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyKHZhbCkgewogICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7CiAgfTsKCiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pOwp9CgpmdW5jdGlvbiBpbml0U3RhdGUodm0pIHsKICB2bS5fd2F0Y2hlcnMgPSBbXTsKICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zOwoKICBpZiAob3B0cy5wcm9wcykgewogICAgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsKICB9CgogIGlmIChvcHRzLm1ldGhvZHMpIHsKICAgIGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOwogIH0KCiAgaWYgKG9wdHMuZGF0YSkgewogICAgaW5pdERhdGEodm0pOwogIH0gZWxzZSB7CiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUKICAgIC8qIGFzUm9vdERhdGEgKi8KICAgICk7CiAgfQoKICBpZiAob3B0cy5jb21wdXRlZCkgewogICAgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsKICB9CgogIGlmIChvcHRzLndhdGNoICYmIG9wdHMud2F0Y2ggIT09IG5hdGl2ZVdhdGNoKSB7CiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpOwogIH0KfQoKZnVuY3Rpb24gaW5pdFByb3BzKHZtLCBwcm9wc09wdGlvbnMpIHsKICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9OwogIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9OyAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheQogIC8vIGluc3RlYWQgb2YgZHluYW1pYyBvYmplY3Qga2V5IGVudW1lcmF0aW9uLgoKICB2YXIga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IFtdOwogIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDsgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkCgogIGlmICghaXNSb290KSB7CiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpOwogIH0KCiAgdmFyIGxvb3AgPSBmdW5jdGlvbiBsb29wKGtleSkgewogICAga2V5cy5wdXNoKGtleSk7CiAgICB2YXIgdmFsdWUgPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wc09wdGlvbnMsIHByb3BzRGF0YSwgdm0pOwogICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KCiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpOwoKICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7CiAgICAgICAgd2FybigiXCIiICsgaHlwaGVuYXRlZEtleSArICJcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuIiwgdm0pOwogICAgICB9CgogICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkgewogICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHsKICAgICAgICAgIHdhcm4oIkF2b2lkIG11dGF0aW5nIGEgcHJvcCBkaXJlY3RseSBzaW5jZSB0aGUgdmFsdWUgd2lsbCBiZSAiICsgIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuICIgKyAiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzICIgKyAidmFsdWUuIFByb3AgYmVpbmcgbXV0YXRlZDogXCIiICsga2V5ICsgIlwiIiwgdm0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSk7CiAgICB9IC8vIHN0YXRpYyBwcm9wcyBhcmUgYWxyZWFkeSBwcm94aWVkIG9uIHRoZSBjb21wb25lbnQncyBwcm90b3R5cGUKICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0CiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuCgoKICAgIGlmICghKGtleSBpbiB2bSkpIHsKICAgICAgcHJveHkodm0sICJfcHJvcHMiLCBrZXkpOwogICAgfQogIH07CgogIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIHsKICAgIGxvb3Aoa2V5KTsKICB9CgogIHRvZ2dsZU9ic2VydmluZyh0cnVlKTsKfQoKZnVuY3Rpb24gaW5pdERhdGEodm0pIHsKICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7CiAgZGF0YSA9IHZtLl9kYXRhID0gdHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicgPyBnZXREYXRhKGRhdGEsIHZtKSA6IGRhdGEgfHwge307CgogIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkgewogICAgZGF0YSA9IHt9OwogICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcbicgKyAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJywgdm0pOwogIH0gLy8gcHJveHkgZGF0YSBvbiBpbnN0YW5jZQoKCiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTsKICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wczsKICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7CiAgdmFyIGkgPSBrZXlzLmxlbmd0aDsKCiAgd2hpbGUgKGktLSkgewogICAgdmFyIGtleSA9IGtleXNbaV07CgogICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHsKICAgICAgICB3YXJuKCJNZXRob2QgXCIiICsga2V5ICsgIlwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuIiwgdm0pOwogICAgICB9CiAgICB9CgogICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkgewogICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oIlRoZSBkYXRhIHByb3BlcnR5IFwiIiArIGtleSArICJcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gIiArICJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuIiwgdm0pOwogICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7CiAgICAgIHByb3h5KHZtLCAiX2RhdGEiLCBrZXkpOwogICAgfQogIH0gLy8gb2JzZXJ2ZSBkYXRhCgoKICBvYnNlcnZlKGRhdGEsIHRydWUKICAvKiBhc1Jvb3REYXRhICovCiAgKTsKfQoKZnVuY3Rpb24gZ2V0RGF0YShkYXRhLCB2bSkgewogIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBkYXRhIGdldHRlcnMKICBwdXNoVGFyZ2V0KCk7CgogIHRyeSB7CiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSk7CiAgfSBjYXRjaCAoZSkgewogICAgaGFuZGxlRXJyb3IoZSwgdm0sICJkYXRhKCkiKTsKICAgIHJldHVybiB7fTsKICB9IGZpbmFsbHkgewogICAgcG9wVGFyZ2V0KCk7CiAgfQp9Cgp2YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsKICBsYXp5OiB0cnVlCn07CgpmdW5jdGlvbiBpbml0Q29tcHV0ZWQodm0sIGNvbXB1dGVkKSB7CiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lCiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUgoKICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpOwoKICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHsKICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTsKICAgIHZhciBnZXR0ZXIgPSB0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJyA/IHVzZXJEZWYgOiB1c2VyRGVmLmdldDsKCiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBnZXR0ZXIgPT0gbnVsbCkgewogICAgICB3YXJuKCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXCIiICsga2V5ICsgIlwiLiIsIHZtKTsKICAgIH0KCiAgICBpZiAoIWlzU1NSKSB7CiAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuCiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcih2bSwgZ2V0dGVyIHx8IG5vb3AsIG5vb3AsIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMpOwogICAgfSAvLyBjb21wb25lbnQtZGVmaW5lZCBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBhbHJlYWR5IGRlZmluZWQgb24gdGhlCiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZAogICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLgoKCiAgICBpZiAoIShrZXkgaW4gdm0pKSB7CiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpOwogICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHsKICAgICAgICB3YXJuKCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXCIiICsga2V5ICsgIlwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLiIsIHZtKTsKICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHsKICAgICAgICB3YXJuKCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXCIiICsga2V5ICsgIlwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuIiwgdm0pOwogICAgICB9CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBkZWZpbmVDb21wdXRlZCh0YXJnZXQsIGtleSwgdXNlckRlZikgewogIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpOwoKICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHsKICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZSA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSkgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpOwogICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7CiAgfSBlbHNlIHsKICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldCA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KSA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZi5nZXQpIDogbm9vcDsKICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldCB8fCBub29wOwogIH0KCiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkgewogICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHsKICAgICAgd2FybigiQ29tcHV0ZWQgcHJvcGVydHkgXCIiICsga2V5ICsgIlwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci4iLCB0aGlzKTsKICAgIH07CiAgfQoKICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7Cn0KCmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSkgewogIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlcigpIHsKICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07CgogICAgaWYgKHdhdGNoZXIpIHsKICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHsKICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7CiAgICAgIH0KCiAgICAgIGlmIChEZXAudGFyZ2V0KSB7CiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWU7CiAgICB9CiAgfTsKfQoKZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikgewogIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlcigpIHsKICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpOwogIH07Cn0KCmZ1bmN0aW9uIGluaXRNZXRob2RzKHZtLCBtZXRob2RzKSB7CiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7CgogIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7CiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHdhcm4oIk1ldGhvZCBcIiIgKyBrZXkgKyAiXCIgaGFzIHR5cGUgXCIiICsgX3R5cGVvZihtZXRob2RzW2tleV0pICsgIlwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gIiArICJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5PyIsIHZtKTsKICAgICAgfQoKICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkgewogICAgICAgIHdhcm4oIk1ldGhvZCBcIiIgKyBrZXkgKyAiXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC4iLCB2bSk7CiAgICAgIH0KCiAgICAgIGlmIChrZXkgaW4gdm0gJiYgaXNSZXNlcnZlZChrZXkpKSB7CiAgICAgICAgd2FybigiTWV0aG9kIFwiIiArIGtleSArICJcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiAiICsgIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuIik7CiAgICAgIH0KICAgIH0KCiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pOwogIH0KfQoKZnVuY3Rpb24gaW5pdFdhdGNoKHZtLCB3YXRjaCkgewogIGZvciAodmFyIGtleSBpbiB3YXRjaCkgewogICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldOwoKICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykgewogICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKSB7CiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHsKICAgIG9wdGlvbnMgPSBoYW5kbGVyOwogICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjsKICB9CgogIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHsKICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTsKICB9CgogIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucyk7Cn0KCmZ1bmN0aW9uIHN0YXRlTWl4aW4oVnVlKSB7CiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0CiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwCiAgLy8gdGhlIG9iamVjdCBoZXJlLgogIHZhciBkYXRhRGVmID0ge307CgogIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2RhdGE7CiAgfTsKCiAgdmFyIHByb3BzRGVmID0ge307CgogIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl9wcm9wczsKICB9OwoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHdhcm4oJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICsgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJywgdGhpcyk7CiAgICB9OwoKICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHsKICAgICAgd2FybigiJHByb3BzIGlzIHJlYWRvbmx5LiIsIHRoaXMpOwogICAgfTsKICB9CgogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTsKICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7CiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsOwoKICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChleHBPckZuLCBjYiwgb3B0aW9ucykgewogICAgdmFyIHZtID0gdGhpczsKCiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHsKICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTsKICAgIH0KCiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgIG9wdGlvbnMudXNlciA9IHRydWU7CiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7CgogICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIHZtLCAiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFwiIiArIHdhdGNoZXIuZXhwcmVzc2lvbiArICJcIiIpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbigpIHsKICAgICAgd2F0Y2hlci50ZWFyZG93bigpOwogICAgfTsKICB9Owp9Ci8qICAqLwoKCnZhciB1aWQkMyA9IDA7CgpmdW5jdGlvbiBpbml0TWl4aW4oVnVlKSB7CiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICB2YXIgdm0gPSB0aGlzOyAvLyBhIHVpZAoKICAgIHZtLl91aWQgPSB1aWQkMysrOwogICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KCiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykgewogICAgICBzdGFydFRhZyA9ICJ2dWUtcGVyZi1zdGFydDoiICsgdm0uX3VpZDsKICAgICAgZW5kVGFnID0gInZ1ZS1wZXJmLWVuZDoiICsgdm0uX3VpZDsKICAgICAgbWFyayhzdGFydFRhZyk7CiAgICB9IC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkCgoKICAgIHZtLl9pc1Z1ZSA9IHRydWU7IC8vIG1lcmdlIG9wdGlvbnMKCiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkgewogICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvbgogICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlCiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LgogICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpOwogICAgfSBlbHNlIHsKICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMocmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksIG9wdGlvbnMgfHwge30sIHZtKTsKICAgIH0KICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovCgoKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgIGluaXRQcm94eSh2bSk7CiAgICB9IGVsc2UgewogICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTsKICAgIH0gLy8gZXhwb3NlIHJlYWwgc2VsZgoKCiAgICB2bS5fc2VsZiA9IHZtOwogICAgaW5pdExpZmVjeWNsZSh2bSk7CiAgICBpbml0RXZlbnRzKHZtKTsKICAgIGluaXRSZW5kZXIodm0pOwogICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTsKICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzCgogICAgaW5pdFN0YXRlKHZtKTsKICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHMKCiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTsKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7CiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpOwogICAgICBtYXJrKGVuZFRhZyk7CiAgICAgIG1lYXN1cmUoInZ1ZSAiICsgdm0uX25hbWUgKyAiIGluaXQiLCBzdGFydFRhZywgZW5kVGFnKTsKICAgIH0KCiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHsKICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTsKICAgIH0KICB9Owp9CgpmdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpIHsKICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTsgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi4KCiAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7CiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDsKICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlOwogIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zOwogIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTsKICBvcHRzLl9wYXJlbnRMaXN0ZW5lcnMgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzOwogIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuOwogIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7CgogIGlmIChvcHRpb25zLnJlbmRlcikgewogICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjsKICAgIG9wdHMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7CiAgfQp9CgpmdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpIHsKICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9uczsKCiAgaWYgKEN0b3JbInN1cGVyIl0pIHsKICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3JbInN1cGVyIl0pOwogICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zOwoKICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykgewogICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZCwKICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLgogICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9uczsgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBsYXRlLW1vZGlmaWVkL2F0dGFjaGVkIG9wdGlvbnMgKCM0OTc2KQoKICAgICAgdmFyIG1vZGlmaWVkT3B0aW9ucyA9IHJlc29sdmVNb2RpZmllZE9wdGlvbnMoQ3Rvcik7IC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zCgogICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7CiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTsKICAgICAgfQoKICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIEN0b3IuZXh0ZW5kT3B0aW9ucyk7CgogICAgICBpZiAob3B0aW9ucy5uYW1lKSB7CiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yOwogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4gb3B0aW9uczsKfQoKZnVuY3Rpb24gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKSB7CiAgdmFyIG1vZGlmaWVkOwogIHZhciBsYXRlc3QgPSBDdG9yLm9wdGlvbnM7CiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9uczsKCiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkgewogICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkgewogICAgICBpZiAoIW1vZGlmaWVkKSB7CiAgICAgICAgbW9kaWZpZWQgPSB7fTsKICAgICAgfQoKICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldOwogICAgfQogIH0KCiAgcmV0dXJuIG1vZGlmaWVkOwp9CgpmdW5jdGlvbiBWdWUob3B0aW9ucykgewogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSkpIHsKICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTsKICB9CgogIHRoaXMuX2luaXQob3B0aW9ucyk7Cn0KCmluaXRNaXhpbihWdWUpOwpzdGF0ZU1peGluKFZ1ZSk7CmV2ZW50c01peGluKFZ1ZSk7CmxpZmVjeWNsZU1peGluKFZ1ZSk7CnJlbmRlck1peGluKFZ1ZSk7Ci8qICAqLwoKZnVuY3Rpb24gaW5pdFVzZShWdWUpIHsKICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikgewogICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSB0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pOwoKICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnMKCgogICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7CiAgICBhcmdzLnVuc2hpZnQodGhpcyk7CgogICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpOwogICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTsKICAgIH0KCiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTsKICAgIHJldHVybiB0aGlzOwogIH07Cn0KLyogICovCgoKZnVuY3Rpb24gaW5pdE1peGluJDEoVnVlKSB7CiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7CiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7CiAgICByZXR1cm4gdGhpczsKICB9Owp9Ci8qICAqLwoKCmZ1bmN0aW9uIGluaXRFeHRlbmQoVnVlKSB7CiAgLyoqCiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlCiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgImNoaWxkCiAgICogY29uc3RydWN0b3JzIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS4KICAgKi8KICBWdWUuY2lkID0gMDsKICB2YXIgY2lkID0gMTsKICAvKioKICAgKiBDbGFzcyBpbmhlcml0YW5jZQogICAqLwoKICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHsKICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9OwogICAgdmFyIFN1cGVyID0gdGhpczsKICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkOwogICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTsKCiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHsKICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdOwogICAgfQoKICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTsKCiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lKSB7CiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTsKICAgIH0KCiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50KG9wdGlvbnMpIHsKICAgICAgdGhpcy5faW5pdChvcHRpb25zKTsKICAgIH07CgogICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTsKICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7CiAgICBTdWIuY2lkID0gY2lkKys7CiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhTdXBlci5vcHRpb25zLCBleHRlbmRPcHRpb25zKTsKICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyOyAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvbgogICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXMKICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC4KCiAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHsKICAgICAgaW5pdFByb3BzJDEoU3ViKTsKICAgIH0KCiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHsKICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTsKICAgIH0gLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlCgoKICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7CiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjsKICAgIFN1Yi51c2UgPSBTdXBlci51c2U7IC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXMKICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby4KCiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7CiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdOwogICAgfSk7IC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXAKCiAgICBpZiAobmFtZSkgewogICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViOwogICAgfSAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLgogICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmUKICAgIC8vIGJlZW4gdXBkYXRlZC4KCgogICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7CiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7CiAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpOyAvLyBjYWNoZSBjb25zdHJ1Y3RvcgoKICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViOwogICAgcmV0dXJuIFN1YjsKICB9Owp9CgpmdW5jdGlvbiBpbml0UHJvcHMkMShDb21wKSB7CiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzOwoKICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHsKICAgIHByb3h5KENvbXAucHJvdG90eXBlLCAiX3Byb3BzIiwga2V5KTsKICB9Cn0KCmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxKENvbXApIHsKICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7CgogIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkgewogICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7CiAgfQp9Ci8qICAqLwoKCmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpIHsKICAvKioKICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuCiAgICovCiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkgewogICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKGlkLCBkZWZpbml0aW9uKSB7CiAgICAgIGlmICghZGVmaW5pdGlvbikgewogICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdOwogICAgICB9IGVsc2UgewogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGUgPT09ICdjb21wb25lbnQnKSB7CiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHsKICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDsKICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pOwogICAgICAgIH0KCiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBkZWZpbml0aW9uID0gewogICAgICAgICAgICBiaW5kOiBkZWZpbml0aW9uLAogICAgICAgICAgICB1cGRhdGU6IGRlZmluaXRpb24KICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjsKICAgICAgICByZXR1cm4gZGVmaW5pdGlvbjsKICAgICAgfQogICAgfTsKICB9KTsKfQovKiAgKi8KCgpmdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKG9wdHMpIHsKICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyk7Cn0KCmZ1bmN0aW9uIG1hdGNoZXMocGF0dGVybiwgbmFtZSkgewogIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7CiAgICByZXR1cm4gcGF0dGVybi5pbmRleE9mKG5hbWUpID4gLTE7CiAgfSBlbHNlIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHsKICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xOwogIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHsKICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSk7CiAgfQogIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgoKICByZXR1cm4gZmFsc2U7Cn0KCmZ1bmN0aW9uIHBydW5lQ2FjaGUoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikgewogIHZhciBjYWNoZSA9IGtlZXBBbGl2ZUluc3RhbmNlLmNhY2hlOwogIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5czsKICB2YXIgX3Zub2RlID0ga2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlOwoKICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHsKICAgIHZhciBjYWNoZWROb2RlID0gY2FjaGVba2V5XTsKCiAgICBpZiAoY2FjaGVkTm9kZSkgewogICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTsKCiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHsKICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleSwga2V5cywgX3Zub2RlKTsKICAgICAgfQogICAgfQogIH0KfQoKZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIGN1cnJlbnQpIHsKICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTsKCiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7CiAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTsKICB9CgogIGNhY2hlW2tleV0gPSBudWxsOwogIHJlbW92ZShrZXlzLCBrZXkpOwp9Cgp2YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07CnZhciBLZWVwQWxpdmUgPSB7CiAgbmFtZTogJ2tlZXAtYWxpdmUnLAogICJhYnN0cmFjdCI6IHRydWUsCiAgcHJvcHM6IHsKICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcywKICAgIGV4Y2x1ZGU6IHBhdHRlcm5UeXBlcywKICAgIG1heDogW1N0cmluZywgTnVtYmVyXQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgdGhpcy5rZXlzID0gW107CiAgfSwKICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCgpIHsKICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhY2hlKSB7CiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzLmNhY2hlLCBrZXksIHRoaXMua2V5cyk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIHRoaXMkMSA9IHRoaXM7CiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgcmV0dXJuIG1hdGNoZXModmFsLCBuYW1lKTsKICAgICAgfSk7CiAgICB9KTsKICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkgewogICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsKICAgICAgfSk7CiAgICB9KTsKICB9LAogIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90c1siZGVmYXVsdCJdOwogICAgdmFyIHZub2RlID0gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChzbG90KTsKICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9uczsKCiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykgewogICAgICAvLyBjaGVjayBwYXR0ZXJuCiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTsKICAgICAgdmFyIHJlZiA9IHRoaXM7CiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7CiAgICAgIHZhciBleGNsdWRlID0gcmVmLmV4Y2x1ZGU7CgogICAgICBpZiAoIC8vIG5vdCBpbmNsdWRlZAogICAgICBpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkgfHwgLy8gZXhjbHVkZWQKICAgICAgZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpIHsKICAgICAgICByZXR1cm4gdm5vZGU7CiAgICAgIH0KCiAgICAgIHZhciByZWYkMSA9IHRoaXM7CiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlOwogICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7CiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbCAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50cwogICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpCiAgICAgID8gY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArIChjb21wb25lbnRPcHRpb25zLnRhZyA/ICI6OiIgKyBjb21wb25lbnRPcHRpb25zLnRhZyA6ICcnKSA6IHZub2RlLmtleTsKCiAgICAgIGlmIChjYWNoZVtrZXldKSB7CiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlOyAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0CgogICAgICAgIHJlbW92ZShrZXlzLCBrZXkpOwogICAgICAgIGtleXMucHVzaChrZXkpOwogICAgICB9IGVsc2UgewogICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTsKICAgICAgICBrZXlzLnB1c2goa2V5KTsgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5CgogICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkgewogICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXlzWzBdLCBrZXlzLCB0aGlzLl92bm9kZSk7CiAgICAgICAgfQogICAgICB9CgogICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7CiAgICB9CgogICAgcmV0dXJuIHZub2RlIHx8IHNsb3QgJiYgc2xvdFswXTsKICB9Cn07CnZhciBidWlsdEluQ29tcG9uZW50cyA9IHsKICBLZWVwQWxpdmU6IEtlZXBBbGl2ZQp9OwovKiAgKi8KCmZ1bmN0aW9uIGluaXRHbG9iYWxBUEkoVnVlKSB7CiAgLy8gY29uZmlnCiAgdmFyIGNvbmZpZ0RlZiA9IHt9OwoKICBjb25maWdEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNvbmZpZzsKICB9OwoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHsKICAgICAgd2FybignRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nKTsKICAgIH07CiAgfQoKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTsgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuCiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uCiAgLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay4KCiAgVnVlLnV0aWwgPSB7CiAgICB3YXJuOiB3YXJuLAogICAgZXh0ZW5kOiBleHRlbmQsCiAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucywKICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMQogIH07CiAgVnVlLnNldCA9IHNldDsKICBWdWVbImRlbGV0ZSJdID0gZGVsOwogIFZ1ZS5uZXh0VGljayA9IG5leHRUaWNrOyAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUEkKCiAgVnVlLm9ic2VydmFibGUgPSBmdW5jdGlvbiAob2JqKSB7CiAgICBvYnNlcnZlKG9iaik7CiAgICByZXR1cm4gb2JqOwogIH07CgogIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7CiAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgfSk7IC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgImJhc2UiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0CiAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuCgogIFZ1ZS5vcHRpb25zLl9iYXNlID0gVnVlOwogIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7CiAgaW5pdFVzZShWdWUpOwogIGluaXRNaXhpbiQxKFZ1ZSk7CiAgaW5pdEV4dGVuZChWdWUpOwogIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpOwp9Cgppbml0R2xvYmFsQVBJKFZ1ZSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywgewogIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmcKfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7CiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQ7CiAgfQp9KTsgLy8gZXhwb3NlIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IGZvciBzc3IgcnVudGltZSBoZWxwZXIgaW5zdGFsbGF0aW9uCgpPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnRnVuY3Rpb25hbFJlbmRlckNvbnRleHQnLCB7CiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0Cn0pOwpWdWUudmVyc2lvbiA9ICcyLjYuMTInOwovKiAgKi8KLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5Ci8vIGR1cmluZyB0ZW1wbGF0ZSBjb21waWxhdGlvbgoKdmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTsgLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZwoKdmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzcycpOwoKdmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gbXVzdFVzZVByb3AodGFnLCB0eXBlLCBhdHRyKSB7CiAgcmV0dXJuIGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fCBhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicgfHwgYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JyB8fCBhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJzsKfTsKCnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7CnZhciBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUgPSBtYWtlTWFwKCdldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5Jyk7Cgp2YXIgY29udmVydEVudW1lcmF0ZWRWYWx1ZSA9IGZ1bmN0aW9uIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUoa2V5LCB2YWx1ZSkgewogIHJldHVybiBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJyA/ICdmYWxzZScgLy8gYWxsb3cgYXJiaXRyYXJ5IHN0cmluZyB2YWx1ZSBmb3IgY29udGVudGVkaXRhYmxlCiAgOiBrZXkgPT09ICdjb250ZW50ZWRpdGFibGUnICYmIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSh2YWx1ZSkgPyB2YWx1ZSA6ICd0cnVlJzsKfTsKCnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcCgnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICsgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICsgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgKyAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICsgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnKTsKdmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7Cgp2YXIgaXNYbGluayA9IGZ1bmN0aW9uIGlzWGxpbmsobmFtZSkgewogIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluayc7Cn07Cgp2YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gZ2V0WGxpbmtQcm9wKG5hbWUpIHsKICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJyc7Cn07Cgp2YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uIGlzRmFsc3lBdHRyVmFsdWUodmFsKSB7CiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2U7Cn07Ci8qICAqLwoKCmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpIHsKICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7CiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTsKICB2YXIgY2hpbGROb2RlID0gdm5vZGU7CgogIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7CiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlOwoKICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHsKICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTsKICAgIH0KICB9CgogIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7CiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHsKICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7CiAgICB9CiAgfQoKICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YVsiY2xhc3MiXSk7Cn0KCmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhKGNoaWxkLCBwYXJlbnQpIHsKICByZXR1cm4gewogICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSwKICAgICJjbGFzcyI6IGlzRGVmKGNoaWxkWyJjbGFzcyJdKSA/IFtjaGlsZFsiY2xhc3MiXSwgcGFyZW50WyJjbGFzcyJdXSA6IHBhcmVudFsiY2xhc3MiXQogIH07Cn0KCmZ1bmN0aW9uIHJlbmRlckNsYXNzKHN0YXRpY0NsYXNzLCBkeW5hbWljQ2xhc3MpIHsKICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHsKICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpOwogIH0KICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKCiAgcmV0dXJuICcnOwp9CgpmdW5jdGlvbiBjb25jYXQoYSwgYikgewogIHJldHVybiBhID8gYiA/IGEgKyAnICcgKyBiIDogYSA6IGIgfHwgJyc7Cn0KCmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzKHZhbHVlKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7CiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpOwogIH0KCiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkgewogICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSk7CiAgfQoKICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgewogICAgcmV0dXJuIHZhbHVlOwogIH0KICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKCiAgcmV0dXJuICcnOwp9CgpmdW5jdGlvbiBzdHJpbmdpZnlBcnJheSh2YWx1ZSkgewogIHZhciByZXMgPSAnJzsKICB2YXIgc3RyaW5naWZpZWQ7CgogIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykgewogICAgICBpZiAocmVzKSB7CiAgICAgICAgcmVzICs9ICcgJzsKICAgICAgfQoKICAgICAgcmVzICs9IHN0cmluZ2lmaWVkOwogICAgfQogIH0KCiAgcmV0dXJuIHJlczsKfQoKZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKSB7CiAgdmFyIHJlcyA9ICcnOwoKICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHsKICAgIGlmICh2YWx1ZVtrZXldKSB7CiAgICAgIGlmIChyZXMpIHsKICAgICAgICByZXMgKz0gJyAnOwogICAgICB9CgogICAgICByZXMgKz0ga2V5OwogICAgfQogIH0KCiAgcmV0dXJuIHJlczsKfQovKiAgKi8KCgp2YXIgbmFtZXNwYWNlTWFwID0gewogIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywKICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCcKfTsKdmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgKyAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgKyAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICsgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgKyAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgKyAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICsgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICsgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnKTsgLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5Ci8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuCgp2YXIgaXNTVkcgPSBtYWtlTWFwKCdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICsgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLCB0cnVlKTsKCnZhciBpc1Jlc2VydmVkVGFnID0gZnVuY3Rpb24gaXNSZXNlcnZlZFRhZyh0YWcpIHsKICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKTsKfTsKCmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSh0YWcpIHsKICBpZiAoaXNTVkcodGFnKSkgewogICAgcmV0dXJuICdzdmcnOwogIH0gLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MCiAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290cwoKCiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7CiAgICByZXR1cm4gJ21hdGgnOwogIH0KfQoKdmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpOwoKZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCh0YWcpIHsKICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICBpZiAoIWluQnJvd3NlcikgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTsKICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KCiAgaWYgKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSAhPSBudWxsKSB7CiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddOwogIH0KCiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpOwoKICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7CiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0CiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHwgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudDsKICB9IGVsc2UgewogICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IC9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSk7CiAgfQp9Cgp2YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTsKLyogICovCgovKioKICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuCiAqLwoKZnVuY3Rpb24gcXVlcnkoZWwpIHsKICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykgewogICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7CgogICAgaWYgKCFzZWxlY3RlZCkgewogICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbCk7CiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIH0KCiAgICByZXR1cm4gc2VsZWN0ZWQ7CiAgfSBlbHNlIHsKICAgIHJldHVybiBlbDsKICB9Cn0KLyogICovCgoKZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxKHRhZ05hbWUsIHZub2RlKSB7CiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7CgogIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0JykgewogICAgcmV0dXJuIGVsbTsKICB9IC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90CgoKICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkgewogICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTsKICB9CgogIHJldHVybiBlbG07Cn0KCmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIHRhZ05hbWUpIHsKICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKTsKfQoKZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUodGV4dCkgewogIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KTsKfQoKZnVuY3Rpb24gY3JlYXRlQ29tbWVudCh0ZXh0KSB7CiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dCk7Cn0KCmZ1bmN0aW9uIGluc2VydEJlZm9yZShwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7CiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7Cn0KCmZ1bmN0aW9uIHJlbW92ZUNoaWxkKG5vZGUsIGNoaWxkKSB7CiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7Cn0KCmZ1bmN0aW9uIGFwcGVuZENoaWxkKG5vZGUsIGNoaWxkKSB7CiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7Cn0KCmZ1bmN0aW9uIHBhcmVudE5vZGUobm9kZSkgewogIHJldHVybiBub2RlLnBhcmVudE5vZGU7Cn0KCmZ1bmN0aW9uIG5leHRTaWJsaW5nKG5vZGUpIHsKICByZXR1cm4gbm9kZS5uZXh0U2libGluZzsKfQoKZnVuY3Rpb24gdGFnTmFtZShub2RlKSB7CiAgcmV0dXJuIG5vZGUudGFnTmFtZTsKfQoKZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQobm9kZSwgdGV4dCkgewogIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0Owp9CgpmdW5jdGlvbiBzZXRTdHlsZVNjb3BlKG5vZGUsIHNjb3BlSWQpIHsKICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7Cn0KCnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoewogIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSwKICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUywKICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsCiAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCwKICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSwKICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsCiAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLAogIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsCiAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLAogIHRhZ05hbWU6IHRhZ05hbWUsCiAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LAogIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGUKfSk7Ci8qICAqLwoKdmFyIHJlZiA9IHsKICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShfLCB2bm9kZSkgewogICAgcmVnaXN0ZXJSZWYodm5vZGUpOwogIH0sCiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2xkVm5vZGUsIHZub2RlKSB7CiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7CiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTsKICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpOwogICAgfQogIH0sCiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSh2bm9kZSkgewogICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpOwogIH0KfTsKCmZ1bmN0aW9uIHJlZ2lzdGVyUmVmKHZub2RlLCBpc1JlbW92YWwpIHsKICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7CgogIGlmICghaXNEZWYoa2V5KSkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDsKICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtOwogIHZhciByZWZzID0gdm0uJHJlZnM7CgogIGlmIChpc1JlbW92YWwpIHsKICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHsKICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTsKICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHsKICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkOwogICAgfQogIH0gZWxzZSB7CiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikgewogICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkgewogICAgICAgIHJlZnNba2V5XSA9IFtyZWZdOwogICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7CiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lCiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgcmVmc1trZXldID0gcmVmOwogICAgfQogIH0KfQovKioKICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5CiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZCkKICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRQogKgogKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMykKICoKICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdAogKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC4KICovCgoKdmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTsKdmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107CgpmdW5jdGlvbiBzYW1lVm5vZGUoYSwgYikgewogIHJldHVybiBhLmtleSA9PT0gYi5rZXkgJiYgKGEudGFnID09PSBiLnRhZyAmJiBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiYgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJiBzYW1lSW5wdXRUeXBlKGEsIGIpIHx8IGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiYgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpKTsKfQoKZnVuY3Rpb24gc2FtZUlucHV0VHlwZShhLCBiKSB7CiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHZhciBpOwogIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7CiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTsKICByZXR1cm4gdHlwZUEgPT09IHR5cGVCIHx8IGlzVGV4dElucHV0VHlwZSh0eXBlQSkgJiYgaXNUZXh0SW5wdXRUeXBlKHR5cGVCKTsKfQoKZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHgoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHsKICB2YXIgaSwga2V5OwogIHZhciBtYXAgPSB7fTsKCiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHsKICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTsKCiAgICBpZiAoaXNEZWYoa2V5KSkgewogICAgICBtYXBba2V5XSA9IGk7CiAgICB9CiAgfQoKICByZXR1cm4gbWFwOwp9CgpmdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uKGJhY2tlbmQpIHsKICB2YXIgaSwgajsKICB2YXIgY2JzID0ge307CiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7CiAgdmFyIG5vZGVPcHMgPSBiYWNrZW5kLm5vZGVPcHM7CgogIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkgewogICAgY2JzW2hvb2tzW2ldXSA9IFtdOwoKICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7CiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHsKICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pOwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBlbXB0eU5vZGVBdChlbG0pIHsKICAgIHJldHVybiBuZXcgVk5vZGUobm9kZU9wcy50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSwge30sIFtdLCB1bmRlZmluZWQsIGVsbSk7CiAgfQoKICBmdW5jdGlvbiBjcmVhdGVSbUNiKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHsKICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSgpIHsKICAgICAgaWYgKC0tcmVtb3ZlJCQxLmxpc3RlbmVycyA9PT0gMCkgewogICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pOwogICAgICB9CiAgICB9CgogICAgcmVtb3ZlJCQxLmxpc3RlbmVycyA9IGxpc3RlbmVyczsKICAgIHJldHVybiByZW1vdmUkJDE7CiAgfQoKICBmdW5jdGlvbiByZW1vdmVOb2RlKGVsKSB7CiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTsgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0CgogICAgaWYgKGlzRGVmKHBhcmVudCkpIHsKICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGluVlByZSkgewogICAgcmV0dXJuICFpblZQcmUgJiYgIXZub2RlLm5zICYmICEoY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiYgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHsKICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSkgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpIDogaWdub3JlID09PSB2bm9kZS50YWc7CiAgICB9KSkgJiYgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKTsKICB9CgogIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7CgogIGZ1bmN0aW9uIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgbmVzdGVkLCBvd25lckFycmF5LCBpbmRleCkgewogICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHsKICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciEKICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlCiAgICAgIC8vIHBvdGVudGlhbCBwYXRjaCBlcnJvcnMgZG93biB0aGUgcm9hZCB3aGVuIGl0J3MgdXNlZCBhcyBhbiBpbnNlcnRpb24KICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmcKICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuCiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTsKICAgIH0KCiAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVjawoKICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7CiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjsKICAgIHZhciB0YWcgPSB2bm9kZS50YWc7CgogICAgaWYgKGlzRGVmKHRhZykpIHsKICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkgewogICAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUrKzsKICAgICAgICB9CgogICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHsKICAgICAgICAgIHdhcm4oJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgKyAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgIm5hbWUiIG9wdGlvbi4nLCB2bm9kZS5jb250ZXh0KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZykgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7CiAgICAgIHNldFNjb3BlKHZub2RlKTsKICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCgogICAgICB7CiAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpOwoKICAgICAgICBpZiAoaXNEZWYoZGF0YSkpIHsKICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpOwogICAgICAgIH0KCiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pOwogICAgICB9CgogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7CiAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUtLTsKICAgICAgfQogICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkgewogICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7CiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTsKICAgIH0gZWxzZSB7CiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7CiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkgewogICAgdmFyIGkgPSB2bm9kZS5kYXRhOwoKICAgIGlmIChpc0RlZihpKSkgewogICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTsKCiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgewogICAgICAgIGkodm5vZGUsIGZhbHNlCiAgICAgICAgLyogaHlkcmF0aW5nICovCiAgICAgICAgKTsKICAgICAgfSAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudAogICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGQKICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uCiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuCgoKICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkgewogICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7CiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pOwoKICAgICAgICBpZiAoaXNUcnVlKGlzUmVhY3RpdmF0ZWQpKSB7CiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHsKICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7CiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTsKICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDsKICAgIH0KCiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7CgogICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkgewogICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTsKICAgICAgc2V0U2NvcGUodm5vZGUpOwogICAgfSBlbHNlIHsKICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuCiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSkKICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpOyAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9vawoKICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkgewogICAgdmFyIGk7IC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb24KICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWQKICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dAogICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC4KCiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7CgogICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkgewogICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlOwoKICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpOwogICAgICAgIH0KCiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfSAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCwKICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmCgoKICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTsKICB9CgogIGZ1bmN0aW9uIGluc2VydChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7CiAgICBpZiAoaXNEZWYocGFyZW50KSkgewogICAgICBpZiAoaXNEZWYocmVmJCQxKSkgewogICAgICAgIGlmIChub2RlT3BzLnBhcmVudE5vZGUocmVmJCQxKSA9PT0gcGFyZW50KSB7CiAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmJCQxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7CiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHsKICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pOwogICAgICB9CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7CiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSwgY2hpbGRyZW4sIGkpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7CiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gaXNQYXRjaGFibGUodm5vZGUpIHsKICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgewogICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTsKICAgIH0KCiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKTsKICB9CgogIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHsKICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkgewogICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7CiAgICB9CgogICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGUKCiAgICBpZiAoaXNEZWYoaSkpIHsKICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgewogICAgICAgIGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOwogICAgICB9CgogICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7CiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOwogICAgICB9CiAgICB9CiAgfSAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLgogIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkCiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLgoKCiAgZnVuY3Rpb24gc2V0U2NvcGUodm5vZGUpIHsKICAgIHZhciBpOwoKICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkgewogICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlOwoKICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7CiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHsKICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpOwogICAgICAgIH0KCiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7CiAgICAgIH0KICAgIH0gLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLgoKCiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJiBpICE9PSB2bm9kZS5jb250ZXh0ICYmIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHsKICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7CiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7CiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayh2bm9kZSkgewogICAgdmFyIGksIGo7CiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7CgogICAgaWYgKGlzRGVmKGRhdGEpKSB7CiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgewogICAgICAgIGkodm5vZGUpOwogICAgICB9CgogICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsKICAgICAgICBjYnMuZGVzdHJveVtpXSh2bm9kZSk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkgewogICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHsKICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIHJlbW92ZVZub2Rlcyh2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHsKICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHsKICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTsKCiAgICAgIGlmIChpc0RlZihjaCkpIHsKICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkgewogICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7CiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIFRleHQgbm9kZQogICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayh2bm9kZSwgcm0pIHsKICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHsKICAgICAgdmFyIGk7CiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7CgogICAgICBpZiAoaXNEZWYocm0pKSB7CiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrCiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudAogICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmcKICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpOwogICAgICB9IC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlCgoKICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7CiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7CiAgICAgIH0KCiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7CiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pOwogICAgICB9CgogICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkgewogICAgICAgIGkodm5vZGUsIHJtKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBybSgpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbihwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7CiAgICB2YXIgb2xkU3RhcnRJZHggPSAwOwogICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDsKICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxOwogICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTsKICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07CiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTsKICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07CiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdOwogICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTsgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+CiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zCiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9ucwoKICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7CgogICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTsKICAgIH0KCiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkgewogICAgICBpZiAoaXNVbmRlZihvbGRTdGFydFZub2RlKSkgewogICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdAogICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7CiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07CiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7CiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7CiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOwogICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTsKICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkgewogICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpOwogICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdOwogICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdOwogICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsKICAgICAgICAvLyBWbm9kZSBtb3ZlZCByaWdodAogICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7CiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpOwogICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsKICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTsKICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7CiAgICAgICAgLy8gVm5vZGUgbW92ZWQgbGVmdAogICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTsKICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7CiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07CiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgewogICAgICAgICAgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7CiAgICAgICAgfQoKICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KSA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XSA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7CgogICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgewogICAgICAgICAgLy8gTmV3IGVsZW1lbnQKICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTsKCiAgICAgICAgICBpZiAoc2FtZVZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkgewogICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7CiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudAogICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTsKICAgICAgfQogICAgfQoKICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkgewogICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07CiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7CiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7CiAgICAgIHJlbW92ZVZub2RlcyhvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pIHsKICAgIHZhciBzZWVuS2V5cyA9IHt9OwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07CiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7CgogICAgICBpZiAoaXNEZWYoa2V5KSkgewogICAgICAgIGlmIChzZWVuS2V5c1trZXldKSB7CiAgICAgICAgICB3YXJuKCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJyIgKyBrZXkgKyAiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLiIsIHZub2RlLmNvbnRleHQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWVuS2V5c1trZXldID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGZpbmRJZHhJbk9sZChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkgewogICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHsKICAgICAgdmFyIGMgPSBvbGRDaFtpXTsKCiAgICAgIGlmIChpc0RlZihjKSAmJiBzYW1lVm5vZGUobm9kZSwgYykpIHsKICAgICAgICByZXR1cm4gaTsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgb3duZXJBcnJheSwgaW5kZXgsIHJlbW92ZU9ubHkpIHsKICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7CiAgICAgIC8vIGNsb25lIHJldXNlZCB2bm9kZQogICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7CiAgICB9CgogICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTsKCiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHsKICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHsKICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuOwogICAgfSAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuCiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC0KICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlbgogICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci4KCgogICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiYgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJiB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJiAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSkpIHsKICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBpOwogICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhOwoKICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHsKICAgICAgaShvbGRWbm9kZSwgdm5vZGUpOwogICAgfQoKICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuOwogICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47CgogICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkgewogICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgewogICAgICAgIGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsKICAgICAgfQoKICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsKICAgICAgICBpKG9sZFZub2RlLCB2bm9kZSk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkgewogICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkgewogICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsKICAgICAgICAgIHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHsKICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoKTsKICAgICAgICB9CgogICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgewogICAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTsKICAgICAgICB9CgogICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpOwogICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkgewogICAgICAgIHJlbW92ZVZub2RlcyhvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7CiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHsKICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHsKICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpOwogICAgfQoKICAgIGlmIChpc0RlZihkYXRhKSkgewogICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucG9zdHBhdGNoKSkgewogICAgICAgIGkob2xkVm5vZGUsIHZub2RlKTsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHsKICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZQogICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWQKICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkgewogICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7CiAgICB9IGVsc2UgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7CiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7CiAgICAgIH0KICAgIH0KICB9CgogIHZhciBoeWRyYXRpb25CYWlsZWQgPSBmYWxzZTsgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXkKICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvbgogIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZQogIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLgoKICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpOyAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLgoKICBmdW5jdGlvbiBoeWRyYXRlKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSB7CiAgICB2YXIgaTsKICAgIHZhciB0YWcgPSB2bm9kZS50YWc7CiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7CiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjsKICAgIGluVlByZSA9IGluVlByZSB8fCBkYXRhICYmIGRhdGEucHJlOwogICAgdm5vZGUuZWxtID0gZWxtOwoKICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7CiAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSAvLyBhc3NlcnQgbm9kZSBtYXRjaAoKCiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICBpZiAoIWFzc2VydE5vZGVNYXRjaChlbG0sIHZub2RlLCBpblZQcmUpKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CgogICAgaWYgKGlzRGVmKGRhdGEpKSB7CiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgewogICAgICAgIGkodm5vZGUsIHRydWUKICAgICAgICAvKiBoeWRyYXRpbmcgKi8KICAgICAgICApOwogICAgICB9CgogICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkgewogICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLgogICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoaXNEZWYodGFnKSkgewogICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7CiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuCiAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7CiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIHYtaHRtbCBhbmQgZG9tUHJvcHM6IGlubmVySFRNTAogICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkgewogICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkgewogICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiAhaHlkcmF0aW9uQmFpbGVkKSB7CiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3NlcnZlciBpbm5lckhUTUw6ICcsIGkpOwogICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjbGllbnQgaW5uZXJIVE1MOiAnLCBlbG0uaW5uZXJIVE1MKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gaXRlcmF0ZSBhbmQgY29tcGFyZSBjaGlsZHJlbiBsaXN0cwogICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7CiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDsKCiAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHsKICAgICAgICAgICAgICBpZiAoIWNoaWxkTm9kZSB8fCAhaHlkcmF0ZShjaGlsZE5vZGUsIGNoaWxkcmVuW2kkMV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSkgewogICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7CiAgICAgICAgICAgIH0gLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpcwogICAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LgoKCiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHsKICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgIWh5ZHJhdGlvbkJhaWxlZCkgewogICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pOwogICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChpc0RlZihkYXRhKSkgewogICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7CgogICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7CiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkgewogICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTsKICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHsKICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzCiAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHsKICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0OwogICAgfQoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoKG5vZGUsIHZub2RlLCBpblZQcmUpIHsKICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7CiAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8ICFpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBpblZQcmUpICYmIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpOwogICAgfQogIH0KCiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7CiAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHsKICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgewogICAgICAgIGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsKICAgICAgfQoKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlOwogICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdOwoKICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkgewogICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50CiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTsKICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7CgogICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHsKICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGUKICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkgewogICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnQKICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtCiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLgogICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHsKICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTsKICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHsKICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7CiAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTsKICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgICAgICAgIHdhcm4oJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICsgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgKyAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgKyAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgKyAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuCiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdAoKCiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTsKICAgICAgICB9IC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50CgoKICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtOwogICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTsgLy8gY3JlYXRlIG5ldyBub2RlCgogICAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYQogICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gKwogICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApCiAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pKTsgLy8gdXBkYXRlIHBhcmVudCBwbGFjZWhvbGRlciBub2RlIGVsZW1lbnQsIHJlY3Vyc2l2ZWx5CgogICAgICAgIGlmIChpc0RlZih2bm9kZS5wYXJlbnQpKSB7CiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7CiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpOwoKICAgICAgICAgIHdoaWxlIChhbmNlc3RvcikgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07CgogICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7CiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7CiAgICAgICAgICAgICAgfSAvLyAjNjUxMwogICAgICAgICAgICAgIC8vIGludm9rZSBpbnNlcnQgaG9va3MgdGhhdCBtYXkgaGF2ZSBiZWVuIG1lcmdlZCBieSBjcmVhdGUgaG9va3MuCiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlICJpbnNlcnRlZCIgaG9vay4KCgogICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0OwoKICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkgewogICAgICAgICAgICAgICAgLy8gc3RhcnQgYXQgaW5kZXggMSB0byBhdm9pZCByZS1pbnZva2luZyBjb21wb25lbnQgbW91bnRlZCBob29rCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHsKICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJlZ2lzdGVyUmVmKGFuY2VzdG9yKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7CiAgICAgICAgICB9CiAgICAgICAgfSAvLyBkZXN0cm95IG9sZCBub2RlCgoKICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkgewogICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApOwogICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkgewogICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaXNJbml0aWFsUGF0Y2gpOwogICAgcmV0dXJuIHZub2RlLmVsbTsKICB9Owp9Ci8qICAqLwoKCnZhciBkaXJlY3RpdmVzID0gewogIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcywKICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsCiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyh2bm9kZSkgewogICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTsKICB9Cn07CgpmdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzKG9sZFZub2RlLCB2bm9kZSkgewogIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7CiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7CiAgfQp9CgpmdW5jdGlvbiBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSkgewogIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7CiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7CiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTsKICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpOwogIHZhciBkaXJzV2l0aEluc2VydCA9IFtdOwogIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdOwogIHZhciBrZXksIG9sZERpciwgZGlyOwoKICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7CiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07CiAgICBkaXIgPSBuZXdEaXJzW2tleV07CgogICAgaWYgKCFvbGREaXIpIHsKICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZAogICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpOwoKICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkgewogICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGUKICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlOwogICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZzsKICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpOwoKICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7CiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpOwogICAgICB9CiAgICB9CiAgfQoKICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7CiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uIGNhbGxJbnNlcnQoKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHsKICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpOwogICAgICB9CiAgICB9OwoKICAgIGlmIChpc0NyZWF0ZSkgewogICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpOwogICAgfSBlbHNlIHsKICAgICAgY2FsbEluc2VydCgpOwogICAgfQogIH0KCiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkgewogICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHsKICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgaWYgKCFpc0NyZWF0ZSkgewogICAgZm9yIChrZXkgaW4gb2xkRGlycykgewogICAgICBpZiAoIW5ld0RpcnNba2V5XSkgewogICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmQKICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTsKICAgICAgfQogICAgfQogIH0KfQoKdmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKCmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShkaXJzLCB2bSkgewogIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwoKICBpZiAoIWRpcnMpIHsKICAgIC8vICRmbG93LWRpc2FibGUtbGluZQogICAgcmV0dXJuIHJlczsKICB9CgogIHZhciBpLCBkaXI7CgogIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7CiAgICBkaXIgPSBkaXJzW2ldOwoKICAgIGlmICghZGlyLm1vZGlmaWVycykgewogICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzOwogICAgfQoKICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyOwogICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7CiAgfSAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKCgogIHJldHVybiByZXM7Cn0KCmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUoZGlyKSB7CiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8IGRpci5uYW1lICsgIi4iICsgT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpOwp9CgpmdW5jdGlvbiBjYWxsSG9vayQxKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHsKICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107CgogIGlmIChmbikgewogICAgdHJ5IHsKICAgICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgImRpcmVjdGl2ZSAiICsgZGlyLm5hbWUgKyAiICIgKyBob29rICsgIiBob29rIik7CiAgICB9CiAgfQp9Cgp2YXIgYmFzZU1vZHVsZXMgPSBbcmVmLCBkaXJlY3RpdmVzXTsKLyogICovCgpmdW5jdGlvbiB1cGRhdGVBdHRycyhvbGRWbm9kZSwgdm5vZGUpIHsKICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7CgogIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7CiAgICByZXR1cm47CiAgfQoKICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7CiAgICByZXR1cm47CiAgfQoKICB2YXIga2V5LCBjdXIsIG9sZDsKICB2YXIgZWxtID0gdm5vZGUuZWxtOwogIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307CiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTsgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0CgogIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7CiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTsKICB9CgogIGZvciAoa2V5IGluIGF0dHJzKSB7CiAgICBjdXIgPSBhdHRyc1trZXldOwogICAgb2xkID0gb2xkQXR0cnNba2V5XTsKCiAgICBpZiAob2xkICE9PSBjdXIpIHsKICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTsKICAgIH0KICB9IC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dCiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heAoKICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KCgogIGlmICgoaXNJRSB8fCBpc0VkZ2UpICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkgewogICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTsKICB9CgogIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7CiAgICBpZiAoaXNVbmRlZihhdHRyc1trZXldKSkgewogICAgICBpZiAoaXNYbGluayhrZXkpKSB7CiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTsKICAgICAgfSBlbHNlIGlmICghaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7CiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpOwogICAgICB9CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBzZXRBdHRyKGVsLCBrZXksIHZhbHVlKSB7CiAgaWYgKGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHsKICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTsKICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkgewogICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWUKICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+CiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHsKICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7CiAgICB9IGVsc2UgewogICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sCiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgInRydWUiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZwogICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJyA/ICd0cnVlJyA6IGtleTsKICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpOwogICAgfQogIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7CiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSwgdmFsdWUpKTsKICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkgewogICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7CiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTsKICAgIH0gZWxzZSB7CiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpOwogICAgfQogIH0gZWxzZSB7CiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7CiAgfQp9CgpmdW5jdGlvbiBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSkgewogIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkgewogICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7CiAgfSBlbHNlIHsKICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uCiAgICAvLyA8dGV4dGFyZWE+Li4uIGJsb2NrIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhbmQgcmVtb3ZlIHRoZSBibG9ja2VyCiAgICAvLyBpbW1lZGlhdGVseS4KCiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgIGlmIChpc0lFICYmICFpc0lFOSAmJiBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmIGtleSA9PT0gJ3BsYWNlaG9sZGVyJyAmJiB2YWx1ZSAhPT0gJycgJiYgIWVsLl9faWVwaCkgewogICAgICB2YXIgYmxvY2tlciA9IGZ1bmN0aW9uIGJsb2NrZXIoZSkgewogICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTsKICAgICAgfTsKCiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7IC8vICRmbG93LWRpc2FibGUtbGluZQoKICAgICAgZWwuX19pZXBoID0gdHJ1ZTsKICAgICAgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqLwogICAgfQoKICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTsKICB9Cn0KCnZhciBhdHRycyA9IHsKICBjcmVhdGU6IHVwZGF0ZUF0dHJzLAogIHVwZGF0ZTogdXBkYXRlQXR0cnMKfTsKLyogICovCgpmdW5jdGlvbiB1cGRhdGVDbGFzcyhvbGRWbm9kZSwgdm5vZGUpIHsKICB2YXIgZWwgPSB2bm9kZS5lbG07CiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhOwogIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTsKCiAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiYgaXNVbmRlZihkYXRhWyJjbGFzcyJdKSAmJiAoaXNVbmRlZihvbGREYXRhKSB8fCBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmIGlzVW5kZWYob2xkRGF0YVsiY2xhc3MiXSkpKSB7CiAgICByZXR1cm47CiAgfQoKICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7IC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXMKCiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlczsKCiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHsKICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpOwogIH0gLy8gc2V0IHRoZSBjbGFzcwoKCiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykgewogICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7CiAgICBlbC5fcHJldkNsYXNzID0gY2xzOwogIH0KfQoKdmFyIGtsYXNzID0gewogIGNyZWF0ZTogdXBkYXRlQ2xhc3MsCiAgdXBkYXRlOiB1cGRhdGVDbGFzcwp9OwovKiAgKi8KCi8qICAqLwoKLyogICovCgovKiAgKi8KLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZQovLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLgoKdmFyIFJBTkdFX1RPS0VOID0gJ19fcic7CnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnOwovKiAgKi8KLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLgovLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlCi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmUKLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy4KCmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyhvbikgewogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7CiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50CiAgICB2YXIgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnOwogICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTsKICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07CiAgfSAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeQogIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjQKCiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCgoKICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkgewogICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTsKICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07CiAgfQp9Cgp2YXIgdGFyZ2V0JDE7CgpmdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciQxKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7CiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmUKCiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKCkgewogICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKCiAgICBpZiAocmVzICE9PSBudWxsKSB7CiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7CiAgICB9CiAgfTsKfSAvLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcAovLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvCi8vIHNhZmUgdG8gZXhjbHVkZS4KCgp2YXIgdXNlTWljcm90YXNrRml4ID0gaXNVc2luZ01pY3JvVGFzayAmJiAhKGlzRkYgJiYgTnVtYmVyKGlzRkZbMV0pIDw9IDUzKTsKCmZ1bmN0aW9uIGFkZCQxKG5hbWUsIGhhbmRsZXIsIGNhcHR1cmUsIHBhc3NpdmUpIHsKICAvLyBhc3luYyBlZGdlIGNhc2UgIzY1NjY6IGlubmVyIGNsaWNrIGV2ZW50IHRyaWdnZXJzIHBhdGNoLCBldmVudCBoYW5kbGVyCiAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXMKICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi4KICAvLyB0aGUgc29sdXRpb24gaXMgc2ltcGxlOiB3ZSBzYXZlIHRoZSB0aW1lc3RhbXAgd2hlbiBhIGhhbmRsZXIgaXMgYXR0YWNoZWQsCiAgLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZAogIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC4KICBpZiAodXNlTWljcm90YXNrRml4KSB7CiAgICB2YXIgYXR0YWNoZWRUaW1lc3RhbXAgPSBjdXJyZW50Rmx1c2hUaW1lc3RhbXA7CiAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyOwoKICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7CiAgICAgIGlmICggLy8gbm8gYnViYmxpbmcsIHNob3VsZCBhbHdheXMgZmlyZS4KICAgICAgLy8gdGhpcyBpcyBqdXN0IGEgc2FmZXR5IG5ldCBpbiBjYXNlIGV2ZW50LnRpbWVTdGFtcCBpcyB1bnJlbGlhYmxlIGluCiAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uCiAgICAgIGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQgfHwgLy8gZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgaGFuZGxlciBhdHRhY2htZW50CiAgICAgIGUudGltZVN0YW1wID49IGF0dGFjaGVkVGltZXN0YW1wIHx8IC8vIGJhaWwgZm9yIGVudmlyb25tZW50cyB0aGF0IGhhdmUgYnVnZ3kgZXZlbnQudGltZVN0YW1wIGltcGxlbWVudGF0aW9ucwogICAgICAvLyAjOTQ2MiBpT1MgOSBidWc6IGV2ZW50LnRpbWVTdGFtcCBpcyAwIGFmdGVyIGhpc3RvcnkucHVzaFN0YXRlCiAgICAgIC8vICM5NjgxIFF0V2ViRW5naW5lIGV2ZW50LnRpbWVTdGFtcCBpcyBuZWdhdGl2ZSB2YWx1ZQogICAgICBlLnRpbWVTdGFtcCA8PSAwIHx8IC8vICM5NDQ4IGJhaWwgaWYgZXZlbnQgaXMgZmlyZWQgaW4gYW5vdGhlciBkb2N1bWVudCBpbiBhIG11bHRpLXBhZ2UKICAgICAgLy8gZWxlY3Ryb24vbncuanMgYXBwLCBzaW5jZSBldmVudC50aW1lU3RhbXAgd2lsbCBiZSB1c2luZyBhIGRpZmZlcmVudAogICAgICAvLyBzdGFydGluZyByZWZlcmVuY2UKICAgICAgZS50YXJnZXQub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQpIHsKICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQogICAgfTsKICB9CgogIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgaGFuZGxlciwgc3VwcG9ydHNQYXNzaXZlID8gewogICAgY2FwdHVyZTogY2FwdHVyZSwKICAgIHBhc3NpdmU6IHBhc3NpdmUKICB9IDogY2FwdHVyZSk7Cn0KCmZ1bmN0aW9uIHJlbW92ZSQyKG5hbWUsIGhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpIHsKICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyLl93cmFwcGVyIHx8IGhhbmRsZXIsIGNhcHR1cmUpOwp9CgpmdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMob2xkVm5vZGUsIHZub2RlKSB7CiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTsKICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9OwogIHRhcmdldCQxID0gdm5vZGUuZWxtOwogIG5vcm1hbGl6ZUV2ZW50cyhvbik7CiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCBjcmVhdGVPbmNlSGFuZGxlciQxLCB2bm9kZS5jb250ZXh0KTsKICB0YXJnZXQkMSA9IHVuZGVmaW5lZDsKfQoKdmFyIGV2ZW50cyA9IHsKICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycywKICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVycwp9OwovKiAgKi8KCnZhciBzdmdDb250YWluZXI7CgpmdW5jdGlvbiB1cGRhdGVET01Qcm9wcyhvbGRWbm9kZSwgdm5vZGUpIHsKICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7CiAgICByZXR1cm47CiAgfQoKICB2YXIga2V5LCBjdXI7CiAgdmFyIGVsbSA9IHZub2RlLmVsbTsKICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9OwogIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307IC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdAoKICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkgewogICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7CiAgfQoKICBmb3IgKGtleSBpbiBvbGRQcm9wcykgewogICAgaWYgKCEoa2V5IGluIHByb3BzKSkgewogICAgICBlbG1ba2V5XSA9ICcnOwogICAgfQogIH0KCiAgZm9yIChrZXkgaW4gcHJvcHMpIHsKICAgIGN1ciA9IHByb3BzW2tleV07IC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLAogICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnMKICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApCgogICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7CiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgewogICAgICAgIHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7CiAgICAgIH0KCiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfSAvLyAjNjYwMSB3b3JrIGFyb3VuZCBDaHJvbWUgdmVyc2lvbiA8PSA1NSBidWcgd2hlcmUgc2luZ2xlIHRleHROb2RlCiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5CgoKICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkgewogICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7CiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlCiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWQKICAgICAgZWxtLl92YWx1ZSA9IGN1cjsgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lCgogICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTsKCiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHsKICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5uZXJIVE1MJyAmJiBpc1NWRyhlbG0udGFnTmFtZSkgJiYgaXNVbmRlZihlbG0uaW5uZXJIVE1MKSkgewogICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHMKICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICBzdmdDb250YWluZXIuaW5uZXJIVE1MID0gIjxzdmc+IiArIGN1ciArICI8L3N2Zz4iOwogICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7CgogICAgICB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHsKICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmZpcnN0Q2hpbGQpOwogICAgICB9CgogICAgICB3aGlsZSAoc3ZnLmZpcnN0Q2hpbGQpIHsKICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKCAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS4KICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHkKICAgIC8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuCiAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc3NhcnkgYGNoZWNrZWRgIHVwZGF0ZS4KICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XSkgewogICAgICAvLyBzb21lIHByb3BlcnR5IHVwZGF0ZXMgY2FuIHRocm93CiAgICAgIC8vIGUuZy4gYHZhbHVlYCBvbiA8cHJvZ3Jlc3M+IHcvIG5vbi1maW5pdGUgdmFsdWUKICAgICAgdHJ5IHsKICAgICAgICBlbG1ba2V5XSA9IGN1cjsKICAgICAgfSBjYXRjaCAoZSkge30KICAgIH0KICB9Cn0gLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlCgoKZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBjaGVja1ZhbCkgewogIHJldHVybiAhZWxtLmNvbXBvc2luZyAmJiAoZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8IGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8IGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpKTsKfQoKZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgewogIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXMKICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWUKICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7IC8vICM2MTU3CiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lCgogIHRyeSB7CiAgICBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOwogIH0gY2F0Y2ggKGUpIHt9CgogIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWw7Cn0KCmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgbmV3VmFsKSB7CiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlOwogIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZQoKICBpZiAoaXNEZWYobW9kaWZpZXJzKSkgewogICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHsKICAgICAgcmV0dXJuIHRvTnVtYmVyKHZhbHVlKSAhPT0gdG9OdW1iZXIobmV3VmFsKTsKICAgIH0KCiAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHsKICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKTsKICAgIH0KICB9CgogIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsOwp9Cgp2YXIgZG9tUHJvcHMgPSB7CiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcywKICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzCn07Ci8qICAqLwoKdmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7CiAgdmFyIHJlcyA9IHt9OwogIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlwpKS9nOwogIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87CiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICBpZiAoaXRlbSkgewogICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7CiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTsKICAgIH0KICB9KTsKICByZXR1cm4gcmVzOwp9KTsgLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGUKCmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YShkYXRhKSB7CiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpOyAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb24KICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdAoKICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZSA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSkgOiBzdHlsZTsKfSAvLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0CgoKZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGJpbmRpbmdTdHlsZSkgewogIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHsKICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpOwogIH0KCiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7CiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKTsKICB9CgogIHJldHVybiBiaW5kaW5nU3R5bGU7Cn0KLyoqCiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3MKICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXQKICovCgoKZnVuY3Rpb24gZ2V0U3R5bGUodm5vZGUsIGNoZWNrQ2hpbGQpIHsKICB2YXIgcmVzID0ge307CiAgdmFyIHN0eWxlRGF0YTsKCiAgaWYgKGNoZWNrQ2hpbGQpIHsKICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTsKCiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7CiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7CgogICAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKSkgewogICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7CiAgICAgIH0KICAgIH0KICB9CgogIGlmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpIHsKICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7CiAgfQoKICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlOwoKICB3aGlsZSAocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSB7CiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHsKICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTsKICAgIH0KICB9CgogIHJldHVybiByZXM7Cn0KLyogICovCgoKdmFyIGNzc1ZhclJFID0gL14tLS87CnZhciBpbXBvcnRhbnRSRSA9IC9ccyohaW1wb3J0YW50JC87Cgp2YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIHNldFByb3AoZWwsIG5hbWUsIHZhbCkgewogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7CiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpOwogIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7CiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUobmFtZSksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTsKICB9IGVsc2UgewogICAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpOwoKICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHsKICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy4KICAgICAgLy8ge2Rpc3BsYXk6IFsiLXdlYmtpdC1ib3giLCAiLW1zLWZsZXhib3giLCAiZmxleCJdfQogICAgICAvLyBTZXQgdGhlbSBvbmUgYnkgb25lLCBhbmQgdGhlIGJyb3dzZXIgd2lsbCBvbmx5IHNldCB0aG9zZSBpdCBjYW4gcmVjb2duaXplCiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDsKICAgIH0KICB9Cn07Cgp2YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTsKdmFyIGVtcHR5U3R5bGU7CnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHsKICBlbXB0eVN0eWxlID0gZW1wdHlTdHlsZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTsKICBwcm9wID0gY2FtZWxpemUocHJvcCk7CgogIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiBwcm9wIGluIGVtcHR5U3R5bGUpIHsKICAgIHJldHVybiBwcm9wOwogIH0KCiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykgewogICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7CgogICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkgewogICAgICByZXR1cm4gbmFtZTsKICAgIH0KICB9Cn0pOwoKZnVuY3Rpb24gdXBkYXRlU3R5bGUob2xkVm5vZGUsIHZub2RlKSB7CiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhOwogIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTsKCiAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSkpIHsKICAgIHJldHVybjsKICB9CgogIHZhciBjdXIsIG5hbWU7CiAgdmFyIGVsID0gdm5vZGUuZWxtOwogIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7CiAgdmFyIG9sZFN0eWxlQmluZGluZyA9IG9sZERhdGEubm9ybWFsaXplZFN0eWxlIHx8IG9sZERhdGEuc3R5bGUgfHwge307IC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhCgogIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZzsKICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307IC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmYKICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzCiAgLy8gdG8gbXV0YXRlIGl0LgoKICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXykgPyBleHRlbmQoe30sIHN0eWxlKSA6IHN0eWxlOwogIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTsKCiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7CiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHsKICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpOwogICAgfQogIH0KCiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7CiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTsKCiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkgewogICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZwogICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTsKICAgIH0KICB9Cn0KCnZhciBzdHlsZSA9IHsKICBjcmVhdGU6IHVwZGF0ZVN0eWxlLAogIHVwZGF0ZTogdXBkYXRlU3R5bGUKfTsKLyogICovCgp2YXIgd2hpdGVzcGFjZVJFID0gL1xzKy87Ci8qKgogKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb24KICogU1ZHIGVsZW1lbnRzIGluIElFCiAqLwoKZnVuY3Rpb24gYWRkQ2xhc3MoZWwsIGNscykgewogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHsKICAgIHJldHVybjsKICB9CiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KCgogIGlmIChlbC5jbGFzc0xpc3QpIHsKICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHsKICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgewogICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTsKICAgIH0KICB9IGVsc2UgewogICAgdmFyIGN1ciA9ICIgIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgIiAiOwoKICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkgewogICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTsKICAgIH0KICB9Cn0KLyoqCiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvbgogKiBTVkcgZWxlbWVudHMgaW4gSUUKICovCgoKZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNscykgewogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHsKICAgIHJldHVybjsKICB9CiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KCgogIGlmIChlbC5jbGFzc0xpc3QpIHsKICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHsKICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgewogICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTsKICAgIH0KCiAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHsKICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpOwogICAgfQogIH0gZWxzZSB7CiAgICB2YXIgY3VyID0gIiAiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAiICI7CiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnOwoKICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHsKICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpOwogICAgfQoKICAgIGN1ciA9IGN1ci50cmltKCk7CgogICAgaWYgKGN1cikgewogICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTsKICAgIH0gZWxzZSB7CiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTsKICAgIH0KICB9Cn0KLyogICovCgoKZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24oZGVmJCQxKSB7CiAgaWYgKCFkZWYkJDEpIHsKICAgIHJldHVybjsKICB9CiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KCgogIGlmIChfdHlwZW9mKGRlZiQkMSkgPT09ICdvYmplY3QnKSB7CiAgICB2YXIgcmVzID0ge307CgogICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7CiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpOwogICAgfQoKICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7CiAgICByZXR1cm4gcmVzOwogIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHsKICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpOwogIH0KfQoKdmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7CiAgcmV0dXJuIHsKICAgIGVudGVyQ2xhc3M6IG5hbWUgKyAiLWVudGVyIiwKICAgIGVudGVyVG9DbGFzczogbmFtZSArICItZW50ZXItdG8iLAogICAgZW50ZXJBY3RpdmVDbGFzczogbmFtZSArICItZW50ZXItYWN0aXZlIiwKICAgIGxlYXZlQ2xhc3M6IG5hbWUgKyAiLWxlYXZlIiwKICAgIGxlYXZlVG9DbGFzczogbmFtZSArICItbGVhdmUtdG8iLAogICAgbGVhdmVBY3RpdmVDbGFzczogbmFtZSArICItbGVhdmUtYWN0aXZlIgogIH07Cn0pOwp2YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7CnZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nOwp2YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7IC8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmcKCnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJzsKdmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJzsKdmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJzsKdmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7CgppZiAoaGFzVHJhbnNpdGlvbikgewogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiYgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSB7CiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJzsKICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJzsKICB9CgogIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJiB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZCkgewogICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nOwogICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJzsKICB9Cn0gLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlCgoKdmFyIHJhZiA9IGluQnJvd3NlciA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IHNldFRpbWVvdXQgOgovKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwpmdW5jdGlvbiAoZm4pIHsKICByZXR1cm4gZm4oKTsKfTsKCmZ1bmN0aW9uIG5leHRGcmFtZShmbikgewogIHJhZihmdW5jdGlvbiAoKSB7CiAgICByYWYoZm4pOwogIH0pOwp9CgpmdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykgewogIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pOwoKICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkgewogICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpOwogICAgYWRkQ2xhc3MoZWwsIGNscyk7CiAgfQp9CgpmdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykgewogIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHsKICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7CiAgfQoKICByZW1vdmVDbGFzcyhlbCwgY2xzKTsKfQoKZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzKGVsLCBleHBlY3RlZFR5cGUsIGNiKSB7CiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpOwogIHZhciB0eXBlID0gcmVmLnR5cGU7CiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDsKICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDsKCiAgaWYgKCF0eXBlKSB7CiAgICByZXR1cm4gY2IoKTsKICB9CgogIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDsKICB2YXIgZW5kZWQgPSAwOwoKICB2YXIgZW5kID0gZnVuY3Rpb24gZW5kKCkgewogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpOwogICAgY2IoKTsKICB9OwoKICB2YXIgb25FbmQgPSBmdW5jdGlvbiBvbkVuZChlKSB7CiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7CiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkgewogICAgICAgIGVuZCgpOwogICAgICB9CiAgICB9CiAgfTsKCiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHsKICAgICAgZW5kKCk7CiAgICB9CiAgfSwgdGltZW91dCArIDEpOwogIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTsKfQoKdmFyIHRyYW5zZm9ybVJFID0gL1xiKHRyYW5zZm9ybXxhbGwpKCx8JCkvOwoKZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSkgewogIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7IC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXMKCiAgdmFyIHRyYW5zaXRpb25EZWxheXMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpOwogIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTsKICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpOwogIHZhciBhbmltYXRpb25EZWxheXMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7CiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTsKICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpOwogIHZhciB0eXBlOwogIHZhciB0aW1lb3V0ID0gMDsKICB2YXIgcHJvcENvdW50ID0gMDsKICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KCiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikgewogICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkgewogICAgICB0eXBlID0gVFJBTlNJVElPTjsKICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0OwogICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDsKICAgIH0KICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7CiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHsKICAgICAgdHlwZSA9IEFOSU1BVElPTjsKICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7CiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7CiAgICB9CiAgfSBlbHNlIHsKICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7CiAgICB0eXBlID0gdGltZW91dCA+IDAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXQgPyBUUkFOU0lUSU9OIDogQU5JTUFUSU9OIDogbnVsbDsKICAgIHByb3BDb3VudCA9IHR5cGUgPyB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGggOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoIDogMDsKICB9CgogIHZhciBoYXNUcmFuc2Zvcm0gPSB0eXBlID09PSBUUkFOU0lUSU9OICYmIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pOwogIHJldHVybiB7CiAgICB0eXBlOiB0eXBlLAogICAgdGltZW91dDogdGltZW91dCwKICAgIHByb3BDb3VudDogcHJvcENvdW50LAogICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm0KICB9Owp9CgpmdW5jdGlvbiBnZXRUaW1lb3V0KGRlbGF5cywgZHVyYXRpb25zKSB7CiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHsKICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTsKICB9CgogIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7CiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKTsKICB9KSk7Cn0gLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXIgbnVtYmVycwovLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuCi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nCi8vIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnMKCgpmdW5jdGlvbiB0b01zKHMpIHsKICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDA7Cn0KLyogICovCgoKZnVuY3Rpb24gZW50ZXIodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHsKICB2YXIgZWwgPSB2bm9kZS5lbG07IC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93CgogIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHsKICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7CgogICAgZWwuX2xlYXZlQ2IoKTsKICB9CgogIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTsKCiAgaWYgKGlzVW5kZWYoZGF0YSkpIHsKICAgIHJldHVybjsKICB9CiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCgoKICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7CiAgICByZXR1cm47CiAgfQoKICB2YXIgY3NzID0gZGF0YS5jc3M7CiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7CiAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7CiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzOwogIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzOwogIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7CiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7CiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzczsKICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyOwogIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7CiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7CiAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDsKICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7CiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyOwogIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7CiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkOwogIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247IC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXMKICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWQKICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVjawogIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLgoKICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlOwogIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTsKCiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkgewogICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7CiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDsKICB9CgogIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDsKCiAgaWYgKGlzQXBwZWFyICYmICFhcHBlYXIgJiYgYXBwZWFyICE9PSAnJykgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJDbGFzcyA/IGFwcGVhckNsYXNzIDogZW50ZXJDbGFzczsKICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzcyA/IGFwcGVhckFjdGl2ZUNsYXNzIDogZW50ZXJBY3RpdmVDbGFzczsKICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3MgPyBhcHBlYXJUb0NsYXNzIDogZW50ZXJUb0NsYXNzOwogIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhciA/IGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlciA6IGJlZm9yZUVudGVyOwogIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhciA/IHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbicgPyBhcHBlYXIgOiBlbnRlciA6IGVudGVyOwogIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyID8gYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlciA6IGFmdGVyRW50ZXI7CiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyID8gYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkIDogZW50ZXJDYW5jZWxsZWQ7CiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKGlzT2JqZWN0KGR1cmF0aW9uKSA/IGR1cmF0aW9uLmVudGVyIDogZHVyYXRpb24pOwoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkgewogICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTsKICB9CgogIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7CiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7CiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHsKICAgIGlmIChleHBlY3RzQ1NTKSB7CiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7CiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpOwogICAgfQoKICAgIGlmIChjYi5jYW5jZWxsZWQpIHsKICAgICAgaWYgKGV4cGVjdHNDU1MpIHsKICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpOwogICAgICB9CgogICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTsKICAgIH0gZWxzZSB7CiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTsKICAgIH0KCiAgICBlbC5fZW50ZXJDYiA9IG51bGw7CiAgfSk7CgogIGlmICghdm5vZGUuZGF0YS5zaG93KSB7CiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9vawogICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlOwogICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldOwoKICAgICAgaWYgKHBlbmRpbmdOb2RlICYmIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYikgewogICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpOwogICAgICB9CgogICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7CiAgICB9KTsKICB9IC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb24KCgogIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpOwoKICBpZiAoZXhwZWN0c0NTUykgewogICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTsKICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpOwogICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHsKICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTsKCiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7CiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTsKCiAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7CiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHsKICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfQoKICBpZiAodm5vZGUuZGF0YS5zaG93KSB7CiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTsKICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTsKICB9CgogIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkgewogICAgY2IoKTsKICB9Cn0KCmZ1bmN0aW9uIGxlYXZlKHZub2RlLCBybSkgewogIHZhciBlbCA9IHZub2RlLmVsbTsgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3cKCiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkgewogICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTsKCiAgICBlbC5fZW50ZXJDYigpOwogIH0KCiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pOwoKICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkgewogICAgcmV0dXJuIHJtKCk7CiAgfQogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKCiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIGNzcyA9IGRhdGEuY3NzOwogIHZhciB0eXBlID0gZGF0YS50eXBlOwogIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzOwogIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzczsKICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzczsKICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlOwogIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7CiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7CiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDsKICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTsKICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uOwogIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7CiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTsKICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoaXNPYmplY3QoZHVyYXRpb24pID8gZHVyYXRpb24ubGVhdmUgOiBkdXJhdGlvbik7CgogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHsKICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7CiAgfQoKICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkgewogICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykgewogICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsOwogICAgfQoKICAgIGlmIChleHBlY3RzQ1NTKSB7CiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTsKICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTsKICAgIH0KCiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7CiAgICAgIGlmIChleHBlY3RzQ1NTKSB7CiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTsKICAgICAgfQoKICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpOwogICAgfSBlbHNlIHsKICAgICAgcm0oKTsKICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTsKICAgIH0KCiAgICBlbC5fbGVhdmVDYiA9IG51bGw7CiAgfSk7CgogIGlmIChkZWxheUxlYXZlKSB7CiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7CiAgfSBlbHNlIHsKICAgIHBlcmZvcm1MZWF2ZSgpOwogIH0KCiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlKCkgewogICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZAogICAgaWYgKGNiLmNhbmNlbGxlZCkgewogICAgICByZXR1cm47CiAgICB9IC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnQKCgogICAgaWYgKCF2bm9kZS5kYXRhLnNob3cgJiYgZWwucGFyZW50Tm9kZSkgewogICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbdm5vZGUua2V5XSA9IHZub2RlOwogICAgfQoKICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTsKCiAgICBpZiAoZXhwZWN0c0NTUykgewogICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpOwogICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpOwogICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkgewogICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7CgogICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7CiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7CgogICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7CiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkgewogICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7CgogICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7CiAgICAgIGNiKCk7CiAgICB9CiAgfQp9IC8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZQoKCmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24odmFsLCBuYW1lLCB2bm9kZSkgewogIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykgewogICAgd2FybigiPHRyYW5zaXRpb24+IGV4cGxpY2l0ICIgKyBuYW1lICsgIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSAiICsgImdvdCAiICsgSlNPTi5zdHJpbmdpZnkodmFsKSArICIuIiwgdm5vZGUuY29udGV4dCk7CiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7CiAgICB3YXJuKCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgIiArIG5hbWUgKyAiIGR1cmF0aW9uIGlzIE5hTiAtICIgKyAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsIHZub2RlLmNvbnRleHQpOwogIH0KfQoKZnVuY3Rpb24gaXNWYWxpZER1cmF0aW9uKHZhbCkgewogIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKTsKfQovKioKICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6CiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZucwogKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aCkKICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKQogKi8KCgpmdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGZuKSB7CiAgaWYgKGlzVW5kZWYoZm4pKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgaW52b2tlckZucyA9IGZuLmZuczsKCiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7CiAgICAvLyBpbnZva2VyCiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChBcnJheS5pc0FycmF5KGludm9rZXJGbnMpID8gaW52b2tlckZuc1swXSA6IGludm9rZXJGbnMpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDE7CiAgfQp9CgpmdW5jdGlvbiBfZW50ZXIoXywgdm5vZGUpIHsKICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7CiAgICBlbnRlcih2bm9kZSk7CiAgfQp9Cgp2YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHsKICBjcmVhdGU6IF9lbnRlciwKICBhY3RpdmF0ZTogX2VudGVyLAogIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlJCQxKHZub2RlLCBybSkgewogICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHsKICAgICAgbGVhdmUodm5vZGUsIHJtKTsKICAgIH0gZWxzZSB7CiAgICAgIHJtKCk7CiAgICB9CiAgfQp9IDoge307CnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbYXR0cnMsIGtsYXNzLCBldmVudHMsIGRvbVByb3BzLCBzdHlsZSwgdHJhbnNpdGlvbl07Ci8qICAqLwovLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGwKLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC4KCnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7CnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oewogIG5vZGVPcHM6IG5vZGVPcHMsCiAgbW9kdWxlczogbW9kdWxlcwp9KTsKLyoqCiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZwogKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLgogKi8KCi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKaWYgKGlzSUU5KSB7CiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvCiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDsKCiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7CiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpOwogICAgfQogIH0pOwp9Cgp2YXIgZGlyZWN0aXZlID0gewogIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7CiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0JykgewogICAgICAvLyAjNjkwMwogICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7CiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTsKICAgICAgfQoKICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpOwogICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7CiAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7CgogICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHsKICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTsKICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpOyAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuCiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZQogICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWUKICAgICAgICAvLyBmaXJlcyAiY2hhbmdlIiBpbnN0ZWFkIG9mICJpbnB1dCIgb24gYXV0b2NvbXBsZXRlLgoKICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTsKICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KCiAgICAgICAgaWYgKGlzSUU5KSB7CiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpIHsKICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7CiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTsgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsCiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy4KICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nCiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLgoKICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zOwogICAgICB2YXIgY3VyT3B0aW9ucyA9IGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTsKCiAgICAgIGlmIChjdXJPcHRpb25zLnNvbWUoZnVuY3Rpb24gKG8sIGkpIHsKICAgICAgICByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOwogICAgICB9KSkgewogICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmCiAgICAgICAgLy8gbm8gbWF0Y2hpbmcgb3B0aW9uIGZvdW5kIGZvciBhdCBsZWFzdCBvbmUgdmFsdWUKICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGUgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsKICAgICAgICAgIHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOwogICAgICAgIH0pIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpOwoKICAgICAgICBpZiAobmVlZFJlc2V0KSB7CiAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9OwoKZnVuY3Rpb24gc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKSB7CiAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pOwogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7CiAgICB9LCAwKTsKICB9Cn0KCmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKSB7CiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTsKICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlOwoKICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybigiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVwiIiArIGJpbmRpbmcuZXhwcmVzc2lvbiArICJcIj4gIiArICJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCAiICsgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSksIHZtKTsKICAgIHJldHVybjsKICB9CgogIHZhciBzZWxlY3RlZCwgb3B0aW9uOwoKICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldOwoKICAgIGlmIChpc011bHRpcGxlKSB7CiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xOwoKICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHsKICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7CiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHsKICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICB9CiAgfQoKICBpZiAoIWlzTXVsdGlwbGUpIHsKICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTsKICB9Cn0KCmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24odmFsdWUsIG9wdGlvbnMpIHsKICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgewogICAgcmV0dXJuICFsb29zZUVxdWFsKG8sIHZhbHVlKTsKICB9KTsKfQoKZnVuY3Rpb24gZ2V0VmFsdWUob3B0aW9uKSB7CiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvbiA/IG9wdGlvbi5fdmFsdWUgOiBvcHRpb24udmFsdWU7Cn0KCmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydChlKSB7CiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTsKfQoKZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZChlKSB7CiAgLy8gcHJldmVudCB0cmlnZ2VyaW5nIGFuIGlucHV0IGV2ZW50IGZvciBubyByZWFzb24KICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgewogICAgcmV0dXJuOwogIH0KCiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7CiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7Cn0KCmZ1bmN0aW9uIHRyaWdnZXIoZWwsIHR5cGUpIHsKICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7CiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7CiAgZWwuZGlzcGF0Y2hFdmVudChlKTsKfQovKiAgKi8KLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdAoKCmZ1bmN0aW9uIGxvY2F0ZU5vZGUodm5vZGUpIHsKICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpIDogdm5vZGU7Cn0KCnZhciBzaG93ID0gewogIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoZWwsIHJlZiwgdm5vZGUpIHsKICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTsKICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7CiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uOwogICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9IGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTsKCiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkgewogICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlOwogICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkgewogICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnOwogICAgfQogIH0sCiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZWwsIHJlZiwgdm5vZGUpIHsKICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTsKICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTsKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTsKICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247CgogICAgaWYgKHRyYW5zaXRpb24kJDEpIHsKICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTsKCiAgICAgIGlmICh2YWx1ZSkgewogICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5OwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgIH0pOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7CiAgICB9CiAgfSwKICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHsKICAgIGlmICghaXNEZXN0cm95KSB7CiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7CiAgICB9CiAgfQp9Owp2YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0gewogIG1vZGVsOiBkaXJlY3RpdmUsCiAgc2hvdzogc2hvdwp9OwovKiAgKi8KCnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7CiAgbmFtZTogU3RyaW5nLAogIGFwcGVhcjogQm9vbGVhbiwKICBjc3M6IEJvb2xlYW4sCiAgbW9kZTogU3RyaW5nLAogIHR5cGU6IFN0cmluZywKICBlbnRlckNsYXNzOiBTdHJpbmcsCiAgbGVhdmVDbGFzczogU3RyaW5nLAogIGVudGVyVG9DbGFzczogU3RyaW5nLAogIGxlYXZlVG9DbGFzczogU3RyaW5nLAogIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZywKICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsCiAgYXBwZWFyQ2xhc3M6IFN0cmluZywKICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLAogIGFwcGVhclRvQ2xhc3M6IFN0cmluZywKICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdCn07IC8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPgovLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZAoKZnVuY3Rpb24gZ2V0UmVhbENoaWxkKHZub2RlKSB7CiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9uczsKCiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9uc1siYWJzdHJhY3QiXSkgewogICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSk7CiAgfSBlbHNlIHsKICAgIHJldHVybiB2bm9kZTsKICB9Cn0KCmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YShjb21wKSB7CiAgdmFyIGRhdGEgPSB7fTsKICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7IC8vIHByb3BzCgogIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkgewogICAgZGF0YVtrZXldID0gY29tcFtrZXldOwogIH0gLy8gZXZlbnRzLgogIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kcwoKCiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVyczsKCiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7CiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdOwogIH0KCiAgcmV0dXJuIGRhdGE7Cn0KCmZ1bmN0aW9uIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKSB7CiAgaWYgKC9cZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7CiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHsKICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhCiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24odm5vZGUpIHsKICB3aGlsZSAodm5vZGUgPSB2bm9kZS5wYXJlbnQpIHsKICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpIHsKICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWc7Cn0KCnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gaXNOb3RUZXh0Tm9kZShjKSB7CiAgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsKfTsKCnZhciBpc1ZTaG93RGlyZWN0aXZlID0gZnVuY3Rpb24gaXNWU2hvd0RpcmVjdGl2ZShkKSB7CiAgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOwp9OwoKdmFyIFRyYW5zaXRpb24gPSB7CiAgbmFtZTogJ3RyYW5zaXRpb24nLAogIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsCiAgImFic3RyYWN0IjogdHJ1ZSwKICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7CiAgICB2YXIgdGhpcyQxID0gdGhpczsKICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzWyJkZWZhdWx0Il07CgogICAgaWYgKCFjaGlsZHJlbikgewogICAgICByZXR1cm47CiAgICB9IC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpCgoKICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpOwogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCgogICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHsKICAgICAgcmV0dXJuOwogICAgfSAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzCgoKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHsKICAgICAgd2FybignPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgKyAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLCB0aGlzLiRwYXJlbnQpOwogICAgfQoKICAgIHZhciBtb2RlID0gdGhpcy5tb2RlOyAvLyB3YXJuIGludmFsaWQgbW9kZQoKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbicpIHsKICAgICAgd2FybignaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsIHRoaXMuJHBhcmVudCk7CiAgICB9CgogICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07IC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3MKICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLgoKICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkgewogICAgICByZXR1cm4gcmF3Q2hpbGQ7CiAgICB9IC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZAogICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZQoKCiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpOwogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCgogICAgaWYgKCFjaGlsZCkgewogICAgICByZXR1cm4gcmF3Q2hpbGQ7CiAgICB9CgogICAgaWYgKHRoaXMuX2xlYXZpbmcpIHsKICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKTsKICAgIH0gLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb24KICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXMKICAgIC8vIGR1cmluZyBlbnRlcmluZy4KCgogICAgdmFyIGlkID0gIl9fdHJhbnNpdGlvbi0iICsgdGhpcy5fdWlkICsgIi0iOwogICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGwgPyBjaGlsZC5pc0NvbW1lbnQgPyBpZCArICdjb21tZW50JyA6IGlkICsgY2hpbGQudGFnIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KSA/IFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkgOiBjaGlsZC5rZXk7CiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpOwogICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7CiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpOyAvLyBtYXJrIHYtc2hvdwogICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlCgogICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSkgewogICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlOwogICAgfQoKICAgIGlmIChvbGRDaGlsZCAmJiBvbGRDaGlsZC5kYXRhICYmICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlCiAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpKSB7CiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZQogICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhCiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTsgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZQoKICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7CiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzCiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7CiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTsKICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpOwogICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7CiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHsKICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZDsKICAgICAgICB9CgogICAgICAgIHZhciBkZWxheWVkTGVhdmU7CgogICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiBwZXJmb3JtTGVhdmUoKSB7CiAgICAgICAgICBkZWxheWVkTGVhdmUoKTsKICAgICAgICB9OwoKICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7CiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTsKICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgewogICAgICAgICAgZGVsYXllZExlYXZlID0gbGVhdmU7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gcmF3Q2hpbGQ7CiAgfQp9OwovKiAgKi8KCnZhciBwcm9wcyA9IGV4dGVuZCh7CiAgdGFnOiBTdHJpbmcsCiAgbW92ZUNsYXNzOiBTdHJpbmcKfSwgdHJhbnNpdGlvblByb3BzKTsKZGVsZXRlIHByb3BzLm1vZGU7CnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7CiAgcHJvcHM6IHByb3BzLAogIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCgpIHsKICAgIHZhciB0aGlzJDEgPSB0aGlzOwogICAgdmFyIHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTsKCiAgICB0aGlzLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykgewogICAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTsgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzcwoKICAgICAgdGhpcyQxLl9fcGF0Y2hfXyh0aGlzJDEuX3Zub2RlLCB0aGlzJDEua2VwdCwgZmFsc2UsIC8vIGh5ZHJhdGluZwogICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcykKICAgICAgKTsKCiAgICAgIHRoaXMkMS5fdm5vZGUgPSB0aGlzJDEua2VwdDsKICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7CiAgICAgIHVwZGF0ZS5jYWxsKHRoaXMkMSwgdm5vZGUsIGh5ZHJhdGluZyk7CiAgICB9OwogIH0sCiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCkgewogICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJzsKICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjsKICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzWyJkZWZhdWx0Il0gfHwgW107CiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107CiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldOwoKICAgICAgaWYgKGMudGFnKSB7CiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHsKICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7CiAgICAgICAgICBtYXBbYy5rZXldID0gYzsKICAgICAgICAgIChjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhOwogICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7CiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyBvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnIHx8ICcnIDogYy50YWc7CiAgICAgICAgICB3YXJuKCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPCIgKyBuYW1lICsgIj4iKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZiAocHJldkNoaWxkcmVuKSB7CiAgICAgIHZhciBrZXB0ID0gW107CiAgICAgIHZhciByZW1vdmVkID0gW107CgogICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykgewogICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTsKICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7CiAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKCiAgICAgICAgaWYgKG1hcFtjJDEua2V5XSkgewogICAgICAgICAga2VwdC5wdXNoKGMkMSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlbW92ZWQucHVzaChjJDEpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpOwogICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkOwogICAgfQoKICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pOwogIH0sCiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCgpIHsKICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuOwogICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZSc7CgogICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHsKICAgICAgcmV0dXJuOwogICAgfSAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXMKICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLgoKCiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTsKICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pOwogICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTsgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uCiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZwogICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lCgogICAgdGhpcy5fcmVmbG93ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7CiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7CiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHsKICAgICAgICB2YXIgZWwgPSBjLmVsbTsKICAgICAgICB2YXIgcyA9IGVsLnN0eWxlOwogICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTsKICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJzsKICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiKGUpIHsKICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkgewogICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpOwogICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDsKICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGhhc01vdmU6IGZ1bmN0aW9uIGhhc01vdmUoZWwsIG1vdmVDbGFzcykgewogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKCiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmU7CiAgICAgIH0gLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzCiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZwogICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlCiAgICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzcwogICAgICAvLyBpcyBhcHBsaWVkLgoKCiAgICAgIHZhciBjbG9uZSA9IGVsLmNsb25lTm9kZSgpOwoKICAgICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcykgewogICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsKICAgICAgICAgIHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTsKICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpOwogICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTsKICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpOwogICAgICByZXR1cm4gdGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtOwogICAgfQogIH0KfTsKCmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzKGMpIHsKICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICBpZiAoYy5lbG0uX21vdmVDYikgewogICAgYy5lbG0uX21vdmVDYigpOwogIH0KICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KCgogIGlmIChjLmVsbS5fZW50ZXJDYikgewogICAgYy5lbG0uX2VudGVyQ2IoKTsKICB9Cn0KCmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uKGMpIHsKICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7Cn0KCmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24oYykgewogIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zOwogIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zOwogIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7CiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7CgogIGlmIChkeCB8fCBkeSkgewogICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTsKICAgIHZhciBzID0gYy5lbG0uc3R5bGU7CiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gInRyYW5zbGF0ZSgiICsgZHggKyAicHgsIiArIGR5ICsgInB4KSI7CiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7CiAgfQp9Cgp2YXIgcGxhdGZvcm1Db21wb25lbnRzID0gewogIFRyYW5zaXRpb246IFRyYW5zaXRpb24sCiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXAKfTsKLyogICovCi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHMKClZ1ZS5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDsKVnVlLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZzsKVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyOwpWdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTsKVnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDsgLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzCgpleHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTsKZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7IC8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb24KClZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wOyAvLyBwdWJsaWMgbW91bnQgbWV0aG9kCgpWdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChlbCwgaHlkcmF0aW5nKSB7CiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7CiAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpOwp9OyAvLyBkZXZ0b29scyBnbG9iYWwgaG9vawoKLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KCgppZiAoaW5Ccm93c2VyKSB7CiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7CiAgICAgIGlmIChkZXZ0b29scykgewogICAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUpOwogICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JykgewogICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKCdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcbicgKyAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scycpOwogICAgICB9CiAgICB9CgogICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXG4iICsgIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cbiIgKyAiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWwiKTsKICAgIH0KICB9LCAwKTsKfQovKiAgKi8KCgpleHBvcnQgZGVmYXVsdCBWdWU7"},null]}
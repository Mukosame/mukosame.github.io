{"remainingRequest":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js??ref--3-1!/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-gitee-v5/lib/index.js","dependencies":[{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-gitee-v5/lib/index.js","mtime":1604064595397},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/cache-loader/dist/cjs.js","mtime":1603041438982},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js","mtime":1603041438713}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA,OAAO,KAAP,MAAyD,OAAzD;AAEA,SAAS,QAAT,EAAmB,SAAnB,EAA8B,WAA9B,EAA2C,UAA3C,QAA6D,cAA7D;AAEA,SAAS,aAAT,EAAwB,cAAxB,EAAwC,gBAAxC,QAAgE,SAAhE;AASA;;;;;AAKG;;IACkB,O;AAWnB,yBASmB;AAAA,4BARjB,OAQiB;AAAA,QARjB,OAQiB,6BARP,mBAQO;AAAA,QAPjB,KAOiB,QAPjB,KAOiB;AAAA,QANjB,IAMiB,QANjB,IAMiB;AAAA,QALjB,MAKiB,QALjB,MAKiB;AAAA,QAJjB,QAIiB,QAJjB,QAIiB;AAAA,QAHjB,YAGiB,QAHjB,YAGiB;AAAA,QAFjB,KAEiB,QAFjB,KAEiB;AAAA,QADjB,KACiB,QADjB,KACiB;;AAAA;;AACjB;AACA,QAAI,OAAO,YAAP,KAAwB,WAAxB,IAAuC,OAAO,KAAP,KAAiB,WAA5D,EAAyE;AACvE,YAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AACD;;AACD,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,MAAL,GAAc,MAAd;AAEA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,KAAL,GAAa,KAAb;AAEA,SAAK,KAAL,GAAa,KAAK,CAAC,MAAN,CAAa;AACxB,MAAA,OAAO,EAAE,SAAS,CAAC,OAAD,EAAU,QAAV;AADM,KAAb,CAAb;AAIA,SAAK,KAAL,CAAW,YAAX,CAAwB,QAAxB,CAAiC,GAAjC,CACE,UAAA,QAAQ;AAAA,aAAI,QAAJ;AAAA,KADV,EAEE,UAAA,KAAK,EAAG;AACN,UAAI,KAAK,CAAC,QAAN,CAAe,IAAf,IAAuB,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,OAA/C,EAAwD;AACtD,QAAA,KAAK,CAAC,OAAN,GAAgB,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,OAApC;AACD;;AACD,aAAO,OAAO,CAAC,MAAR,CAAe,KAAf,CAAP;AACD,KAPH;AASD;AAED;;AAEG;;;;;;AAaH;;;;AAIG;mCACS;AACV,MAAA,MAAM,CAAC,QAAP,CAAgB,IAAhB,GAAuB,QAAQ,CAC7B,SAAS,CAAC,KAAK,OAAN,EAAe,iBAAf,CADoB,EAE7B;AACE,QAAA,SAAS,EAAE,KAAK,QADlB;AAEE,QAAA,YAAY,EAAE,MAAM,CAAC,QAAP,CAAgB,IAFhC;AAGE,QAAA,KAAK,EAAE,wBAHT;AAIE,QAAA,aAAa,EAAE,MAJjB;AAKE,QAAA,KAAK,EAAE,KAAK;AALd,OAF6B,CAA/B;AAUD;AAED;;;;;;;AAOG;;;;;;;;;;;AAEK,gBAAA,K,GAAQ,UAAU,CAAC,MAAM,CAAC,QAAP,CAAgB,MAAjB,C;;qBACpB,KAAK,CAAC,I;;;;;sBACJ,KAAK,CAAC,KAAN,KAAgB,KAAK,K;;;;;iDAChB,I;;;AAEH,gBAAA,I,GAAO,KAAK,CAAC,I;AACnB,uBAAO,KAAK,CAAC,IAAb;AACA,uBAAO,KAAK,CAAC,KAAb;AACM,gBAAA,U,GACJ,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,QAAP,CAAgB,IAAjB,CAAZ,EAAoC,KAApC,CAAR,GACA,MAAM,CAAC,QAAP,CAAgB,I;AAClB,gBAAA,MAAM,CAAC,OAAP,CAAe,YAAf,CAA4B,IAA5B,EAAkC,EAAlC,EAAsC,UAAtC;;uBAC0B,KAAK,cAAL,CAAoB;AAAE,kBAAA,IAAI,EAAJ;AAAF,iBAApB,C;;;AAApB,gBAAA,W;iDACC,W;;;iDAEF,I;;;;;;;;;;;;;;;;AAGT;;;;AAIG;;;;;;;;;;;;AACoB,gBAAA,I,SAAA,I;AACf,gBAAA,W,GAAc,SAAS,CAAC,KAAK,OAAN,EAAe,aAAf,C;AACvB,gBAAA,Q,GACJ,OAAO,KAAK,KAAZ,KAAsB,UAAtB,GAAmC,KAAK,KAAL,CAAW,WAAX,CAAnC,GAA6D,KAAK,K;;uBAC7C,KAAK,KAAL,CAAW,IAAX,CAAqC,QAArC,EAA+C;AACpE,kBAAA,SAAS,EAAE,KAAK,QADoD;AAEpE,kBAAA,aAAa,EAAE,KAAK,YAFgD;AAGpE,kBAAA,IAAI,EAAJ,IAHoE;AAIpE,kBAAA,UAAU,EAAE,oBAJwD;AAKpE,kBAAA,YAAY,EAAE,MAAM,CAAC,QAAP,CAAgB;AALsC,iBAA/C,C;;;;AAAf,gBAAA,I,yBAAA,I;kDAOD,IAAI,CAAC,Y;;;;;;;;;;;;;;;;AAGd;;;;AAIG;;;;;;;;;;;;AAED,gBAAA,W,SAAA,W;;uBAIuB,KAAK,KAAL,CAAW,GAAX,CAA6B,MAA7B,EAAqC;AAC1D,kBAAA,MAAM,EAAE;AAAE,oBAAA,YAAY,EAAE;AAAhB;AADkD,iBAArC,C;;;;AAAf,gBAAA,I,yBAAA,I;kDAGD,aAAa,CAAC,IAAD,C;;;;;;;;;;;;;;;;AAGtB;;;;;;AAMG;;;;;;;;;;;;AAED,gBAAA,W,SAAA,W,EACA,O,SAAA,O,EACA,U,SAAA,U;AAMM,gBAAA,O,GAA8B;AAClC,kBAAA,MAAM,EAAE;AACN;AACA,oBAAA,SAAS,EAAE,IAAI,CAAC,GAAL;AAFL;AAD0B,iB;;AAOpC,oBAAI,WAAJ,EAAiB;AACf,kBAAA,OAAO,CAAC,MAAR,CAAe,YAAf,GAA8B,WAA9B;AACD;;qBAEG,O;;;;;;;uBAEuB,KAAK,KAAL,CAAW,GAAX,iBACZ,KAAK,KADO,cACE,KAAK,IADP,qBACsB,OADtB,GAErB,OAFqB,C;;;;AAAf,gBAAA,I,0BAAA,I;kDAID,cAAc,CAAC,IAAD,C;;;;;;sBAEjB,aAAE,QAAF,IAAc,aAAE,QAAF,CAAW,MAAX,KAAsB,G;;;;;kDAC/B,I;;;;;;;;;;AAMX,gBAAA,MAAM,CAAC,MAAP,CAAc,OAAO,CAAC,MAAtB,EAA8B;AAC5B,kBAAA,CAAC,EAAE,UADyB;AAE5B,kBAAA,IAAI,YAAK,KAAK,KAAV,cAAmB,KAAK,IAAxB,CAFwB;AAG5B,kBAAA,QAAQ,EAAE;AAHkB,iBAA9B;;uBAKuB,KAAK,KAAL,CAAW,GAAX,kBAErB,OAFqB,C;;;;AAAf,gBAAA,K,0BAAA,I;AAIF,gBAAA,K,GAAQ,KAAI,CACf,GADW,CACP,cADO,EAEX,IAFW,CAEN,UAAA,IAAI;AAAA,yBAAI,IAAI,CAAC,KAAL,KAAe,UAAnB;AAAA,iBAFE,C;kDAGP,KAAK,IAAI,I;;;;;;;;;;;;;;;;AAIpB;;;;AAIG;;;;;;;;;;;;AAED,gBAAA,W,SAAA,W,EACA,K,SAAA,K,EACA,O,SAAA,O;;uBAMuB,KAAK,KAAL,CAAW,IAAX,iBACZ,KAAK,KADO,cAErB;AACE,kBAAA,YAAY,EAAE,WADhB;AAEE,kBAAA,IAAI,EAAE,KAAK,IAFb;AAGE,kBAAA,KAAK,EAAL,KAHF;AAIE,kBAAA,IAAI,EAAE,OAJR;AAKE,kBAAA,MAAM,EAAE,KAAK,MAAL,CAAY,IAAZ,CAAiB,GAAjB;AALV,iBAFqB,C;;;;AAAf,gBAAA,I,0BAAA,I;kDAUD,cAAc,CAAC,IAAD,C;;;;;;;;;;;;;;;;AAGvB;;;;;;;AAOG;;;;;;;;;;;;AAED,gBAAA,W,SAAA,W,EACA,O,SAAA,O,sBACA,K;uDAAyD,E;+CAAhD,I,EAAA,I,iCAAO,C,uDAAG,O,EAAA,O,oCAAU,E;AAMvB,gBAAA,O,GAA8B;AAClC,kBAAA,MAAM,EAAE;AACN;AACA,oBAAA,IAAI,EAAE,IAFA;AAGN,oBAAA,QAAQ,EAAE,OAHJ;AAIN;AACA;AACA;AACA,oBAAA,SAAS,EAAE,IAAI,CAAC,GAAL;AAPL,mBAD0B;AAUlC,kBAAA,OAAO,EAAE;AACP,oBAAA,MAAM,EAAE,CAAC,iCAAD;AADD;AAVyB,iB;;AAcpC,oBAAI,WAAJ,EAAiB;AACf,kBAAA,OAAO,CAAC,MAAR,CAAe,YAAf,GAA8B,WAA9B;AACD;;;uBAEsB,KAAK,KAAL,CAAW,GAAX,iBACZ,KAAK,KADO,cACE,KAAK,IADP,qBACsB,OADtB,gBAErB,OAFqB,C;;;AAAjB,gBAAA,Q;AAKA,gBAAA,K,GAAQ,MAAM,CAAC,QAAQ,CAAC,OAAT,CAAiB,WAAlB,C;kDAEb;AACL,kBAAA,KAAK,EAAE,KADF;AAEL,kBAAA,IAAI,EAAE,IAFD;AAGL,kBAAA,OAAO,EAAE,OAHJ;AAIL,kBAAA,IAAI,EAAE,QAAQ,CAAC,IAAT,CAAc,GAAd,CAAkB,gBAAlB;AAJD,iB;;;;;;;;;;;;;;;;AAQT;;;;AAIG;;;;;;;;;;;;AAED,gBAAA,W,SAAA,W,EACA,O,SAAA,O,EACA,O,SAAA,O;;uBAMuB,KAAK,KAAL,CAAW,IAAX,iBACZ,KAAK,KADO,cACE,KAAK,IADP,qBACsB,OADtB,gBAErB;AACE,kBAAA,IAAI,EAAE,OADR;AAEE,kBAAA,YAAY,EAAE;AAFhB,iBAFqB,EAMrB;AACE,kBAAA,OAAO,EAAE;AACP,oBAAA,MAAM,EAAE,CAAC,iCAAD;AADD;AADX,iBANqB,C;;;;AAAf,gBAAA,I,0BAAA,I;kDAYD,gBAAgB,CAAC,IAAD,C;;;;;;;;;;;;;;;;AAGzB;;;;AAIG;;;;;;;;;;;;AAED,gBAAA,W,SAAA,W,EACA,S,SAAA,S,EACA,O,SAAA,O;;uBAOuB,KAAK,KAAL,CAAW,KAAX,iBACZ,KAAK,KADO,cACE,KAAK,IADP,8BAC+B,SAD/B,GAErB;AACE,kBAAA,IAAI,EAAE,OADR;AAEE,kBAAA,YAAY,EAAE;AAFhB,iBAFqB,EAMrB;AACE,kBAAA,OAAO,EAAE;AACP,oBAAA,MAAM,EAAE,CAAC,iCAAD;AADD;AADX,iBANqB,C;;;;AAAf,gBAAA,I,yBAAA,I;kDAYD,gBAAgB,CAAC,IAAD,C;;;;;;;;;;;;;;;;AAGzB;;;;AAIG;;;;;;;;;;;;AAED,gBAAA,W,SAAA,W,EACA,S,SAAA,S;;uBAMyB,KAAK,KAAL,2BACd,KAAK,KADS,cACA,KAAK,IADL,8BAC6B,SAD7B,GAEvB;AACE,kBAAA,MAAM,EAAE;AAAE,oBAAA,YAAY,EAAE;AAAhB;AADV,iBAFuB,C;;;;AAAjB,gBAAA,M,yBAAA,M;kDAMD,MAAM,KAAK,G;;;;;;;;;;;;;;;;AAGpB;;AAEG;AACH;;;;;4GAC0B,O;;;;;sBAClB,IAAI,KAAJ,CAAU,qBAAV,C;;;;;;;;;;;;;;;;AAGR;;AAEG;AACH;;;;;4GAC0B,O;;;;;sBAClB,IAAI,KAAJ,CAAU,qBAAV,C;;;;;;;;;;;;;;;;;;wBAjUI;AACV,aAAO;AACL,QAAA,IAAI,EAAE,OADD;AAEL,QAAA,IAAI,EAAE,KAAK,OAFN;AAGL,QAAA,OAAO,EAAE,IAHJ;AAIL,QAAA,IAAI,EAAE;AACJ,UAAA,SAAS,EAAE,KADP;AAEJ,UAAA,QAAQ,EAAE;AAFN;AAJD,OAAP;AASD;;;;;;SA/DkB,O","sourceRoot":"","sourcesContent":["import axios from 'axios';\nimport { buildURL, concatURL, getCleanURL, parseQuery } from '@vssue/utils';\nimport { normalizeUser, normalizeIssue, normalizeComment } from './utils';\n/**\n * Gitee REST API v5\n *\n * @see https://gitee.com/api/v5/swagger\n * @see https://gitee.com/api/v5/oauth_doc\n */\nexport default class GiteeV5 {\n    constructor({ baseURL = 'https://gitee.com', owner, repo, labels, clientId, clientSecret, state, proxy, }) {\n        /* istanbul ignore if */\n        if (typeof clientSecret === 'undefined' || typeof proxy === 'undefined') {\n            throw new Error('clientSecret and proxy is required for Gitee V5');\n        }\n        this.baseURL = baseURL;\n        this.owner = owner;\n        this.repo = repo;\n        this.labels = labels;\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.state = state;\n        this.proxy = proxy;\n        this.$http = axios.create({\n            baseURL: concatURL(baseURL, 'api/v5'),\n        });\n        this.$http.interceptors.response.use(response => response, error => {\n            if (error.response.data && error.response.data.message) {\n                error.message = error.response.data.message;\n            }\n            return Promise.reject(error);\n        });\n    }\n    /**\n     * The platform api info\n     */\n    get platform() {\n        return {\n            name: 'Gitee',\n            link: this.baseURL,\n            version: 'v5',\n            meta: {\n                reactable: false,\n                sortable: false,\n            },\n        };\n    }\n    /**\n     * Redirect to the authorization page of platform.\n     *\n     * @see https://gitee.com/api/v5/oauth_doc\n     */\n    redirectAuth() {\n        window.location.href = buildURL(concatURL(this.baseURL, 'oauth/authorize'), {\n            client_id: this.clientId,\n            redirect_uri: window.location.href,\n            scope: 'user_info issues notes',\n            response_type: 'code',\n            state: this.state,\n        });\n    }\n    /**\n     * Handle authorization.\n     *\n     * @see https://gitee.com/api/v5/oauth_doc\n     *\n     * @remarks\n     * If the `code` and `state` exist in the query, and the `state` matches, remove them from query, and try to get the access token.\n     */\n    async handleAuth() {\n        const query = parseQuery(window.location.search);\n        if (query.code) {\n            if (query.state !== this.state) {\n                return null;\n            }\n            const code = query.code;\n            delete query.code;\n            delete query.state;\n            const replaceURL = buildURL(getCleanURL(window.location.href), query) +\n                window.location.hash;\n            window.history.replaceState(null, '', replaceURL);\n            const accessToken = await this.getAccessToken({ code });\n            return accessToken;\n        }\n        return null;\n    }\n    /**\n     * Get user access token via `code`\n     *\n     * @see https://gitee.com/api/v5/oauth_doc\n     */\n    async getAccessToken({ code }) {\n        const originalURL = concatURL(this.baseURL, 'oauth/token');\n        const proxyURL = typeof this.proxy === 'function' ? this.proxy(originalURL) : this.proxy;\n        const { data } = await this.$http.post(proxyURL, {\n            client_id: this.clientId,\n            client_secret: this.clientSecret,\n            code,\n            grant_type: 'authorization_code',\n            redirect_uri: window.location.href,\n        });\n        return data.access_token;\n    }\n    /**\n     * Get the logged-in user with access token.\n     *\n     * @see https://gitee.com/api/v5/swagger#/getV5User\n     */\n    async getUser({ accessToken, }) {\n        const { data } = await this.$http.get('user', {\n            params: { access_token: accessToken },\n        });\n        return normalizeUser(data);\n    }\n    /**\n     * Get issue of this page according to the issue id or the issue title\n     *\n     * @see https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoIssues\n     * @see https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoIssuesNumber\n     * @see https://gitee.com/api/v5/swagger#/getV5SearchIssues\n     */\n    async getIssue({ accessToken, issueId, issueTitle, }) {\n        const options = {\n            params: {\n                // to avoid caching\n                timestamp: Date.now(),\n            },\n        };\n        if (accessToken) {\n            options.params.access_token = accessToken;\n        }\n        if (issueId) {\n            try {\n                const { data } = await this.$http.get(`repos/${this.owner}/${this.repo}/issues/${issueId}`, options);\n                return normalizeIssue(data);\n            }\n            catch (e) {\n                if (e.response && e.response.status === 404) {\n                    return null;\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        else {\n            Object.assign(options.params, {\n                q: issueTitle,\n                repo: `${this.owner}/${this.repo}`,\n                per_page: 1,\n            });\n            const { data } = await this.$http.get(`search/issues`, options);\n            const issue = data\n                .map(normalizeIssue)\n                .find(item => item.title === issueTitle);\n            return issue || null;\n        }\n    }\n    /**\n     * Create a new issue\n     *\n     * @see https://gitee.com/api/v5/swagger#/postV5ReposOwnerIssues\n     */\n    async postIssue({ accessToken, title, content, }) {\n        const { data } = await this.$http.post(`repos/${this.owner}/issues`, {\n            access_token: accessToken,\n            repo: this.repo,\n            title,\n            body: content,\n            labels: this.labels.join(','),\n        });\n        return normalizeIssue(data);\n    }\n    /**\n     * Get comments of this page according to the issue id\n     *\n     * @see https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoIssuesNumberComments\n     *\n     * @remarks\n     * Gitee V3 does not support sort for issue comments now.\n     */\n    async getComments({ accessToken, issueId, query: { page = 1, perPage = 10 /*, sort = 'desc' */ } = {}, }) {\n        const options = {\n            params: {\n                // pagination\n                page: page,\n                per_page: perPage,\n                // 'sort': 'created',\n                // 'direction': sort,\n                // to avoid caching\n                timestamp: Date.now(),\n            },\n            headers: {\n                Accept: ['application/vnd.gitee.html+json'],\n            },\n        };\n        if (accessToken) {\n            options.params.access_token = accessToken;\n        }\n        const response = await this.$http.get(`repos/${this.owner}/${this.repo}/issues/${issueId}/comments`, options);\n        const count = Number(response.headers.total_count);\n        return {\n            count: count,\n            page: page,\n            perPage: perPage,\n            data: response.data.map(normalizeComment),\n        };\n    }\n    /**\n     * Create a new comment\n     *\n     * @see https://gitee.com/api/v5/swagger#/postV5ReposOwnerRepoIssuesNumberComments\n     */\n    async postComment({ accessToken, issueId, content, }) {\n        const { data } = await this.$http.post(`repos/${this.owner}/${this.repo}/issues/${issueId}/comments`, {\n            body: content,\n            access_token: accessToken,\n        }, {\n            headers: {\n                Accept: ['application/vnd.gitee.html+json'],\n            },\n        });\n        return normalizeComment(data);\n    }\n    /**\n     * Edit a comment\n     *\n     * @see https://gitee.com/api/v5/swagger#/patchV5ReposOwnerRepoIssuesCommentsId\n     */\n    async putComment({ accessToken, commentId, content, }) {\n        const { data } = await this.$http.patch(`repos/${this.owner}/${this.repo}/issues/comments/${commentId}`, {\n            body: content,\n            access_token: accessToken,\n        }, {\n            headers: {\n                Accept: ['application/vnd.gitee.html+json'],\n            },\n        });\n        return normalizeComment(data);\n    }\n    /**\n     * Delete a comment\n     *\n     * @see https://developer.github.com/v3/issues/comments/#delete-a-comment\n     */\n    async deleteComment({ accessToken, commentId, }) {\n        const { status } = await this.$http.delete(`repos/${this.owner}/${this.repo}/issues/comments/${commentId}`, {\n            params: { access_token: accessToken },\n        });\n        return status === 204;\n    }\n    /**\n     * Gitee does not support reactions now\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async getCommentReactions(options) {\n        throw new Error('501 Not Implemented');\n    }\n    /**\n     * Gitee does not support reactions now\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async postCommentReaction(options) {\n        throw new Error('501 Not Implemented');\n    }\n}\n//# sourceMappingURL=index.js.map"]}]}
{"remainingRequest":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js??ref--3-1!/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/lodash/_baseFlatten.js","dependencies":[{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/lodash/_baseFlatten.js","mtime":1603041169010},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/cache-loader/dist/cjs.js","mtime":1603041438982},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js","mtime":1603041438713}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLAogICAgaXNGbGF0dGVuYWJsZSA9IHJlcXVpcmUoJy4vX2lzRmxhdHRlbmFibGUnKTsKLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uCiAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLgogKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuCiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS4KICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LgogKi8KCgpmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkgewogIHZhciBpbmRleCA9IC0xLAogICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTsKICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTsKCiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTsKCiAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHsKICAgICAgaWYgKGRlcHRoID4gMSkgewogICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuCiAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7CiAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlOwogICAgfQogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfQoKbW9kdWxlLmV4cG9ydHMgPSBiYXNlRmxhdHRlbjs="},{"version":3,"sources":["/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/lodash/_baseFlatten.js"],"names":["arrayPush","require","isFlattenable","baseFlatten","array","depth","predicate","isStrict","result","index","length","value","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;AAAA,IACIC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAD3B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,QAA9C,EAAwDC,MAAxD,EAAgE;AAC9D,MAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,MACIC,MAAM,GAAGN,KAAK,CAACM,MADnB;AAGAJ,EAAAA,SAAS,KAAKA,SAAS,GAAGJ,aAAjB,CAAT;AACAM,EAAAA,MAAM,KAAKA,MAAM,GAAG,EAAd,CAAN;;AAEA,SAAO,EAAEC,KAAF,GAAUC,MAAjB,EAAyB;AACvB,QAAIC,KAAK,GAAGP,KAAK,CAACK,KAAD,CAAjB;;AACA,QAAIJ,KAAK,GAAG,CAAR,IAAaC,SAAS,CAACK,KAAD,CAA1B,EAAmC;AACjC,UAAIN,KAAK,GAAG,CAAZ,EAAe;AACb;AACAF,QAAAA,WAAW,CAACQ,KAAD,EAAQN,KAAK,GAAG,CAAhB,EAAmBC,SAAnB,EAA8BC,QAA9B,EAAwCC,MAAxC,CAAX;AACD,OAHD,MAGO;AACLR,QAAAA,SAAS,CAACQ,MAAD,EAASG,KAAT,CAAT;AACD;AACF,KAPD,MAOO,IAAI,CAACJ,QAAL,EAAe;AACpBC,MAAAA,MAAM,CAACA,MAAM,CAACE,MAAR,CAAN,GAAwBC,KAAxB;AACD;AACF;;AACD,SAAOH,MAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBV,WAAjB","sourcesContent":["var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n"]}]}
{"remainingRequest":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js??ref--3-1!/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-github-v3/lib/index.js","dependencies":[{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-github-v3/lib/index.js","mtime":1604064595597},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/cache-loader/dist/cjs.js","mtime":1603041438982},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js","mtime":1603041438713}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import axios from 'axios';\nimport { buildURL, concatURL, getCleanURL, parseQuery } from '@vssue/utils';\nimport { normalizeUser, normalizeIssue, normalizeComment, normalizeReactions, mapReactionName, } from './utils';\n/**\n * Github REST API v3\n *\n * @see https://developer.github.com/v3/\n * @see https://developer.github.com/apps/building-oauth-apps/\n */\nexport default class GithubV3 {\n    constructor({ baseURL = 'https://github.com', owner, repo, labels, clientId, clientSecret, state, proxy, }) {\n        /* istanbul ignore if */\n        if (typeof clientSecret === 'undefined' || typeof proxy === 'undefined') {\n            throw new Error('clientSecret and proxy is required for GitHub V3');\n        }\n        this.baseURL = baseURL;\n        this.owner = owner;\n        this.repo = repo;\n        this.labels = labels;\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.state = state;\n        this.proxy = proxy;\n        this.$http = axios.create({\n            baseURL: baseURL === 'https://github.com'\n                ? 'https://api.github.com'\n                : concatURL(baseURL, 'api/v3'),\n            headers: {\n                Accept: 'application/vnd.github.v3+json',\n            },\n        });\n        this.$http.interceptors.response.use(response => {\n            if (response.data && response.data.error) {\n                return Promise.reject(new Error(response.data.error_description));\n            }\n            return response;\n        }, error => {\n            // 403 rate limit exceeded in OPTIONS request will cause a Network Error\n            // here we always treat Network Error as 403 rate limit exceeded\n            // @see https://github.com/axios/axios/issues/838\n            /* istanbul ignore next */\n            if (typeof error.response === 'undefined' &&\n                error.message === 'Network Error') {\n                error.response = {\n                    status: 403,\n                };\n            }\n            return Promise.reject(error);\n        });\n    }\n    /**\n     * The platform api info\n     */\n    get platform() {\n        return {\n            name: 'GitHub',\n            link: this.baseURL,\n            version: 'v3',\n            meta: {\n                reactable: true,\n                sortable: false,\n            },\n        };\n    }\n    /**\n     * Redirect to the authorization page of platform.\n     *\n     * @see https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#1-request-a-users-github-identity\n     */\n    redirectAuth() {\n        window.location.href = buildURL(concatURL(this.baseURL, 'login/oauth/authorize'), {\n            client_id: this.clientId,\n            redirect_uri: window.location.href,\n            scope: 'public_repo',\n            state: this.state,\n        });\n    }\n    /**\n     * Handle authorization.\n     *\n     * @see https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/\n     *\n     * @remarks\n     * If the `code` and `state` exist in the query, and the `state` matches, remove them from query, and try to get the access token.\n     */\n    async handleAuth() {\n        const query = parseQuery(window.location.search);\n        if (query.code) {\n            if (query.state !== this.state) {\n                return null;\n            }\n            const code = query.code;\n            delete query.code;\n            delete query.state;\n            const replaceURL = buildURL(getCleanURL(window.location.href), query) +\n                window.location.hash;\n            window.history.replaceState(null, '', replaceURL);\n            const accessToken = await this.getAccessToken({ code });\n            return accessToken;\n        }\n        return null;\n    }\n    /**\n     * Get user access token via `code`\n     *\n     * @see https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#2-users-are-redirected-back-to-your-site-by-github\n     */\n    async getAccessToken({ code }) {\n        /**\n         * access_token api does not support cors\n         * @see https://github.com/isaacs/github/issues/330\n         */\n        const originalURL = concatURL(this.baseURL, 'login/oauth/access_token');\n        const proxyURL = typeof this.proxy === 'function' ? this.proxy(originalURL) : this.proxy;\n        const { data } = await this.$http.post(proxyURL, {\n            client_id: this.clientId,\n            client_secret: this.clientSecret,\n            code,\n        }, {\n            headers: {\n                Accept: 'application/json',\n            },\n        });\n        return data.access_token;\n    }\n    /**\n     * Get the logged-in user with access token.\n     *\n     * @see https://developer.github.com/v3/users/#get-the-authenticated-user\n     */\n    async getUser({ accessToken, }) {\n        const { data } = await this.$http.get('user', {\n            headers: { Authorization: `token ${accessToken}` },\n        });\n        return normalizeUser(data);\n    }\n    /**\n     * Get issue of this page according to the issue id or the issue title\n     *\n     * @see https://developer.github.com/v3/issues/#list-issues-for-a-repository\n     * @see https://developer.github.com/v3/issues/#get-a-single-issue\n     * @see https://developer.github.com/v3/#pagination\n     * @see https://developer.github.com/v3/search/#search-issues-and-pull-requests\n     */\n    async getIssue({ accessToken, issueId, issueTitle, }) {\n        const options = {};\n        if (accessToken) {\n            options.headers = {\n                Authorization: `token ${accessToken}`,\n            };\n        }\n        if (issueId) {\n            try {\n                options.params = {\n                    // to avoid caching\n                    timestamp: Date.now(),\n                };\n                const { data } = await this.$http.get(`repos/${this.owner}/${this.repo}/issues/${issueId}`, options);\n                return normalizeIssue(data);\n            }\n            catch (e) {\n                if (e.response && e.response.status === 404) {\n                    return null;\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        else {\n            options.params = {\n                q: [\n                    `\"${issueTitle}\"`,\n                    `is:issue`,\n                    `in:title`,\n                    `repo:${this.owner}/${this.repo}`,\n                    `is:public`,\n                    ...this.labels.map(label => `label:${label}`),\n                ].join(' '),\n                // to avoid caching\n                timestamp: Date.now(),\n            };\n            const { data } = await this.$http.get(`search/issues`, options);\n            const issue = data.items\n                .map(normalizeIssue)\n                .find(item => item.title === issueTitle);\n            return issue || null;\n        }\n    }\n    /**\n     * Create a new issue\n     *\n     * @see https://developer.github.com/v3/issues/#create-an-issue\n     */\n    async postIssue({ accessToken, title, content, }) {\n        const { data } = await this.$http.post(`repos/${this.owner}/${this.repo}/issues`, {\n            title,\n            body: content,\n            labels: this.labels,\n        }, {\n            headers: { Authorization: `token ${accessToken}` },\n        });\n        return normalizeIssue(data);\n    }\n    /**\n     * Get comments of this page according to the issue id\n     *\n     * @see https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue\n     * @see https://developer.github.com/v3/#pagination\n     *\n     * @remarks\n     * Github V3 does not support sort for issue comments now.\n     * Github V3 have to request the parent issue to get the count of comments.\n     */\n    async getComments({ accessToken, issueId, query: { page = 1, perPage = 10 /*, sort = 'desc' */ } = {}, }) {\n        const issueOptions = {\n            params: {\n                // to avoid caching\n                timestamp: Date.now(),\n            },\n        };\n        const commentsOptions = {\n            params: {\n                // pagination\n                page: page,\n                per_page: perPage,\n                /**\n                 * github v3 api does not support sort for issue comments\n                 * have sent feedback to github support\n                 */\n                // 'sort': 'created',\n                // 'direction': sort,\n                // to avoid caching\n                timestamp: Date.now(),\n            },\n            headers: {\n                Accept: [\n                    'application/vnd.github.v3.raw+json',\n                    'application/vnd.github.v3.html+json',\n                    'application/vnd.github.squirrel-girl-preview',\n                ],\n            },\n        };\n        if (accessToken) {\n            issueOptions.headers = {\n                Authorization: `token ${accessToken}`,\n            };\n            commentsOptions.headers.Authorization = `token ${accessToken}`;\n        }\n        // github v3 have to get the total count of comments by requesting the issue\n        const [issueRes, commentsRes] = await Promise.all([\n            this.$http.get(`repos/${this.owner}/${this.repo}/issues/${issueId}`, issueOptions),\n            this.$http.get(`repos/${this.owner}/${this.repo}/issues/${issueId}/comments`, commentsOptions),\n        ]);\n        // it's annoying that have to get the page and per_page from the `Link` header\n        const linkHeader = commentsRes.headers.link || null;\n        /* istanbul ignore next */\n        const thisPage = /rel=\"next\"/.test(linkHeader)\n            ? Number(linkHeader.replace(/^.*[^_]page=(\\d*).*rel=\"next\".*$/, '$1')) - 1\n            : /rel=\"prev\"/.test(linkHeader)\n                ? Number(linkHeader.replace(/^.*[^_]page=(\\d*).*rel=\"prev\".*$/, '$1')) + 1\n                : 1;\n        /* istanbul ignore next */\n        const thisPerPage = linkHeader\n            ? Number(linkHeader.replace(/^.*per_page=(\\d*).*$/, '$1'))\n            : perPage;\n        return {\n            count: Number(issueRes.data.comments),\n            page: thisPage,\n            perPage: thisPerPage,\n            data: commentsRes.data.map(normalizeComment),\n        };\n    }\n    /**\n     * Create a new comment\n     *\n     * @see https://developer.github.com/v3/issues/comments/#create-a-comment\n     */\n    async postComment({ accessToken, issueId, content, }) {\n        const { data } = await this.$http.post(`repos/${this.owner}/${this.repo}/issues/${issueId}/comments`, {\n            body: content,\n        }, {\n            headers: {\n                Authorization: `token ${accessToken}`,\n                Accept: [\n                    'application/vnd.github.v3.raw+json',\n                    'application/vnd.github.v3.html+json',\n                    'application/vnd.github.squirrel-girl-preview',\n                ],\n            },\n        });\n        return normalizeComment(data);\n    }\n    /**\n     * Edit a comment\n     *\n     * @see https://developer.github.com/v3/issues/comments/#edit-a-comment\n     */\n    async putComment({ accessToken, commentId, content, }) {\n        const { data } = await this.$http.patch(`repos/${this.owner}/${this.repo}/issues/comments/${commentId}`, {\n            body: content,\n        }, {\n            headers: {\n                Authorization: `token ${accessToken}`,\n                Accept: [\n                    'application/vnd.github.v3.raw+json',\n                    'application/vnd.github.v3.html+json',\n                    'application/vnd.github.squirrel-girl-preview',\n                ],\n            },\n        });\n        return normalizeComment(data);\n    }\n    /**\n     * Delete a comment\n     *\n     * @see https://developer.github.com/v3/issues/comments/#delete-a-comment\n     */\n    async deleteComment({ accessToken, commentId, }) {\n        const { status } = await this.$http.delete(`repos/${this.owner}/${this.repo}/issues/comments/${commentId}`, {\n            headers: { Authorization: `token ${accessToken}` },\n        });\n        return status === 204;\n    }\n    /**\n     * Get reactions of a comment\n     *\n     * @see https://developer.github.com/v3/issues/comments/#get-a-single-comment\n     * @see https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment\n     *\n     * @remarks\n     * The `List reactions for an issue comment` API also returns author of each reaction.\n     * As we only need the count, use the `Get a single comment` API is much simpler.\n     */\n    async getCommentReactions({ accessToken, commentId, }) {\n        const { data } = await this.$http.get(`repos/${this.owner}/${this.repo}/issues/comments/${commentId}`, {\n            params: {\n                // to avoid caching\n                timestamp: Date.now(),\n            },\n            headers: {\n                Authorization: `token ${accessToken}`,\n                Accept: 'application/vnd.github.squirrel-girl-preview',\n            },\n        });\n        return normalizeReactions(data.reactions);\n    }\n    /**\n     * Create a new reaction of a comment\n     *\n     * @see https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment\n     */\n    async postCommentReaction({ accessToken, commentId, reaction, }) {\n        const response = await this.$http.post(`repos/${this.owner}/${this.repo}/issues/comments/${commentId}/reactions`, {\n            content: mapReactionName(reaction),\n        }, {\n            headers: {\n                Authorization: `token ${accessToken}`,\n                Accept: 'application/vnd.github.squirrel-girl-preview',\n            },\n        });\n        // 200 OK if the reaction is already token\n        if (response.status === 200) {\n            return this.deleteCommentReaction({\n                accessToken,\n                commentId,\n                reactionId: response.data.id,\n            });\n        }\n        // 201 CREATED\n        return response.status === 201;\n    }\n    /**\n     * Delete a reaction of a comment\n     *\n     * @see https://developer.github.com/v3/reactions/#delete-a-reaction\n     */\n    async deleteCommentReaction({ accessToken, commentId, reactionId, }) {\n        const response = await this.$http.delete(`repos/${this.owner}/${this.repo}/issues/comments/${commentId}/reactions/${reactionId}`, {\n            headers: {\n                Authorization: `token ${accessToken}`,\n                Accept: 'application/vnd.github.squirrel-girl-preview',\n            },\n        });\n        return response.status === 204;\n    }\n}\n//# sourceMappingURL=index.js.map"]}]}
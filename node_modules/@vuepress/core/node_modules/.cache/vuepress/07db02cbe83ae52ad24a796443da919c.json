{"remainingRequest":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js??ref--3-1!/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-gitlab-v4/lib/index.js","dependencies":[{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-gitlab-v4/lib/index.js","mtime":1604064595983},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/cache-loader/dist/cjs.js","mtime":1603041438982},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js","mtime":1603041438713}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import axios from 'axios';\nimport { buildQuery, buildURL, concatURL, getCleanURL, parseQuery, } from '@vssue/utils';\nimport { normalizeUser, normalizeIssue, normalizeComment, normalizeReactions, mapReactionName, } from './utils';\n/**\n * GitLab API V4\n *\n * @see https://docs.gitlab.com/ce/api/\n * @see https://docs.gitlab.com/ce/api/oauth2.html\n */\nexport default class GitlabV4 {\n    constructor({ baseURL = 'https://gitlab.com', owner, repo, labels, clientId, state, }) {\n        this.baseURL = baseURL;\n        this.owner = owner;\n        this.repo = repo;\n        this.labels = labels;\n        this.clientId = clientId;\n        this.state = state;\n        // @see https://docs.gitlab.com/ce/api/README.html#namespaced-path-encoding\n        this._encodedRepo = encodeURIComponent(`${this.owner}/${this.repo}`);\n        this.$http = axios.create({\n            baseURL: concatURL(baseURL, 'api/v4'),\n            headers: {\n                Accept: 'application/json',\n            },\n        });\n    }\n    /**\n     * The platform api info\n     */\n    get platform() {\n        return {\n            name: 'GitLab',\n            link: this.baseURL,\n            version: 'v4',\n            meta: {\n                reactable: true,\n                sortable: true,\n            },\n        };\n    }\n    /**\n     * Redirect to the authorization page of platform.\n     *\n     * @see https://docs.gitlab.com/ce/api/oauth2.html#1-requesting-authorization-code\n     */\n    redirectAuth() {\n        window.location.href = buildURL(concatURL(this.baseURL, 'oauth/authorize'), {\n            client_id: this.clientId,\n            redirect_uri: window.location.href,\n            response_type: 'token',\n            state: this.state,\n        });\n    }\n    /**\n     * Handle authorization.\n     *\n     * @see https://docs.gitlab.com/ce/api/oauth2.html#implicit-grant-flow\n     *\n     * @remarks\n     * If the `access_token` and `state` exist in the query, and the `state` matches, remove them from query, and return the access token.\n     */\n    async handleAuth() {\n        const hash = parseQuery(window.location.hash.slice(1));\n        if (!hash.access_token || hash.state !== this.state) {\n            return null;\n        }\n        const accessToken = hash.access_token;\n        delete hash.access_token;\n        delete hash.token_type;\n        delete hash.expires_in;\n        delete hash.state;\n        const hashString = buildQuery(hash);\n        const newHash = hashString ? `#${hashString}` : '';\n        const replaceURL = `${getCleanURL(window.location.href)}${window.location.search}${newHash}`;\n        window.history.replaceState(null, '', replaceURL);\n        return accessToken;\n    }\n    /**\n     * Get the logged-in user with access token.\n     */\n    async getUser({ accessToken, }) {\n        const { data } = await this.$http.get('user', {\n            headers: { Authorization: `Bearer ${accessToken}` },\n        });\n        return normalizeUser(data);\n    }\n    /**\n     * Get issue of this page according to the issue id or the issue title\n     *\n     * @see https://docs.gitlab.com/ce/api/issues.html#single-issue\n     * @see https://docs.gitlab.com/ce/api/issues.html#list-issues\n     * @see https://docs.gitlab.com/ce/api/README.html#pagination\n     */\n    async getIssue({ accessToken, issueId, issueTitle, }) {\n        const options = {};\n        if (accessToken) {\n            options.headers = {\n                Authorization: `Bearer ${accessToken}`,\n            };\n        }\n        if (issueId) {\n            try {\n                const { data } = await this.$http.get(`projects/${this._encodedRepo}/issues/${issueId}`, options);\n                return normalizeIssue(data);\n            }\n            catch (e) {\n                if (e.response && e.response.status === 404) {\n                    return null;\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        else {\n            options.params = {\n                labels: this.labels.join(','),\n                order_by: 'created_at',\n                sort: 'asc',\n                search: issueTitle,\n            };\n            const { data } = await this.$http.get(`projects/${this._encodedRepo}/issues`, options);\n            const issue = data\n                .map(normalizeIssue)\n                .find(item => item.title === issueTitle);\n            return issue || null;\n        }\n    }\n    /**\n     * Create a new issue\n     *\n     * @see https://docs.gitlab.com/ce/api/issues.html#new-issue\n     */\n    async postIssue({ accessToken, title, content, }) {\n        const { data } = await this.$http.post(`projects/${this._encodedRepo}/issues`, {\n            title,\n            description: content,\n            labels: this.labels.join(','),\n        }, {\n            headers: { Authorization: `Bearer ${accessToken}` },\n        });\n        return normalizeIssue(data);\n    }\n    /**\n     * Get comments of this page according to the issue id\n     *\n     * @see https://docs.gitlab.com/ce/api/notes.html#list-project-issue-notes\n     * @see https://docs.gitlab.com/ce/api/README.html#pagination\n     *\n     * @remarks\n     * Cannot get the HTML content and the reactions (award_emoji) here.\n     * So have to request them via `markdown` and `award_emoji` API.\n     */\n    async getComments({ accessToken, issueId, query: { page = 1, perPage = 10, sort = 'desc' } = {}, }) {\n        const options = {\n            params: {\n                // pagination\n                page: page,\n                per_page: perPage,\n                order_by: 'created_at',\n                sort: sort,\n            },\n        };\n        if (accessToken) {\n            options.headers = {\n                Authorization: `Bearer ${accessToken}`,\n            };\n        }\n        const response = await this.$http.get(`projects/${this._encodedRepo}/issues/${issueId}/notes`, options);\n        const commentsRaw = response.data;\n        // gitlab api v4 should get parsed markdown content and reactions by other api\n        // this is potentially to cause 429 Too Many Requests\n        const getCommentsMeta = [];\n        for (const comment of commentsRaw) {\n            getCommentsMeta.push((async () => {\n                comment.body_html = await this.getMarkdownContent({\n                    accessToken: accessToken,\n                    contentRaw: comment.body,\n                });\n            })());\n            getCommentsMeta.push((async () => {\n                comment.reactions = await this.getCommentReactions({\n                    accessToken: accessToken,\n                    issueId: issueId,\n                    commentId: comment.id,\n                });\n            })());\n        }\n        await Promise.all(getCommentsMeta);\n        return {\n            count: Number(response.headers['x-total']),\n            page: Number(response.headers['x-page']),\n            perPage: Number(response.headers['x-per-page']),\n            data: commentsRaw.map(normalizeComment),\n        };\n    }\n    /**\n     * Create a new comment\n     *\n     * @see https://docs.gitlab.com/ce/api/notes.html#create-new-issue-note\n     */\n    async postComment({ accessToken, issueId, content, }) {\n        const { data } = await this.$http.post(`projects/${this._encodedRepo}/issues/${issueId}/notes`, {\n            body: content,\n        }, {\n            headers: { Authorization: `Bearer ${accessToken}` },\n        });\n        return normalizeComment(data);\n    }\n    /**\n     * Edit a comment\n     *\n     * @see https://docs.gitlab.com/ce/api/notes.html#modify-existing-issue-note\n     */\n    async putComment({ accessToken, issueId, commentId, content, }) {\n        const { data } = await this.$http.put(`projects/${this._encodedRepo}/issues/${issueId}/notes/${commentId}`, {\n            body: content,\n        }, {\n            headers: { Authorization: `Bearer ${accessToken}` },\n        });\n        const [contentHTML, reactions] = await Promise.all([\n            this.getMarkdownContent({\n                accessToken: accessToken,\n                contentRaw: data.body,\n            }),\n            this.getCommentReactions({\n                accessToken: accessToken,\n                issueId: issueId,\n                commentId: data.id,\n            }),\n        ]);\n        data.body_html = contentHTML;\n        data.reactions = reactions;\n        return normalizeComment(data);\n    }\n    /**\n     * Delete a comment\n     *\n     * @see https://docs.gitlab.com/ce/api/notes.html#delete-an-issue-note\n     */\n    async deleteComment({ accessToken, issueId, commentId, }) {\n        const { status } = await this.$http.delete(`projects/${this._encodedRepo}/issues/${issueId}/notes/${commentId}`, {\n            headers: { Authorization: `Bearer ${accessToken}` },\n        });\n        return status === 204;\n    }\n    /**\n     * Get reactions of a comment\n     *\n     * @see https://docs.gitlab.com/ce/api/award_emoji.html#list-an-awardables-award-emoji\n     */\n    async getCommentReactions({ accessToken, issueId, commentId, }) {\n        const { data } = await this.$http.get(`projects/${this._encodedRepo}/issues/${issueId}/notes/${commentId}/award_emoji`, {\n            headers: { Authorization: `Bearer ${accessToken}` },\n        });\n        return normalizeReactions(data);\n    }\n    /**\n     * Create a new reaction of a comment\n     *\n     * @see https://docs.gitlab.com/ce/api/award_emoji.html#award-a-new-emoji\n     */\n    async postCommentReaction({ issueId, commentId, reaction, accessToken, }) {\n        try {\n            const response = await this.$http.post(`projects/${this._encodedRepo}/issues/${issueId}/notes/${commentId}/award_emoji`, {\n                name: mapReactionName(reaction),\n            }, {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                },\n            });\n            return response.status === 201;\n        }\n        catch (e) {\n            // it could be a bug of gitlab\n            // if a reaction (award emoji) has already existed, it returns a 404 response with a buggy message\n            // have submitted an issue: https://gitlab.com/gitlab-org/gitlab-ce/issues/56147\n            /* istanbul ignore next */\n            if (e.response && e.response.status === 404) {\n                return false;\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    /**\n     * Get the parse HTML of markdown content\n     *\n     * @see https://docs.gitlab.com/ce/api/markdown.html\n     */\n    async getMarkdownContent({ accessToken, contentRaw, }) {\n        const options = {};\n        if (accessToken) {\n            options.headers = {\n                Authorization: `Bearer ${accessToken}`,\n            };\n        }\n        const { data } = await this.$http.post(`markdown`, {\n            text: contentRaw,\n            gfm: true,\n        }, options);\n        return data.html;\n    }\n}\n//# sourceMappingURL=index.js.map"]}]}
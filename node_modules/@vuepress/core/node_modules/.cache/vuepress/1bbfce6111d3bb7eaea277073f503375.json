{"remainingRequest":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js??ref--3-1!/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-github-v4/lib/index.js","dependencies":[{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-github-v4/lib/index.js","mtime":1604064595705},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/cache-loader/dist/cjs.js","mtime":1603041438982},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js","mtime":1603041438713}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
{"remainingRequest":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js??ref--3-1!/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-github-v4/lib/index.js","dependencies":[{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-github-v4/lib/index.js","mtime":1604064595705},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/cache-loader/dist/cjs.js","mtime":1603041438982},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js","mtime":1603041438713}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import axios from 'axios';\nimport { buildURL, concatURL, getCleanURL, parseQuery } from '@vssue/utils';\nimport { normalizeUser, normalizeIssue, normalizeComment, normalizeReactions, mapReactionName, } from './utils';\n/**\n * Github GraphQL API v4\n *\n * @see https://developer.github.com/v4/\n * @see https://developer.github.com/v4/explorer/\n * @see https://developer.github.com/apps/building-oauth-apps/\n */\nexport default class GithubV4 {\n    constructor({ baseURL = 'https://github.com', owner, repo, labels, clientId, clientSecret, state, proxy, }) {\n        if (typeof clientSecret === 'undefined' || typeof proxy === 'undefined') {\n            throw new Error('clientSecret and proxy is required for GitHub V4');\n        }\n        this.baseURL = baseURL;\n        this.owner = owner;\n        this.repo = repo;\n        this.labels = labels;\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.state = state;\n        this.proxy = proxy;\n        this._pageInfo = {\n            page: 1,\n            startCursor: null,\n            endCursor: null,\n            sort: null,\n            perPage: null,\n        };\n        this._issueNodeId = null;\n        this.$http = axios.create({\n            baseURL: baseURL === 'https://github.com'\n                ? 'https://api.github.com'\n                : concatURL(baseURL, 'api'),\n            headers: {\n                Accept: 'application/vnd.github.v3+json',\n            },\n        });\n        this.$http.interceptors.response.use(response => {\n            if (response.data.error) {\n                return Promise.reject(response.data.error_description);\n            }\n            if (response.data.errors) {\n                return Promise.reject(response.data.errors[0].message);\n            }\n            return response;\n        });\n    }\n    /**\n     * The platform api info\n     */\n    get platform() {\n        return {\n            name: 'GitHub',\n            link: this.baseURL,\n            version: 'v4',\n            meta: {\n                reactable: true,\n                sortable: true,\n            },\n        };\n    }\n    /**\n     * Redirect to the authorization page of platform.\n     *\n     * @see https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#1-request-a-users-github-identity\n     */\n    redirectAuth() {\n        window.location.href = buildURL(concatURL(this.baseURL, 'login/oauth/authorize'), {\n            client_id: this.clientId,\n            redirect_uri: window.location.href,\n            scope: 'public_repo',\n            state: this.state,\n        });\n    }\n    /**\n     * Handle authorization.\n     *\n     * @see https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/\n     *\n     * @remarks\n     * If the `code` and `state` exist in the query, and the `state` matches, remove them from query, and try to get the access token.\n     */\n    async handleAuth() {\n        const query = parseQuery(window.location.search);\n        if (query.code) {\n            if (query.state !== this.state) {\n                return null;\n            }\n            const code = query.code;\n            delete query.code;\n            delete query.state;\n            const replaceURL = buildURL(getCleanURL(window.location.href), query) +\n                window.location.hash;\n            window.history.replaceState(null, '', replaceURL);\n            const accessToken = await this.getAccessToken({ code });\n            return accessToken;\n        }\n        return null;\n    }\n    /**\n     * Get user access token via `code`\n     *\n     * @see https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#2-users-are-redirected-back-to-your-site-by-github\n     */\n    async getAccessToken({ code }) {\n        /**\n         * access_token api does not support cors\n         * @see https://github.com/isaacs/github/issues/330\n         */\n        const originalURL = concatURL(this.baseURL, 'login/oauth/access_token');\n        const proxyURL = typeof this.proxy === 'function' ? this.proxy(originalURL) : this.proxy;\n        const { data } = await this.$http.post(proxyURL, {\n            client_id: this.clientId,\n            client_secret: this.clientSecret,\n            code,\n        }, {\n            headers: {\n                Accept: 'application/json',\n            },\n        });\n        return data.access_token;\n    }\n    /**\n     * Get the logged-in user with access token.\n     *\n     * @see https://developer.github.com/v4/query/ viewer\n     * @see https://developer.github.com/v4/object/user/\n     */\n    async getUser({ accessToken, }) {\n        const { data } = await this.$http.post('graphql', {\n            query: `\\\nquery getUser {\n  viewer {\n    login\n    avatarUrl\n    url\n  }\n}`,\n        }, {\n            headers: { Authorization: `token ${accessToken}` },\n        });\n        return normalizeUser(data.data.viewer);\n    }\n    /**\n     * Get issue of this page according to the issue id or the issue title\n     *\n     * @see https://developer.github.com/v4/object/repository/\n     * @see https://developer.github.com/v4/object/issueconnection/\n     * @see https://developer.github.com/v4/object/issue/\n     *\n     * @remarks\n     * The IssueConnection does not have title filter for now, and the number of results is limited to 100.\n     * For now, if issues with the labels are more than 100, we have to request the next page(not implemented yet).\n     */\n    async getIssue({ accessToken, issueId, issueTitle, }) {\n        const options = {};\n        if (accessToken) {\n            options.headers = {\n                Authorization: `token ${accessToken}`,\n            };\n        }\n        if (issueId) {\n            try {\n                const { data } = await this.$http.post(`graphql`, {\n                    query: `\\\nquery getIssueById {\n  repository(owner: \"${this.owner}\", name: \"${this.repo}\") {\n    issue (number: ${issueId}) {\n      id\n      number\n      title\n      body\n      url\n    }\n  }\n}`,\n                }, options);\n                // postComment needs issue NodeId, so we store it internally\n                this._issueNodeId = data.data.repository.issue.id;\n                return normalizeIssue(data.data.repository.issue);\n            }\n            catch (e) {\n                if (e.response && e.response.status === 404) {\n                    return null;\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        else {\n            const query = [\n                `\"${issueTitle}\"`,\n                `in:title`,\n                `repo:${this.owner}/${this.repo}`,\n                `is:public`,\n                ...this.labels.map(label => `label:${label}`),\n            ].join(' ');\n            const { data } = await this.$http.post(`graphql`, {\n                variables: {\n                    query,\n                },\n                query: `\\\nquery getIssueByTitle(\n  $query: String!\n) {\n  search(\n    query: $query\n    type: ISSUE\n    first: 20\n    ) {\n      nodes {\n      ... on Issue {\n        id\n        number\n        title\n        body\n        url\n      }\n    }\n  }\n}`,\n            }, options);\n            const issue = data.data.search.nodes.find(item => item.title === issueTitle);\n            // postComment needs issue NodeId, so we store it internally\n            if (issue) {\n                this._issueNodeId = issue.id;\n                return normalizeIssue(issue);\n            }\n            return null;\n        }\n    }\n    /**\n     * Create a new issue\n     *\n     * @see https://developer.github.com/v4/mutation/createissue/\n     * @see https://developer.github.com/v4/input_object/createissueinput/\n     *\n     * @remarks\n     * Creating issue requires repositoryId, which should be requested in an extra request.\n     * Creating issue with labels requires labelIds, which should be requested in an extra request, or create the label if it does not exist.\n     * Endpoints for creating labels has not been implemented by GitHub yet (see https://developer.github.com/v4/mutation/createlabel/)\n     *\n     * For these reasons, fallback to v3 for now\n     */\n    async postIssue({ accessToken, title, content, }) {\n        const { data } = await this.$http.post(`repos/${this.owner}/${this.repo}/issues`, {\n            title,\n            body: content,\n            labels: this.labels,\n        }, {\n            headers: { Authorization: `token ${accessToken}` },\n        });\n        // `html_url` in v3\n        // `url` in v4\n        data.url = data.html_url;\n        // postComment needs issue NodeId, so we store it internally\n        this._issueNodeId = data.node_id;\n        return normalizeIssue(data);\n    }\n    /**\n     * Get comments of this page according to the issue id\n     *\n     * @see https://developer.github.com/v4/object/issuecommentconnection/\n     *\n     * @remarks\n     * No offset implemented, so it's difficult to implement REST-like pagination\n     * For now, we use an internal `_pageInfo` var to hack that\n     */\n    async getComments({ accessToken, issueId, query: { page = 1, perPage = 10, sort = 'desc' } = {}, }) {\n        const options = {};\n        if (accessToken) {\n            options.headers = {\n                Authorization: `token ${accessToken}`,\n            };\n        }\n        if (this._pageInfo.sort !== null && sort !== this._pageInfo.sort) {\n            page = 1;\n        }\n        const { firstOrLast, afterOrBefore, cursor } = this._getQueryParams({\n            page,\n            sort,\n        });\n        const { data } = await this.$http.post(`graphql`, {\n            variables: {\n                owner: this.owner,\n                repo: this.repo,\n                issueId,\n                perPage,\n            },\n            query: `\\\nquery getComments(\n  $owner: String!\n  $repo: String!\n  $issueId: Int!\n  $perPage: Int!\n) {\n  repository(owner: $owner, name: $repo) {\n    issue(number: $issueId) {\n      comments(\n        ${firstOrLast}: $perPage\n        ${afterOrBefore === null ? '' : `${afterOrBefore}: \"${cursor}\"`}\n      ) {\n        totalCount\n        pageInfo {\n          endCursor\n          startCursor\n        }\n        nodes {\n          id\n          body\n          bodyHTML\n          createdAt\n          updatedAt\n          author {\n            avatarUrl\n            login\n            url\n          }\n          reactionGroups {\n            users (first: 0) {\n              totalCount\n            }\n            content\n          }\n        }\n      }\n    }\n  }\n}`,\n        }, options);\n        const comments = data.data.repository.issue.comments;\n        if (sort === 'desc') {\n            comments.nodes.reverse();\n        }\n        this._pageInfo = {\n            page,\n            startCursor: comments.pageInfo.startCursor,\n            endCursor: comments.pageInfo.endCursor,\n            sort,\n            perPage,\n        };\n        return {\n            count: comments.totalCount,\n            page: page,\n            perPage: perPage,\n            data: comments.nodes.map(normalizeComment),\n        };\n    }\n    /**\n     * Create a new comment\n     *\n     * @see https://developer.github.com/v4/mutation/addcomment/\n     * @see https://developer.github.com/v4/input_object/addcommentinput/\n     */\n    async postComment({ accessToken, content, }) {\n        const { data } = await this.$http.post(`graphql`, {\n            variables: {\n                // postComment needs issue NodeId, so we store it internally\n                issueNodeId: this._issueNodeId,\n                content,\n            },\n            query: `\\\nmutation postComment(\n  $issueNodeId: ID!\n  $content: String!\n) {\n  addComment(\n    input: {\n      subjectId: $issueNodeId\n      body: $content\n    }\n  ) {\n    commentEdge {\n      node {\n        id\n        body\n        bodyHTML\n        createdAt\n        updatedAt\n        author {\n          avatarUrl\n          login\n          url\n        }\n        reactionGroups {\n          users (first: 0) {\n            totalCount\n          }\n          content\n        }\n      }\n    }\n  }\n}`,\n        }, {\n            headers: {\n                Authorization: `token ${accessToken}`,\n            },\n        });\n        return normalizeComment(data.data.addComment.commentEdge.node);\n    }\n    /**\n     * Edit a comment\n     *\n     * @see https://developer.github.com/v4/mutation/updateissuecomment/\n     * @see https://developer.github.com/v4/input_object/updateissuecommentinput/\n     */\n    async putComment({ accessToken, commentId, content, }) {\n        const { data } = await this.$http.post(`graphql`, {\n            variables: {\n                commentId,\n                content,\n            },\n            query: `\\\nmutation putComment(\n  $commentId: ID!,\n  $content: String!,\n) {\n  updateIssueComment(input: {\n    id: $commentId\n    body: $content\n  }) {\n    issueComment {\n      id\n      body\n      bodyHTML\n      createdAt\n      updatedAt\n      author {\n        avatarUrl\n        login\n        url\n      }\n      reactionGroups {\n        users (first: 0) {\n          totalCount\n        }\n        content\n      }\n    }\n  }\n}`,\n        }, {\n            headers: {\n                Authorization: `token ${accessToken}`,\n            },\n        });\n        return normalizeComment(data.data.updateIssueComment.issueComment);\n    }\n    /**\n     * Delete a comment\n     *\n     * @see https://developer.github.com/v4/mutation/deleteissuecomment/\n     */\n    async deleteComment({ accessToken, commentId, }) {\n        await this.$http.post(`graphql`, {\n            variables: {\n                commentId,\n            },\n            query: `\\\nmutation deleteComment(\n  $commentId: ID!,\n) {\n  deleteIssueComment(input: {\n    id: $commentId\n  }) {\n    clientMutationId\n  }\n}`,\n        }, {\n            headers: {\n                Authorization: `token ${accessToken}`,\n            },\n        });\n        return true;\n    }\n    /**\n     * Get reactions of a comment\n     *\n     * @remarks\n     * This query has not been implemented, use the comments query instead\n     */\n    async getCommentReactions({ accessToken, issueId, commentId, }) {\n        const { firstOrLast, afterOrBefore, cursor } = this._getQueryParams();\n        const { data } = await this.$http.post(`graphql`, {\n            variables: {\n                owner: this.owner,\n                repo: this.repo,\n                issueId,\n                perPage: this._pageInfo.perPage,\n            },\n            query: `\\\nquery getComments(\n  $owner: String!\n  $repo: String!\n  $issueId: Int!\n  $perPage: Int!\n) {\n  repository(owner: $owner, name: $repo) {\n    issue(number: $issueId) {\n      comments(\n        ${firstOrLast}: $perPage\n        ${afterOrBefore === null ? '' : `${afterOrBefore}: \"${cursor}\"`}\n      ) {\n        nodes {\n          id\n          reactionGroups {\n            users (first: 0) {\n              totalCount\n            }\n            content\n          }\n        }\n      }\n    }\n  }\n}`,\n        }, {\n            headers: { Authorization: `token ${accessToken}` },\n        });\n        const comment = data.data.repository.issue.comments.nodes.find(item => item.id === commentId);\n        return normalizeReactions(comment.reactionGroups);\n    }\n    /**\n     * Create a new reaction of a comment\n     *\n     * @see https://developer.github.com/v4/mutation/addreaction/\n     * @see https://developer.github.com/v4/input_object/addreactioninput/\n     */\n    async postCommentReaction({ accessToken, commentId, reaction, }) {\n        await this.$http.post(`graphql`, {\n            variables: {\n                commentId,\n                content: mapReactionName(reaction),\n            },\n            query: `\\\nmutation postCommentReaction(\n  $commentId: ID!,\n  $content: ReactionContent!,\n) {\n  addReaction(input: {\n    subjectId: $commentId\n    content: $content\n  }) {\n    reaction {\n      databaseId\n    }\n  }\n}`,\n        }, {\n            headers: { Authorization: `token ${accessToken}` },\n        });\n        return true;\n    }\n    _getQueryParams({ page = this._pageInfo.page, sort = this._pageInfo.sort, } = {}) {\n        let firstOrLast;\n        let afterOrBefore;\n        let cursor;\n        if (page === 1) {\n            firstOrLast = sort === 'asc' ? 'first' : 'last';\n            afterOrBefore = null;\n            cursor = null;\n        }\n        else {\n            if (sort === 'asc') {\n                if (page > this._pageInfo.page) {\n                    firstOrLast = 'first';\n                    afterOrBefore = 'after';\n                    cursor = this._pageInfo.endCursor;\n                }\n                else {\n                    firstOrLast = 'last';\n                    afterOrBefore = 'before';\n                    cursor = this._pageInfo.startCursor;\n                }\n            }\n            else {\n                if (page > this._pageInfo.page) {\n                    firstOrLast = 'last';\n                    afterOrBefore = 'before';\n                    cursor = this._pageInfo.startCursor;\n                }\n                else {\n                    firstOrLast = 'first';\n                    afterOrBefore = 'after';\n                    cursor = this._pageInfo.endCursor;\n                }\n            }\n        }\n        return {\n            firstOrLast,\n            afterOrBefore,\n            cursor,\n        };\n    }\n}\n//# sourceMappingURL=index.js.map"]}]}
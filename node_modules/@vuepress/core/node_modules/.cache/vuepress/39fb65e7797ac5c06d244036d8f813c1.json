{"remainingRequest":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js??ref--3-1!/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-bitbucket-v2/lib/index.js","dependencies":[{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/@vssue/api-bitbucket-v2/lib/index.js","mtime":1604064595813},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/cache-loader/dist/cjs.js","mtime":1603041438982},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js","mtime":1603041438713}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import axios from 'axios';\nimport { buildQuery, buildURL, concatURL, getCleanURL, parseQuery, } from '@vssue/utils';\nimport { normalizeUser, normalizeIssue, normalizeComment } from './utils';\n/**\n * Bitbucket API V2\n *\n * @see https://developer.atlassian.com/bitbucket/api/2/reference/\n * @see https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html\n */\nexport default class BitbucketV2 {\n    constructor({ baseURL = 'https://bitbucket.org', owner, repo, clientId, state, }) {\n        this.baseURL = baseURL;\n        this.owner = owner;\n        this.repo = repo;\n        this.clientId = clientId;\n        this.state = state;\n        this.$http = axios.create({\n            baseURL: 'https://api.bitbucket.org/2.0',\n            headers: {\n                Accept: 'application/json',\n            },\n        });\n    }\n    /**\n     * The platform api info\n     */\n    get platform() {\n        return {\n            name: 'Bitbucket',\n            link: this.baseURL,\n            version: 'v2',\n            meta: {\n                reactable: false,\n                sortable: true,\n            },\n        };\n    }\n    /**\n     * Redirect to the authorization page of platform.\n     *\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/authentication#oauth-2\n     */\n    redirectAuth() {\n        window.location.href = buildURL(concatURL(this.baseURL, 'site/oauth2/authorize'), {\n            client_id: this.clientId,\n            redirect_uri: window.location.href,\n            response_type: 'token',\n            state: this.state,\n        });\n    }\n    /**\n     * Handle authorization.\n     *\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/authentication#oauth-2\n     *\n     * @remarks\n     * If the `access_token` and `state` exist in the query, and the `state` matches, remove them from query, and return the access token.\n     */\n    async handleAuth() {\n        const hash = parseQuery(window.location.hash.slice(1));\n        if (!hash.access_token || hash.state !== this.state) {\n            return null;\n        }\n        const accessToken = hash.access_token;\n        delete hash.access_token;\n        delete hash.token_type;\n        delete hash.expires_in;\n        delete hash.state;\n        delete hash.scopes;\n        const hashString = buildQuery(hash);\n        const newHash = hashString ? `#${hashString}` : '';\n        const replaceURL = `${getCleanURL(window.location.href)}${window.location.search}${newHash}`;\n        window.history.replaceState(null, '', replaceURL);\n        return accessToken;\n    }\n    /**\n     * Get the logged-in user with access token.\n     *\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/user\n     */\n    async getUser({ accessToken, }) {\n        const { data } = await this.$http.get('user', {\n            headers: { Authorization: `Bearer ${accessToken}` },\n        });\n        return normalizeUser(data);\n    }\n    /**\n     * Get issue of this page according to the issue id or the issue title\n     *\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D#get\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues#get\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/pagination\n     */\n    async getIssue({ accessToken, issueId, issueTitle, }) {\n        const options = {};\n        if (accessToken) {\n            options.headers = {\n                Authorization: `Bearer ${accessToken}`,\n            };\n        }\n        if (issueId) {\n            try {\n                options.params = {\n                    // to avoid caching\n                    timestamp: Date.now(),\n                };\n                const { data } = await this.$http.get(`repositories/${this.owner}/${this.repo}/issues/${issueId}`, options);\n                return normalizeIssue(data);\n            }\n            catch (e) {\n                if (e.response && e.response.status === 404) {\n                    return null;\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        else {\n            options.params = {\n                sort: 'created_on',\n                q: `title=\"${issueTitle}\"`,\n                // to avoid caching\n                timestamp: Date.now(),\n            };\n            const { data } = await this.$http.get(`repositories/${this.owner}/${this.repo}/issues`, options);\n            return data.size > 0 ? normalizeIssue(data.values[0]) : null;\n        }\n    }\n    /**\n     * Create a new issue\n     *\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues#post\n     */\n    async postIssue({ accessToken, title, content, }) {\n        const { data } = await this.$http.post(`repositories/${this.owner}/${this.repo}/issues`, {\n            title,\n            content: {\n                raw: content,\n            },\n            priority: 'trivial',\n            kind: 'task',\n        }, {\n            headers: { Authorization: `Bearer ${accessToken}` },\n        });\n        data.links.html = {\n            href: concatURL(this.baseURL, `${this.owner}/${this.repo}/issues/${data.id}`),\n        };\n        return normalizeIssue(data);\n    }\n    /**\n     * Get comments of this page according to the issue id\n     *\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments#get\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/pagination\n     */\n    async getComments({ accessToken, issueId, query: { page = 1, perPage = 10, sort = 'desc' } = {}, }) {\n        const options = {\n            params: {\n                // pagination\n                page: page,\n                pagelen: perPage,\n                sort: sort === 'desc' ? '-created_on' : 'created_on',\n                // to avoid caching\n                timestamp: Date.now(),\n            },\n        };\n        if (accessToken) {\n            options.headers = {\n                Authorization: `Bearer ${accessToken}`,\n            };\n        }\n        const { data } = await this.$http.get(`repositories/${this.owner}/${this.repo}/issues/${issueId}/comments`, options);\n        return {\n            count: data.size,\n            page: data.page,\n            perPage: data.pagelen,\n            data: data.values\n                .filter(item => item.content.raw !== null)\n                .map(normalizeComment),\n        };\n    }\n    /**\n     * Create a new comment\n     *\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments#post\n     */\n    async postComment({ accessToken, issueId, content, }) {\n        const { data } = await this.$http.post(`repositories/${this.owner}/${this.repo}/issues/${issueId}/comments`, {\n            content: {\n                raw: content,\n            },\n        }, {\n            headers: { Authorization: `Bearer ${accessToken}` },\n        });\n        return normalizeComment(data);\n    }\n    /**\n     * Edit a comment\n     *\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#put\n     */\n    async putComment({ accessToken, issueId, commentId, content, }) {\n        const { data } = await this.$http.put(`repositories/${this.owner}/${this.repo}/issues/${issueId}/comments/${commentId}`, {\n            content: {\n                raw: content,\n            },\n        }, {\n            headers: { Authorization: `Bearer ${accessToken}` },\n        });\n        return normalizeComment(data);\n    }\n    /**\n     * Delete a comment\n     *\n     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#delete\n     */\n    async deleteComment({ accessToken, issueId, commentId, }) {\n        const { status } = await this.$http.delete(`repositories/${this.owner}/${this.repo}/issues/${issueId}/comments/${commentId}`, {\n            headers: { Authorization: `Bearer ${accessToken}` },\n        });\n        return status === 204;\n    }\n    /**\n     * Bitbucket does not support reactions now\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async getCommentReactions(options) {\n        throw new Error('501 Not Implemented');\n    }\n    /**\n     * Bitbucket does not support reactions now\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async postCommentReaction(options) {\n        throw new Error('501 Not Implemented');\n    }\n}\n//# sourceMappingURL=index.js.map"]}]}
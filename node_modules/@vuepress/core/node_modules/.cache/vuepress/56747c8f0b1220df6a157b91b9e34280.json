{"remainingRequest":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js??ref--3-1!/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/lodash/_createSet.js","dependencies":[{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/lodash/_createSet.js","mtime":1603041169010},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/cache-loader/dist/cjs.js","mtime":1603041438982},{"path":"/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/babel-loader/lib/index.js","mtime":1603041438713}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLAogICAgbm9vcCA9IHJlcXVpcmUoJy4vbm9vcCcpLAogICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTsKLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovCgoKdmFyIElORklOSVRZID0gMSAvIDA7Ci8qKgogKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuCiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuCiAqLwoKdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmIDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywgLTBdKSlbMV0gPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uICh2YWx1ZXMpIHsKICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpOwp9Owptb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVNldDs="},{"version":3,"sources":["/opt/myblog/vuepress-theme-reco-master/zdblog/node_modules/lodash/_createSet.js"],"names":["Set","require","noop","setToArray","INFINITY","createSet","values","module","exports"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAjB;AAAA,IACIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CADlB;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAAC,eAAD,CAFxB;AAIA;;;AACA,IAAIG,QAAQ,GAAG,IAAI,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAG,EAAEL,GAAG,IAAK,IAAIG,UAAU,CAAC,IAAIH,GAAJ,CAAQ,GAAE,CAAC,CAAH,CAAR,CAAD,CAAV,CAA2B,CAA3B,CAAL,IAAuCI,QAAhD,IAA4DF,IAA5D,GAAmE,UAASI,MAAT,EAAiB;AAClG,SAAO,IAAIN,GAAJ,CAAQM,MAAR,CAAP;AACD,CAFD;AAIAC,MAAM,CAACC,OAAP,GAAiBH,SAAjB","sourcesContent":["var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n"]}]}
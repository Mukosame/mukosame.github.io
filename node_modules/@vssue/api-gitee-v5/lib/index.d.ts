import { VssueAPI } from 'vssue';
import { AxiosInstance } from 'axios';
/**
 * Gitee REST API v5
 *
 * @see https://gitee.com/api/v5/swagger
 * @see https://gitee.com/api/v5/oauth_doc
 */
export default class GiteeV5 implements VssueAPI.Instance {
    baseURL: string;
    owner: string;
    repo: string;
    labels: Array<string>;
    clientId: string;
    clientSecret: string;
    state: string;
    proxy: string | ((url: string) => string);
    $http: AxiosInstance;
    constructor({ baseURL, owner, repo, labels, clientId, clientSecret, state, proxy, }: VssueAPI.Options);
    /**
     * The platform api info
     */
    get platform(): VssueAPI.Platform;
    /**
     * Redirect to the authorization page of platform.
     *
     * @see https://gitee.com/api/v5/oauth_doc
     */
    redirectAuth(): void;
    /**
     * Handle authorization.
     *
     * @see https://gitee.com/api/v5/oauth_doc
     *
     * @remarks
     * If the `code` and `state` exist in the query, and the `state` matches, remove them from query, and try to get the access token.
     */
    handleAuth(): Promise<VssueAPI.AccessToken>;
    /**
     * Get user access token via `code`
     *
     * @see https://gitee.com/api/v5/oauth_doc
     */
    getAccessToken({ code }: {
        code: string;
    }): Promise<string>;
    /**
     * Get the logged-in user with access token.
     *
     * @see https://gitee.com/api/v5/swagger#/getV5User
     */
    getUser({ accessToken, }: {
        accessToken: VssueAPI.AccessToken;
    }): Promise<VssueAPI.User>;
    /**
     * Get issue of this page according to the issue id or the issue title
     *
     * @see https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoIssues
     * @see https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoIssuesNumber
     * @see https://gitee.com/api/v5/swagger#/getV5SearchIssues
     */
    getIssue({ accessToken, issueId, issueTitle, }: {
        accessToken: VssueAPI.AccessToken;
        issueId?: string | number;
        issueTitle?: string;
    }): Promise<VssueAPI.Issue | null>;
    /**
     * Create a new issue
     *
     * @see https://gitee.com/api/v5/swagger#/postV5ReposOwnerIssues
     */
    postIssue({ accessToken, title, content, }: {
        accessToken: VssueAPI.AccessToken;
        title: string;
        content: string;
    }): Promise<VssueAPI.Issue>;
    /**
     * Get comments of this page according to the issue id
     *
     * @see https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoIssuesNumberComments
     *
     * @remarks
     * Gitee V3 does not support sort for issue comments now.
     */
    getComments({ accessToken, issueId, query: { page, perPage }, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        query?: Partial<VssueAPI.Query>;
    }): Promise<VssueAPI.Comments>;
    /**
     * Create a new comment
     *
     * @see https://gitee.com/api/v5/swagger#/postV5ReposOwnerRepoIssuesNumberComments
     */
    postComment({ accessToken, issueId, content, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        content: string;
    }): Promise<VssueAPI.Comment>;
    /**
     * Edit a comment
     *
     * @see https://gitee.com/api/v5/swagger#/patchV5ReposOwnerRepoIssuesCommentsId
     */
    putComment({ accessToken, commentId, content, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        commentId: string | number;
        content: string;
    }): Promise<VssueAPI.Comment>;
    /**
     * Delete a comment
     *
     * @see https://developer.github.com/v3/issues/comments/#delete-a-comment
     */
    deleteComment({ accessToken, commentId, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        commentId: string | number;
    }): Promise<boolean>;
    /**
     * Gitee does not support reactions now
     */
    getCommentReactions(options: any): Promise<VssueAPI.Reactions>;
    /**
     * Gitee does not support reactions now
     */
    postCommentReaction(options: any): Promise<boolean>;
}

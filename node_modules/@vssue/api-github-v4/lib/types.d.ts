export interface ResponseAccessToken {
    access_token: string;
}
export interface ResponseGraphql<T> {
    data: T;
}
export declare type ResponseGraphqlGetUser = ResponseGraphql<{
    viewer: ResponseUser;
}>;
export declare type ResponseGraphqlGetIssue = ResponseGraphql<{
    repository: {
        issue: ResponseIssue;
    };
}>;
export declare type ResponseGraphqlGetIssueSearch = ResponseGraphql<{
    search: {
        nodes: ResponseIssue[];
    };
}>;
export declare type ResponseGraphqlGetComments = ResponseGraphql<{
    repository: {
        issue: {
            comments: {
                nodes: ResponseComment[];
                pageInfo: {
                    endCursor: string;
                    startCursor: string;
                };
                totalCount: number;
            };
        };
    };
}>;
export declare type ResponseGraphqlPostComment = ResponseGraphql<{
    addComment: {
        commentEdge: {
            node: ResponseComment;
        };
    };
}>;
export declare type ResponseGraphqlPutComment = ResponseGraphql<{
    updateIssueComment: {
        issueComment: ResponseComment;
    };
}>;
export declare type ResponseGraphqlGetCommentReactions = ResponseGraphql<{
    repository: {
        issue: {
            comments: {
                nodes: Pick<ResponseComment, 'id' | 'reactionGroups'>[];
            };
        };
    };
}>;
export interface ResponseUser {
    login: string;
    url: string;
    avatarUrl: string;
}
export interface ResponseIssue {
    id: string;
    number: number;
    title: string;
    body: string;
    url: string;
}
export interface ResponseComment {
    id: number;
    author: ResponseUser;
    title: string;
    body: string;
    bodyHTML: string;
    createdAt: string;
    updatedAt: string;
    reactionGroups: ResponseReaction[];
}
export interface ResponseReaction {
    users: {
        totalCount: number;
    };
    content: 'THUMBS_UP' | 'THUMBS_DOWN' | 'HEART' | string;
}

import { VssueAPI } from 'vssue';
import { AxiosInstance } from 'axios';
/**
 * Bitbucket API V2
 *
 * @see https://developer.atlassian.com/bitbucket/api/2/reference/
 * @see https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html
 */
export default class BitbucketV2 implements VssueAPI.Instance {
    baseURL: string;
    owner: string;
    repo: string;
    clientId: string;
    state: string;
    $http: AxiosInstance;
    constructor({ baseURL, owner, repo, clientId, state, }: VssueAPI.Options);
    /**
     * The platform api info
     */
    get platform(): VssueAPI.Platform;
    /**
     * Redirect to the authorization page of platform.
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/authentication#oauth-2
     */
    redirectAuth(): void;
    /**
     * Handle authorization.
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/authentication#oauth-2
     *
     * @remarks
     * If the `access_token` and `state` exist in the query, and the `state` matches, remove them from query, and return the access token.
     */
    handleAuth(): Promise<VssueAPI.AccessToken>;
    /**
     * Get the logged-in user with access token.
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/user
     */
    getUser({ accessToken, }: {
        accessToken: VssueAPI.AccessToken;
    }): Promise<VssueAPI.User>;
    /**
     * Get issue of this page according to the issue id or the issue title
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D#get
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues#get
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/pagination
     */
    getIssue({ accessToken, issueId, issueTitle, }: {
        accessToken: VssueAPI.AccessToken;
        issueId?: string | number;
        issueTitle?: string;
    }): Promise<VssueAPI.Issue | null>;
    /**
     * Create a new issue
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues#post
     */
    postIssue({ accessToken, title, content, }: {
        accessToken: VssueAPI.AccessToken;
        title: string;
        content: string;
    }): Promise<VssueAPI.Issue>;
    /**
     * Get comments of this page according to the issue id
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments#get
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/pagination
     */
    getComments({ accessToken, issueId, query: { page, perPage, sort }, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        query?: Partial<VssueAPI.Query>;
    }): Promise<VssueAPI.Comments>;
    /**
     * Create a new comment
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments#post
     */
    postComment({ accessToken, issueId, content, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        content: string;
    }): Promise<VssueAPI.Comment>;
    /**
     * Edit a comment
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#put
     */
    putComment({ accessToken, issueId, commentId, content, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        commentId: string | number;
        content: string;
    }): Promise<VssueAPI.Comment>;
    /**
     * Delete a comment
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#delete
     */
    deleteComment({ accessToken, issueId, commentId, }: {
        accessToken: VssueAPI.AccessToken;
        issueId: string | number;
        commentId: string | number;
    }): Promise<boolean>;
    /**
     * Bitbucket does not support reactions now
     */
    getCommentReactions(options: any): Promise<VssueAPI.Reactions>;
    /**
     * Bitbucket does not support reactions now
     */
    postCommentReaction(options: any): Promise<boolean>;
}

{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{613:function(n,s,t){\"use strict\";t.r(s);var a=t(23),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[t(\"p\",[n._v(\"背景：\"),t(\"br\"),n._v(\"\\n运行环境：centos的docker容器\"),t(\"br\"),n._v(\"\\n进程：consul，使用python脚本对consul进程尽心启动停止监控\"),t(\"br\"),n._v(\"\\n资源限制：cgroup进行资源限制，100M内存\"),t(\"br\"),n._v(\"\\n问题：consul进程内存超过100M，被系统oom kill掉了；\"),t(\"br\"),n._v(\"\\npython脚本再次启动失败，具体看的时候发现python脚本无法import原生的pyc文件；\"),t(\"br\"),n._v(\"\\n查看pyc文件发现大小较小，怀疑pyc文件损坏\")]),n._v(\" \"),t(\"p\",[n._v(\"11-23 10:00 容器构造oom killer，一千三百多此，pyc文件不可用又出现一次。\")]),n._v(\" \"),t(\"p\",[n._v(\"11-24 10:00 昨天在虚拟机里面浮现进程内存已经设置的很小了，但是没有oom killer。\"),t(\"br\"),n._v(\"\\n原因是虚拟机里面有swap，关闭swap后也会oom\")]),n._v(\" \"),t(\"p\",[n._v(\"求助某python大神一起分析，名翔神\")]),n._v(\" \"),t(\"p\",[n._v(\"11-24 15:00 经翔神分析pyc，发现：\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"pyc文件不是新生成的，里面的时间还是2018年1月1号，看来不知道为什么oom之后它就被truncate了 \\n\\n现在我理解应该是重启的时候不知道为什么触发了重新编译，然后可能在这种环境下触发了Python的import bug，Python好像的确有一个bug会导致写了一个空的codeobject进去\\n\\n内容是完整的，只是内容是错误的\\n\\n我们的业务进程OOM死掉后，业务进程重启，Python会启动，Python启动过程中会import标准库，比如encodings,re，这个过程涉及到读文件，但因为内存不过，首先读pyc失败，认为没有pyc，于是重新编译，重新编译的时候读文件又失败，触发了Python2中的一个bug，写入了一个空的pyc\\n\\n今年刚修复,修复之后这种情况下启动的时候直接报IOError    \\n\\nhttps://github.com/python/cpython/commit/f64c813de84011a84ca21d75a294861a9cc2dfdc    \\n\\nhttps://bugs.python.org/issue25083 可以参考这个问题单，人家出现的问题现象基本和我们一致，一个大小极小的pyc文件，然后报不想关的错误，它里面也提供了重现的方法。    \\n           \\n\")])]),n._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),t(\"br\")])]),t(\"p\",[n._v(\"11-26 22:00 周日跑了一天，虚拟机跑了20000+次oom，没有出现pyc文件损坏；经过翔神指点编译的带\\n补丁的python环境，也没有出现pyc问题\")]),n._v(\" \"),t(\"p\",[n._v(\"11-26 23:00 三个容器，其中两个容器回退python验证，另外一个容器继续使用带补丁的python环境；持续观察\")]),n._v(\" \"),t(\"p\",[n._v(\"11-28 15:00 带补丁的python环境复现情况，其中复现了一晚上进程oom，但是没有出现pyc文件损坏导致；\"),t(\"br\"),n._v(\"\\n观察日志，发现有如下日志\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"Error: I/O error while reading\\n\")])]),n._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),t(\"br\")])])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}